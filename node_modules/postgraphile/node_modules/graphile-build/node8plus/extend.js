"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.indent = indent;
exports.default = extend;

var _chalk = require("chalk");

var _chalk2 = _interopRequireDefault(_chalk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const aExtendedB = new WeakMap();

const INDENT = "  ";

function indent(text) {
  return INDENT + text.replace(/\n/g, "\n" + INDENT).replace(/\n +(?=\n|$)/g, "\n");
}

function extend(base, extra, hint) {
  const keysA = Object.keys(base);
  const keysB = Object.keys(extra);
  const hints = Object.create(null);
  for (const key of keysA) {
    const hintKey = `_source__${key}`;
    if (base[hintKey]) {
      hints[hintKey] = base[hintKey];
    }
  }

  for (const key of keysB) {
    const newValue = extra[key];
    const oldValue = base[key];
    const hintKey = `_source__${key}`;
    const hintB = extra[hintKey] || hint;
    if (aExtendedB.get(newValue) !== oldValue && keysA.indexOf(key) >= 0) {
      // $FlowFixMe
      const hintA = base[hintKey];
      const firstEntityDetails = !hintA ? "We don't have any information about the first entity." : `The first entity was:\n\n${indent(_chalk2.default.magenta(hintA))}`;
      const secondEntityDetails = !hintB ? "We don't have any information about the second entity." : `The second entity was:\n\n${indent(_chalk2.default.yellow(hintB))}`;
      throw new Error(`A naming conflict has occurred - two entities have tried to define the same key '${_chalk2.default.bold(key)}'.\n\n${indent(firstEntityDetails)}\n\n${indent(secondEntityDetails)}`);
    }
    hints[hintKey] = hints[hintKey] || hintB || base[hintKey];
  }
  const obj = Object.assign({}, base, extra);
  aExtendedB.set(obj, base);
  for (const hintKey in hints) {
    if (hints[hintKey]) {
      Object.defineProperty(obj, hintKey, {
        configurable: false,
        enumerable: false,
        value: hints[hintKey],
        writable: false
      });
    }
  }
  return obj;
}
//# sourceMappingURL=extend.js.map