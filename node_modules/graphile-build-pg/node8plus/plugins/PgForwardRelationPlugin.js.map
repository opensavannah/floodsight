{"version":3,"sources":["../../src/plugins/PgForwardRelationPlugin.js"],"names":["debug","PgForwardRelationPlugin","builder","hook","fields","build","context","extend","getSafeAliasFromResolveInfo","getSafeAliasFromAlias","pgGetGqlTypeByTypeIdAndModifier","pgIntrospectionResultsByKind","introspectionResultsByKind","pgSql","sql","inflection","pgQueryFromResolveData","queryFromResolveData","pgOmit","omit","describePgEntity","scope","isPgRowType","isMutationPayload","pgIntrospection","pgIntrospectionTable","fieldWithHooks","Self","table","kind","namespace","foreignKeyConstraints","constraint","filter","con","type","classId","id","attributes","attribute","attr","sort","a","b","num","reduce","memo","gqlTableType","tableTypeName","name","foreignTable","classById","foreignClassId","gqlForeignTableType","foreignTableTypeName","Error","foreignSchema","n","namespaceId","foreignAttributes","keys","keyAttributeNums","map","foreignKeys","foreignKeyAttributeNums","every","_","some","key","fieldName","singleRelationByKeys","getDataFromParsedResolveInfoFragment","addDataGenerator","parsedResolveInfoFragment","pgQuery","queryBuilder","select","resolveData","foreignTableAlias","identifier","Symbol","query","asJson","innerQueryBuilder","parentQueryBuilder","forEach","i","where","fragment","getTableAlias","alias","description","tags","forwardDescription","resolve","rawData","_args","_context","resolveInfo","data","safeAlias","pgFieldIntrospection","isPgForwardRelationField"],"mappings":"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","file":"PgForwardRelationPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport debugFactory from \"debug\";\n\nconst debug = debugFactory(\"graphile-build-pg\");\n\nexport default (function PgForwardRelationPlugin(builder) {\n  builder.hook(\"GraphQLObjectType:fields\", (fields, build, context) => {\n    const {\n      extend,\n      getSafeAliasFromResolveInfo,\n      getSafeAliasFromAlias,\n      pgGetGqlTypeByTypeIdAndModifier,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      pgSql: sql,\n      inflection,\n      pgQueryFromResolveData: queryFromResolveData,\n      pgOmit: omit,\n      describePgEntity,\n    } = build;\n    const {\n      scope: {\n        isPgRowType,\n        isMutationPayload,\n        pgIntrospection,\n        pgIntrospectionTable,\n      },\n      fieldWithHooks,\n      Self,\n    } = context;\n    const table = pgIntrospectionTable || pgIntrospection;\n    if (\n      !(isPgRowType || isMutationPayload) ||\n      !table ||\n      table.kind !== \"class\" ||\n      !table.namespace\n    ) {\n      return fields;\n    }\n    // This is a relation in which we (table) are local, and there's a foreign table\n\n    const foreignKeyConstraints = introspectionResultsByKind.constraint\n      .filter(con => con.type === \"f\")\n      .filter(con => con.classId === table.id);\n    const attributes = introspectionResultsByKind.attribute\n      .filter(attr => attr.classId === table.id)\n      .sort((a, b) => a.num - b.num);\n\n    return extend(\n      fields,\n      foreignKeyConstraints.reduce((memo, constraint) => {\n        if (omit(constraint, \"read\")) {\n          return memo;\n        }\n        const gqlTableType = pgGetGqlTypeByTypeIdAndModifier(\n          table.type.id,\n          null\n        );\n        const tableTypeName = gqlTableType.name;\n        if (!gqlTableType) {\n          debug(\n            `Could not determine type for table with id ${constraint.classId}`\n          );\n          return memo;\n        }\n        const foreignTable =\n          introspectionResultsByKind.classById[constraint.foreignClassId];\n        const gqlForeignTableType = pgGetGqlTypeByTypeIdAndModifier(\n          foreignTable.type.id,\n          null\n        );\n        const foreignTableTypeName = gqlForeignTableType.name;\n        if (!gqlForeignTableType) {\n          debug(\n            `Could not determine type for foreign table with id ${\n              constraint.foreignClassId\n            }`\n          );\n          return memo;\n        }\n        if (!foreignTable) {\n          throw new Error(\n            `Could not find the foreign table (constraint: ${constraint.name})`\n          );\n        }\n        if (omit(foreignTable, \"read\")) {\n          return memo;\n        }\n        const foreignSchema = introspectionResultsByKind.namespace.filter(\n          n => n.id === foreignTable.namespaceId\n        )[0];\n        const foreignAttributes = introspectionResultsByKind.attribute\n          .filter(attr => attr.classId === constraint.foreignClassId)\n          .sort((a, b) => a.num - b.num);\n\n        const keys = constraint.keyAttributeNums.map(\n          num => attributes.filter(attr => attr.num === num)[0]\n        );\n        const foreignKeys = constraint.foreignKeyAttributeNums.map(\n          num => foreignAttributes.filter(attr => attr.num === num)[0]\n        );\n        if (!keys.every(_ => _) || !foreignKeys.every(_ => _)) {\n          throw new Error(\"Could not find key columns!\");\n        }\n        if (keys.some(key => omit(key, \"read\"))) {\n          return memo;\n        }\n        if (foreignKeys.some(key => omit(key, \"read\"))) {\n          return memo;\n        }\n\n        const fieldName = inflection.singleRelationByKeys(\n          keys,\n          foreignTable,\n          table,\n          constraint\n        );\n\n        memo = extend(\n          memo,\n          {\n            [fieldName]: fieldWithHooks(\n              fieldName,\n              ({ getDataFromParsedResolveInfoFragment, addDataGenerator }) => {\n                addDataGenerator(parsedResolveInfoFragment => {\n                  return {\n                    pgQuery: queryBuilder => {\n                      queryBuilder.select(() => {\n                        const resolveData = getDataFromParsedResolveInfoFragment(\n                          parsedResolveInfoFragment,\n                          gqlForeignTableType\n                        );\n                        const foreignTableAlias = sql.identifier(Symbol());\n                        const query = queryFromResolveData(\n                          sql.identifier(foreignSchema.name, foreignTable.name),\n                          foreignTableAlias,\n                          resolveData,\n                          { asJson: true },\n                          innerQueryBuilder => {\n                            innerQueryBuilder.parentQueryBuilder = queryBuilder;\n                            keys.forEach((key, i) => {\n                              innerQueryBuilder.where(\n                                sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                                  key.name\n                                )} = ${foreignTableAlias}.${sql.identifier(\n                                  foreignKeys[i].name\n                                )}`\n                              );\n                            });\n                          }\n                        );\n                        return sql.fragment`(${query})`;\n                      }, getSafeAliasFromAlias(parsedResolveInfoFragment.alias));\n                    },\n                  };\n                });\n                return {\n                  description:\n                    constraint.tags.forwardDescription ||\n                    `Reads a single \\`${foreignTableTypeName}\\` that is related to this \\`${tableTypeName}\\`.`,\n                  type: gqlForeignTableType, // Nullable since RLS may forbid fetching\n                  resolve: (rawData, _args, _context, resolveInfo) => {\n                    const data = isMutationPayload ? rawData.data : rawData;\n                    const safeAlias = getSafeAliasFromResolveInfo(resolveInfo);\n                    return data[safeAlias];\n                  },\n                };\n              },\n              {\n                pgFieldIntrospection: constraint,\n                isPgForwardRelationField: true,\n              }\n            ),\n          },\n          `Adding forward relation for ${describePgEntity(constraint)}`\n        );\n        return memo;\n      }, {}),\n      `Adding forward relations to '${Self.name}'`\n    );\n  });\n}: Plugin);\n"]}