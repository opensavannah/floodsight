{"version":3,"sources":["../../src/plugins/PgMutationCreatePlugin.js"],"names":["debug","PgMutationCreatePlugin","builder","pgDisableDefaultMutations","hook","fields","build","context","extend","newWithHooks","parseResolveInfo","pgIntrospectionResultsByKind","pgGetGqlTypeByTypeIdAndModifier","pgGetGqlInputTypeByTypeIdAndModifier","pgSql","sql","gql2pg","graphql","GraphQLObjectType","GraphQLInputObjectType","GraphQLNonNull","GraphQLString","pgColumnFilter","inflection","pgQueryFromResolveData","queryFromResolveData","pgOmit","omit","pgViaTemporaryTable","viaTemporaryTable","describePgEntity","sqlCommentByAddingTags","scope","isRootMutation","fieldWithHooks","class","filter","table","namespace","isSelectable","isInsertable","reduce","memo","Table","type","id","name","TableInput","tableTypeName","tableType","InputType","createInputType","description","clientMutationId","tableFieldName","__origin","isPgCreateInputType","pgInflection","PayloadType","createPayloadType","recurseDataGeneratorsForField","tableName","resolve","data","isMutationPayload","isPgCreatePayloadType","pgIntrospection","fieldName","createField","getDataFromParsedResolveInfoFragment","args","input","pgClient","resolveInfo","parsedResolveInfoFragment","resolveData","insertedRowAlias","identifier","Symbol","query","sqlColumns","sqlValues","inputData","attribute","attr","classId","forEach","column","val","Object","prototype","hasOwnProperty","call","push","typeModifier","mutationQuery","length","fragment","join","row","rows","e","pgFieldIntrospection","isPgCreateMutationField"],"mappings":"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","file":"PgMutationCreatePlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport debugFactory from \"debug\";\n\nconst debug = debugFactory(\"graphile-build-pg\");\n\nexport default (function PgMutationCreatePlugin(\n  builder,\n  { pgDisableDefaultMutations }\n) {\n  if (pgDisableDefaultMutations) {\n    return;\n  }\n  builder.hook(\"GraphQLObjectType:fields\", (fields, build, context) => {\n    const {\n      extend,\n      newWithHooks,\n      parseResolveInfo,\n      pgIntrospectionResultsByKind,\n      pgGetGqlTypeByTypeIdAndModifier,\n      pgGetGqlInputTypeByTypeIdAndModifier,\n      pgSql: sql,\n      gql2pg,\n      graphql: {\n        GraphQLObjectType,\n        GraphQLInputObjectType,\n        GraphQLNonNull,\n        GraphQLString,\n      },\n      pgColumnFilter,\n      inflection,\n      pgQueryFromResolveData: queryFromResolveData,\n      pgOmit: omit,\n      pgViaTemporaryTable: viaTemporaryTable,\n      describePgEntity,\n      sqlCommentByAddingTags,\n    } = build;\n    const {\n      scope: { isRootMutation },\n      fieldWithHooks,\n    } = context;\n    if (!isRootMutation) {\n      return fields;\n    }\n\n    return extend(\n      fields,\n      pgIntrospectionResultsByKind.class\n        .filter(table => !!table.namespace)\n        .filter(table => table.isSelectable)\n        .filter(table => table.isInsertable && !omit(table, \"create\"))\n        .reduce((memo, table) => {\n          const Table = pgGetGqlTypeByTypeIdAndModifier(table.type.id, null);\n          if (!Table) {\n            debug(\n              `There was no table type for table '${table.namespace.name}.${\n                table.name\n              }', so we're not generating a create mutation for it.`\n            );\n            return memo;\n          }\n          const TableInput = pgGetGqlInputTypeByTypeIdAndModifier(\n            table.type.id,\n            null\n          );\n          if (!TableInput) {\n            debug(\n              `There was no input type for table '${table.namespace.name}.${\n                table.name\n              }', so we're going to omit it from the create mutation.`\n            );\n          }\n          const tableTypeName = inflection.tableType(table);\n          const InputType = newWithHooks(\n            GraphQLInputObjectType,\n            {\n              name: inflection.createInputType(table),\n              description: `All input for the create \\`${tableTypeName}\\` mutation.`,\n              fields: {\n                clientMutationId: {\n                  description:\n                    \"An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.\",\n                  type: GraphQLString,\n                },\n                ...(TableInput\n                  ? {\n                      [inflection.tableFieldName(table)]: {\n                        description: `The \\`${tableTypeName}\\` to be created by this mutation.`,\n                        type: new GraphQLNonNull(TableInput),\n                      },\n                    }\n                  : null),\n              },\n            },\n            {\n              __origin: `Adding table create input type for ${describePgEntity(\n                table\n              )}. You can rename the table's GraphQL type via:\\n\\n  ${sqlCommentByAddingTags(\n                table,\n                {\n                  name: \"newNameHere\",\n                }\n              )}`,\n              isPgCreateInputType: true,\n              pgInflection: table,\n            }\n          );\n          const PayloadType = newWithHooks(\n            GraphQLObjectType,\n            {\n              name: inflection.createPayloadType(table),\n              description: `The output of our create \\`${tableTypeName}\\` mutation.`,\n              fields: ({ recurseDataGeneratorsForField }) => {\n                const tableName = inflection.tableFieldName(table);\n                recurseDataGeneratorsForField(tableName);\n                return {\n                  clientMutationId: {\n                    description:\n                      \"The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.\",\n                    type: GraphQLString,\n                  },\n                  [tableName]: {\n                    description: `The \\`${tableTypeName}\\` that was created by this mutation.`,\n                    type: Table,\n                    resolve(data) {\n                      return data.data;\n                    },\n                  },\n                };\n              },\n            },\n            {\n              __origin: `Adding table create payload type for ${describePgEntity(\n                table\n              )}. You can rename the table's GraphQL type via:\\n\\n  ${sqlCommentByAddingTags(\n                table,\n                {\n                  name: \"newNameHere\",\n                }\n              )}`,\n              isMutationPayload: true,\n              isPgCreatePayloadType: true,\n              pgIntrospection: table,\n            }\n          );\n          const fieldName = inflection.createField(table);\n          memo = build.extend(\n            memo,\n            {\n              [fieldName]: fieldWithHooks(\n                fieldName,\n                context => {\n                  const { getDataFromParsedResolveInfoFragment } = context;\n                  return {\n                    description: `Creates a single \\`${tableTypeName}\\`.`,\n                    type: PayloadType,\n                    args: {\n                      input: {\n                        type: new GraphQLNonNull(InputType),\n                      },\n                    },\n                    async resolve(data, { input }, { pgClient }, resolveInfo) {\n                      const parsedResolveInfoFragment = parseResolveInfo(\n                        resolveInfo\n                      );\n                      const resolveData = getDataFromParsedResolveInfoFragment(\n                        parsedResolveInfoFragment,\n                        PayloadType\n                      );\n                      const insertedRowAlias = sql.identifier(Symbol());\n                      const query = queryFromResolveData(\n                        insertedRowAlias,\n                        insertedRowAlias,\n                        resolveData,\n                        {}\n                      );\n                      const sqlColumns = [];\n                      const sqlValues = [];\n                      const inputData = input[inflection.tableFieldName(table)];\n                      pgIntrospectionResultsByKind.attribute\n                        .filter(attr => attr.classId === table.id)\n                        .filter(attr => pgColumnFilter(attr, build, context))\n                        .filter(attr => !omit(attr, \"create\"))\n                        .forEach(attr => {\n                          const fieldName = inflection.column(attr);\n                          const val = inputData[fieldName];\n                          if (\n                            Object.prototype.hasOwnProperty.call(\n                              inputData,\n                              fieldName\n                            )\n                          ) {\n                            sqlColumns.push(sql.identifier(attr.name));\n                            sqlValues.push(\n                              gql2pg(val, attr.type, attr.typeModifier)\n                            );\n                          }\n                        });\n\n                      const mutationQuery = sql.query`\n                    insert into ${sql.identifier(\n                      table.namespace.name,\n                      table.name\n                    )} ${\n                        sqlColumns.length\n                          ? sql.fragment`(\n                        ${sql.join(sqlColumns, \", \")}\n                      ) values(${sql.join(sqlValues, \", \")})`\n                          : sql.fragment`default values`\n                      } returning *`;\n\n                      let row;\n                      try {\n                        await pgClient.query(\"SAVEPOINT graphql_mutation\");\n                        const rows = await viaTemporaryTable(\n                          pgClient,\n                          sql.identifier(table.namespace.name, table.name),\n                          mutationQuery,\n                          insertedRowAlias,\n                          query\n                        );\n                        row = rows[0];\n                        await pgClient.query(\n                          \"RELEASE SAVEPOINT graphql_mutation\"\n                        );\n                      } catch (e) {\n                        await pgClient.query(\n                          \"ROLLBACK TO SAVEPOINT graphql_mutation\"\n                        );\n                        throw e;\n                      }\n                      return {\n                        clientMutationId: input.clientMutationId,\n                        data: row,\n                      };\n                    },\n                  };\n                },\n                {\n                  pgFieldIntrospection: table,\n                  isPgCreateMutationField: true,\n                }\n              ),\n            },\n            `Adding create mutation for ${describePgEntity(\n              table\n            )}. You can omit this default mutation with:\\n\\n  ${sqlCommentByAddingTags(\n              table,\n              {\n                omit: \"create\",\n              }\n            )}`\n          );\n          return memo;\n        }, {}),\n      `Adding default 'create' mutation to root mutation`\n    );\n  });\n}: Plugin);\n"]}