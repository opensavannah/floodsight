{"version":3,"sources":["../../src/plugins/PgMutationProceduresPlugin.js"],"names":["PgMutationProceduresPlugin","builder","hook","fields","build","context","extend","pgIntrospectionResultsByKind","introspectionResultsByKind","inflection","pgMakeProcField","makeProcField","pgOmit","omit","swallowError","describePgEntity","sqlCommentByAddingTags","scope","isRootMutation","fieldWithHooks","procedure","filter","proc","isStable","namespace","reduce","memo","fieldName","functionMutationName","isMutation","name","e"],"mappings":";;;;;;kBAGgB,SAASA,0BAAT,CAAoCC,OAApC,EAA6C;AAC3DA,UAAQC,IAAR,CAAa,0BAAb,EAAyC,CAACC,MAAD,EAASC,KAAT,EAAgBC,OAAhB,KAA4B;AACnE,UAAM;AACJC,YADI;AAEJC,oCAA8BC,0BAF1B;AAGJC,gBAHI;AAIJC,uBAAiBC,aAJb;AAKJC,cAAQC,IALJ;AAMJC,kBANI;AAOJC,sBAPI;AAQJC;AARI,QASFZ,KATJ;AAUA,UAAM;AACJa,aAAO,EAAEC,cAAF,EADH;AAEJC;AAFI,QAGFd,OAHJ;AAIA,QAAI,CAACa,cAAL,EAAqB;AACnB,aAAOf,MAAP;AACD;AACD,WAAOG,OACLH,MADK,EAELK,2BAA2BY,SAA3B,CACGC,MADH,CACUC,QAAQ,CAACA,KAAKC,QADxB,EAEGF,MAFH,CAEUC,QAAQ,CAAC,CAACA,KAAKE,SAFzB,EAGGH,MAHH,CAGUC,QAAQ,CAACT,KAAKS,IAAL,EAAW,SAAX,CAHnB,EAIGG,MAJH,CAIU,CAACC,IAAD,EAAOJ,IAAP,KAAgB;AACtB;;;;;;;;;;;;;;;AAeA,YAAMK,YAAYlB,WAAWmB,oBAAX,CAAgCN,IAAhC,CAAlB;AACA,UAAI;AACFI,eAAOpB,OACLoB,IADK,EAEL;AACE,WAACC,SAAD,GAAahB,cAAcgB,SAAd,EAAyBL,IAAzB,EAA+BlB,KAA/B,EAAsC;AACjDe,0BADiD;AAEjDU,wBAAY;AAFqC,WAAtC;AADf,SAFK,EAQJ,6BAA4Bd,iBAC3BO,IAD2B,CAE3B,0CAAyCN,uBACzCM,IADyC,EAEzC;AACEQ,gBAAM;AADR,SAFyC,CAKzC,EAfG,CAAP;AAiBD,OAlBD,CAkBE,OAAOC,CAAP,EAAU;AACVjB,qBAAaiB,CAAb;AACD;AACD,aAAOL,IAAP;AACD,KA3CH,EA2CK,EA3CL,CAFK,EA8CJ,kDA9CI,CAAP;AAgDD,GAlED;AAmED,C","file":"PgMutationProceduresPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgMutationProceduresPlugin(builder) {\n  builder.hook(\"GraphQLObjectType:fields\", (fields, build, context) => {\n    const {\n      extend,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      inflection,\n      pgMakeProcField: makeProcField,\n      pgOmit: omit,\n      swallowError,\n      describePgEntity,\n      sqlCommentByAddingTags,\n    } = build;\n    const {\n      scope: { isRootMutation },\n      fieldWithHooks,\n    } = context;\n    if (!isRootMutation) {\n      return fields;\n    }\n    return extend(\n      fields,\n      introspectionResultsByKind.procedure\n        .filter(proc => !proc.isStable)\n        .filter(proc => !!proc.namespace)\n        .filter(proc => !omit(proc, \"execute\"))\n        .reduce((memo, proc) => {\n          /*\n            proc =\n              { kind: 'procedure',\n                name: 'integration_webhook_secret',\n                description: null,\n                namespaceId: '6484381',\n                isStrict: false,\n                returnsSet: false,\n                isStable: true,\n                returnTypeId: '2950',\n                argTypeIds: [ '6484569' ],\n                argNames: [ 'integration' ],\n                argDefaultsNum: 0 }\n            */\n\n          const fieldName = inflection.functionMutationName(proc);\n          try {\n            memo = extend(\n              memo,\n              {\n                [fieldName]: makeProcField(fieldName, proc, build, {\n                  fieldWithHooks,\n                  isMutation: true,\n                }),\n              },\n              `Adding mutation field for ${describePgEntity(\n                proc\n              )}. You can rename this field with:\\n\\n  ${sqlCommentByAddingTags(\n                proc,\n                {\n                  name: \"newNameHere\",\n                }\n              )}`\n            );\n          } catch (e) {\n            swallowError(e);\n          }\n          return memo;\n        }, {}),\n      `Adding mutation procedure to root Mutation field`\n    );\n  });\n}: Plugin);\n"]}