{"version":3,"sources":["../../src/plugins/PgNodeAliasPostGraphile.js"],"names":["PgNodeAliasPostGraphile","builder","hook","object","build","context","setNodeAlias","inflection","pluralize","scope","isPgRowType","isPgCompoundType","pgIntrospection","table","name"],"mappings":";;;;;;kBAGgB,eAAeA,uBAAf,CAAuCC,OAAvC,EAAgD;AAC9DA,UAAQC,IAAR,CAAa,mBAAb,EAAkC,CAACC,MAAD,EAASC,KAAT,EAAgBC,OAAhB,KAA4B;AAC5D,UAAM;AACJC,kBADI;AAEJC,kBAAY,EAAEC,SAAF;AAFR,QAGFJ,KAHJ;AAIA,UAAM;AACJK,aAAO,EAAEC,WAAF,EAAeC,gBAAf,EAAiCC,iBAAiBC,KAAlD;AADH,QAEFR,OAFJ;AAGA,QAAIK,eAAeC,gBAAnB,EAAqC;AACnCL,mBAAaH,OAAOW,IAApB,EAA0BN,UAAUK,MAAMC,IAAhB,CAA1B;AACD;AACD,WAAOX,MAAP;AACD,GAZD;AAaD,C","file":"PgNodeAliasPostGraphile.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nexport default (async function PgNodeAliasPostGraphile(builder) {\n  builder.hook(\"GraphQLObjectType\", (object, build, context) => {\n    const {\n      setNodeAlias,\n      inflection: { pluralize },\n    } = build;\n    const {\n      scope: { isPgRowType, isPgCompoundType, pgIntrospection: table },\n    } = context;\n    if (isPgRowType || isPgCompoundType) {\n      setNodeAlias(object.name, pluralize(table.name));\n    }\n    return object;\n  });\n}: Plugin);\n"]}