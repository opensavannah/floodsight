{"version":3,"sources":["../../src/plugins/viaTemporaryTable.js"],"names":["sql","debugSql","viaTemporaryTable","pgClient","sqlTypeIdentifier","sqlMutationQuery","sqlResultSourceAlias","sqlResultQuery","isPgClassLike","performQuery","sqlQuery","text","values","compile","enabled","query","rows","selectionField","result","firstNonNullRow","find","row","firstKey","Object","keys","rawValues","map","filter","rawValue","convertFieldBack","filteredValuesResults","length","value","finalRows","__isNull","shift"],"mappings":";;;;;;AAEA;;IAAYA,G;;AACZ;;;;;;;;AAIA,MAAMC,WAAW,qBAAa,uBAAb,CAAjB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBA8Be,eAAeC,iBAAf,CACbC,QADa,EAEbC,iBAFa,EAGbC,gBAHa,EAIbC,oBAJa,EAKbC,cALa,EAMbC,gBAAyB,IANZ,EAOb;AACA,iBAAeC,YAAf,CAA4BN,QAA5B,EAA8CO,QAA9C,EAAkE;AAChE;AACA,UAAM,EAAEC,IAAF,EAAQC,MAAR,KAAmBZ,IAAIa,OAAJ,CAAYH,QAAZ,CAAzB;AACA,QAAIT,SAASa,OAAb,EAAsBb,SAASU,IAAT;AACtB,WAAOR,SAASY,KAAT,CAAeJ,IAAf,EAAqBC,MAArB,CAAP;AACD;;AAED,MAAI,CAACR,iBAAL,EAAwB;AACtB;AACA,UAAM,EAAEY,IAAF,KAAW,MAAMP,aACrBN,QADqB,EAErBH,IAAIe,KAAM;aACHT,oBAAqB;UACxBD,gBAAiB;UACjBE,cAAe,EALE,CAAvB;AAOA,WAAOS,IAAP;AACD,GAVD,MAUO;AACL;;;;;;;;;;;AAWA,UAAMC,iBAAiBT,gBACnB;;;;;;;AAOAR,QAAIe,KAAM,cAAaT,oBAAqB,2BAA0BA,oBAAqB,OARxE,GASnBN,IAAIe,KAAM,IAAGT,oBAAqB,IAAGA,oBAAqB,MAAKF,iBAAkB,EATrF;AAUA,UAAMc,SAAS,MAAMT,aACnBN,QADmB,EAEnBH,IAAIe,KAAM;aACHT,oBAAqB;UACxBD,gBAAiB;;gBAEXY,cAAe,gBAAeX,oBAAqB,EAN1C,CAArB;AAQA,UAAM,EAAEU,IAAF,KAAWE,MAAjB;AACA,UAAMC,kBAAkBH,KAAKI,IAAL,CAAUC,OAAOA,QAAQ,IAAzB,CAAxB;AACA;AACA;AACA;AACA,UAAMC,WAAWH,mBAAmBI,OAAOC,IAAP,CAAYL,eAAZ,EAA6B,CAA7B,CAApC;AACA,UAAMM,YAAYT,KAAKU,GAAL,CAASL,OAAOA,OAAOA,IAAIC,QAAJ,CAAvB,CAAlB;AACA,UAAMV,SAASa,UAAUE,MAAV,CAAiBC,YAAYA,aAAa,IAA1C,CAAf;AACA,UAAMC,mBAAmBrB,gBACrBR,IAAIe,KAAM,SAAQX,iBAAkB,KADf,GAErBJ,IAAIe,KAAM,QAAOX,iBAAkB,OAAME,oBAAqB,EAFlE;AAGA,UAAM,EAAEU,MAAMc,qBAAR,KACJlB,OAAOmB,MAAP,GAAgB,CAAhB,GACI,MAAMtB,aACJN,QADI,EAEJH,IAAIe,KAAM;qBACDT,oBAAqB;yBACjBuB,gBAAiB;+BACX7B,IAAIgC,KAAJ,CAAUpB,MAAV,CAAkB;;gBAEjCL,cAAe;eAPf,CADV,GAWI,EAAES,MAAM,EAAR,EAZN;AAaA,UAAMiB,YAAYR,UAAUC,GAAV,CAChBE;AACE;;;;;;AAMAA,iBAAa,IAAb,GAAoB,EAAEM,UAAU,IAAZ,EAApB,GAAyCJ,sBAAsBK,KAAtB,EAR3B,CAAlB;AAUA,WAAOF,SAAP;AACD;AACF,C","file":"viaTemporaryTable.js","sourcesContent":["// @flow\n\nimport * as sql from \"pg-sql2\";\nimport debugFactory from \"debug\";\nimport type { Client } from \"pg\";\nimport type { SQL, SQLQuery } from \"pg-sql2\";\n\nconst debugSql = debugFactory(\"graphile-build-pg:sql\");\n\n/*\n * Originally we tried this with a CTE, but:\n *\n * > The sub-statements in WITH are executed concurrently with each other and\n * > with the main query. Therefore, when using data-modifying statements in\n * > WITH, the order in which the specified updates actually happen is\n * > unpredictable. All the statements are executed with the same snapshot (see\n * > Chapter 13), so they cannot \"see\" one another's effects on the target\n * > tables. This alleviates the effects of the unpredictability of the actual\n * > order of row updates, and means that RETURNING data is the only way to\n * > communicate changes between different WITH sub-statements and the main\n * > query.\n *\n * -- https://www.postgresql.org/docs/9.6/static/queries-with.html\n *\n * This caused issues with computed columns that themselves went off and\n * performed selects - because the data within those selects used the old\n * snapshot and thus returned stale data.\n *\n * To solve this, we tried using temporary tables to ensure the mutation and\n * the select execute in different statments. This worked, but temporary tables\n * require elevated priviliges and thus don't work everywhere. We needed a more\n * generic solution.\n *\n * In the end we settled for sending the data we received from the mutations\n * straight back into the PostgreSQL server. It's a bit wasteful but it works.\n *\n * If you can come up with a better solution please open a pull request!\n */\n\nexport default async function viaTemporaryTable(\n  pgClient: Client,\n  sqlTypeIdentifier: ?SQL,\n  sqlMutationQuery: SQL,\n  sqlResultSourceAlias: SQL,\n  sqlResultQuery: SQL,\n  isPgClassLike: boolean = true\n) {\n  async function performQuery(pgClient: Client, sqlQuery: SQLQuery) {\n    // TODO: look into rowMode = 'array'\n    const { text, values } = sql.compile(sqlQuery);\n    if (debugSql.enabled) debugSql(text);\n    return pgClient.query(text, values);\n  }\n\n  if (!sqlTypeIdentifier) {\n    // It returns void, just perform the query!\n    const { rows } = await performQuery(\n      pgClient,\n      sql.query`\n      with ${sqlResultSourceAlias} as (\n        ${sqlMutationQuery}\n      ) ${sqlResultQuery}`\n    );\n    return rows;\n  } else {\n    /*\n     * In this code we're converting the rows to a string representation within\n     * PostgreSQL itself, then we can send it back into PostgreSQL and have it\n     * re-interpret the results cleanly (using it's own serializer/parser\n     * combination) so we should be fairly confident that it will work\n     * correctly every time assuming none of the PostgreSQL types are broken.\n     *\n     * If you have a way to improve this, I'd love to see a PR - but please\n     * make sure that the integration tests pass with your solution first as\n     * there are a log of potential pitfalls!\n     */\n    const selectionField = isPgClassLike\n      ? /*\n         * This `when foo is null then null` check might *seem* redundant, but it\n         * is not - e.g. the compound type `(,,,,,,,)::my_type` and\n         * `null::my_type` differ; however the former also returns true to `foo\n         * is null`. We use this check to coalesce both into the canonical `null`\n         * representation to make it easier to deal with below.\n         */\n        sql.query`(case when ${sqlResultSourceAlias} is null then null else ${sqlResultSourceAlias} end)`\n      : sql.query`(${sqlResultSourceAlias}.${sqlResultSourceAlias})::${sqlTypeIdentifier}`;\n    const result = await performQuery(\n      pgClient,\n      sql.query`\n      with ${sqlResultSourceAlias} as (\n        ${sqlMutationQuery}\n      )\n      select (${selectionField})::text from ${sqlResultSourceAlias}`\n    );\n    const { rows } = result;\n    const firstNonNullRow = rows.find(row => row !== null);\n    // TODO: we should be able to have `pg` not interpret the results as\n    // objects and instead just return them as arrays - then we can just do\n    // `row[0]`. PR welcome!\n    const firstKey = firstNonNullRow && Object.keys(firstNonNullRow)[0];\n    const rawValues = rows.map(row => row && row[firstKey]);\n    const values = rawValues.filter(rawValue => rawValue !== null);\n    const convertFieldBack = isPgClassLike\n      ? sql.query`(str::${sqlTypeIdentifier}).*`\n      : sql.query`str::${sqlTypeIdentifier} as ${sqlResultSourceAlias}`;\n    const { rows: filteredValuesResults } =\n      values.length > 0\n        ? await performQuery(\n            pgClient,\n            sql.query`\\\n              with ${sqlResultSourceAlias} as (\n                select ${convertFieldBack}\n                from unnest((${sql.value(values)})::text[]) str\n              )\n              ${sqlResultQuery}\n              `\n          )\n        : { rows: [] };\n    const finalRows = rawValues.map(\n      rawValue =>\n        /*\n         * We can't simply return 'null' here because this is expected to have\n         * come from PG, and that would never return 'null' for a row - only\n         * the fields within said row. Using `__isNull` here is a simple\n         * workaround to this, that's caught by `pg2gql`.\n         */\n        rawValue === null ? { __isNull: true } : filteredValuesResults.shift()\n    );\n    return finalRows;\n  }\n}\n"]}