{"version":3,"sources":["../../src/plugins/PgAllRows.js"],"names":["debugSql","PgAllRows","builder","pgViewUniqueKey","pgSimpleCollections","hasConnections","hasSimpleCollections","hook","fields","build","context","parseResolveInfo","extend","getTypeByName","pgGetGqlTypeByTypeIdAndModifier","pgSql","sql","pgIntrospectionResultsByKind","introspectionResultsByKind","inflection","graphql","GraphQLList","GraphQLNonNull","pgQueryFromResolveData","queryFromResolveData","pgAddStartEndCursor","addStartEndCursor","pgOmit","omit","fieldWithHooks","scope","isRootQuery","class","filter","table","isSelectable","namespace","reduce","memo","TableType","type","id","tableTypeName","name","ConnectionType","connection","Error","attributes","attribute","attr","classId","primaryKeyConstraint","constraint","con","primaryKeys","keyAttributeNums","map","num","isView","t","classKind","viewUniqueKey","tags","uniqueKey","uniqueIdAttribute","find","undefined","schema","sqlFullTableName","identifier","makeField","isConnection","fieldName","allRows","allRowsSimple","getDataFromParsedResolveInfoFragment","description","args","resolve","parent","pgClient","resolveInfo","parsedResolveInfoFragment","resolveData","returnType","query","withPaginationAsFields","queryBuilder","beforeLock","isOrderUnique","data","cursorPrefix","forEach","key","orderBy","fragment","getTableAlias","setOrderIsUnique","text","values","compile","enabled","result","rows","row","isPgFieldConnection","isPgFieldSimpleCollection","pgFieldIntrospection"],"mappings":"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","file":"PgAllRows.js","sourcesContent":["// @flow\nimport debugFactory from \"debug\";\n\nimport type { Plugin } from \"graphile-build\";\n\nconst debugSql = debugFactory(\"graphile-build-pg:sql\");\n\nexport default (async function PgAllRows(\n  builder,\n  { pgViewUniqueKey, pgSimpleCollections }\n) {\n  const hasConnections = pgSimpleCollections !== \"only\";\n  const hasSimpleCollections =\n    pgSimpleCollections === \"only\" || pgSimpleCollections === \"both\";\n  builder.hook(\"GraphQLObjectType:fields\", (fields, build, context) => {\n    const {\n      parseResolveInfo,\n      extend,\n      getTypeByName,\n      pgGetGqlTypeByTypeIdAndModifier,\n      pgSql: sql,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      inflection,\n      graphql: { GraphQLList, GraphQLNonNull },\n      pgQueryFromResolveData: queryFromResolveData,\n      pgAddStartEndCursor: addStartEndCursor,\n      pgOmit: omit,\n    } = build;\n    const {\n      fieldWithHooks,\n      scope: { isRootQuery },\n    } = context;\n    if (!isRootQuery) {\n      return fields;\n    }\n    return extend(\n      fields,\n      introspectionResultsByKind.class\n        .filter(table => table.isSelectable)\n        .filter(table => table.namespace)\n        .filter(table => !omit(table, \"all\"))\n        .reduce((memo, table) => {\n          const TableType = pgGetGqlTypeByTypeIdAndModifier(\n            table.type.id,\n            null\n          );\n          if (!TableType) {\n            return memo;\n          }\n          const tableTypeName = TableType.name;\n          const ConnectionType = getTypeByName(\n            inflection.connection(TableType.name)\n          );\n          if (!TableType) {\n            throw new Error(\n              `Could not find GraphQL type for table '${table.name}'`\n            );\n          }\n          const attributes = introspectionResultsByKind.attribute.filter(\n            attr => attr.classId === table.id\n          );\n          const primaryKeyConstraint = introspectionResultsByKind.constraint\n            .filter(con => con.classId === table.id)\n            .filter(con => con.type === \"p\")[0];\n          const primaryKeys =\n            primaryKeyConstraint &&\n            primaryKeyConstraint.keyAttributeNums.map(\n              num => attributes.filter(attr => attr.num === num)[0]\n            );\n          const isView = t => t.classKind === \"v\";\n          const viewUniqueKey = table.tags.uniqueKey || pgViewUniqueKey;\n          const uniqueIdAttribute = viewUniqueKey\n            ? attributes.find(attr => attr.name === viewUniqueKey)\n            : undefined;\n          if (!ConnectionType) {\n            throw new Error(\n              `Could not find GraphQL connection type for table '${table.name}'`\n            );\n          }\n          const schema = table.namespace;\n          const sqlFullTableName = sql.identifier(schema.name, table.name);\n          function makeField(isConnection) {\n            const fieldName = isConnection\n              ? inflection.allRows(table)\n              : inflection.allRowsSimple(table);\n            memo[fieldName] = fieldWithHooks(\n              fieldName,\n              ({ getDataFromParsedResolveInfoFragment }) => {\n                return {\n                  description: isConnection\n                    ? `Reads and enables pagination through a set of \\`${tableTypeName}\\`.`\n                    : `Reads a set of \\`${tableTypeName}\\`.`,\n                  type: isConnection\n                    ? ConnectionType\n                    : new GraphQLList(new GraphQLNonNull(TableType)),\n                  args: {},\n                  async resolve(parent, args, { pgClient }, resolveInfo) {\n                    const parsedResolveInfoFragment = parseResolveInfo(\n                      resolveInfo\n                    );\n                    const resolveData = getDataFromParsedResolveInfoFragment(\n                      parsedResolveInfoFragment,\n                      resolveInfo.returnType\n                    );\n                    const query = queryFromResolveData(\n                      sqlFullTableName,\n                      undefined,\n                      resolveData,\n                      {\n                        withPaginationAsFields: isConnection,\n                      },\n                      queryBuilder => {\n                        if (primaryKeys) {\n                          queryBuilder.beforeLock(\"orderBy\", () => {\n                            if (!queryBuilder.isOrderUnique(false)) {\n                              // Order by PK if no order specified\n                              queryBuilder.data.cursorPrefix = [\n                                \"primary_key_asc\",\n                              ];\n                              primaryKeys.forEach(key => {\n                                queryBuilder.orderBy(\n                                  sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                                    key.name\n                                  )}`,\n                                  true\n                                );\n                              });\n                              queryBuilder.setOrderIsUnique();\n                            }\n                          });\n                        } else if (isView(table) && !!uniqueIdAttribute) {\n                          queryBuilder.beforeLock(\"orderBy\", () => {\n                            if (!queryBuilder.isOrderUnique(false)) {\n                              queryBuilder.data.cursorPrefix = [\n                                \"view_unique_key_asc\",\n                              ];\n                              queryBuilder.orderBy(\n                                sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                                  uniqueIdAttribute.name\n                                )}`,\n                                true\n                              );\n                              queryBuilder.setOrderIsUnique();\n                            }\n                          });\n                        }\n                      }\n                    );\n                    const { text, values } = sql.compile(query);\n                    if (debugSql.enabled) debugSql(text);\n                    const result = await pgClient.query(text, values);\n                    if (isConnection) {\n                      const {\n                        rows: [row],\n                      } = result;\n                      return addStartEndCursor(row);\n                    } else {\n                      return result.rows;\n                    }\n                  },\n                };\n              },\n              {\n                isPgFieldConnection: isConnection,\n                isPgFieldSimpleCollection: !isConnection,\n                pgFieldIntrospection: table,\n              }\n            );\n          }\n          if (TableType && ConnectionType && hasConnections) {\n            makeField(true);\n          }\n          if (TableType && hasSimpleCollections) {\n            makeField(false);\n          }\n          return memo;\n        }, {}),\n      `Adding 'all*' relations to root Query`\n    );\n  });\n}: Plugin);\n"]}