{"version":3,"sources":["../../src/plugins/PgBasicsPlugin.js"],"names":["preventEmptyResult","sql","defaultPgColumnFilter","_attr","_build","_context","identity","_","obj","Object","keys","reduce","memo","key","fn","args","result","apply","length","stringifiedArgs","require","inspect","Error","String","omitWithRBACChecks","entity","permission","ORDINARY_TABLE","VIEW","MATERIALIZED_VIEW","isTableLike","kind","classKind","EXECUTE","aclExecutable","tableEntity","READ","ALL","MANY","aclSelectable","attributes","some","attr","CREATE","aclInsertable","UPDATE","aclUpdatable","DELETE","aclDeletable","class","attributeEntity","klass","FILTER","ORDER","describePgEntity","includeAlias","getAlias","tags","value","endsWith","chalk","bold","map","t","join","name","c","f","p","r","v","m","namespaceName","e","console","error","oid","PgBasicsPlugin","builder","pgStrictFunctions","pgColumnFilter","pgIgnoreRBAC","pgOmit","omit","hook","build","extend","graphileBuildPgVersion","version","pgSql","pgQueryFromResolveData","queryFromResolveData","pgAddStartEndCursor","addStartEndCursor","pgMakeProcField","makeProcField","pgParseIdentifier","parseIdentifier","pgViaTemporaryTable","viaTemporaryTable","sqlCommentByAddingTags","tagsToAdd","escape","str","replace","chr","assign","description","tagsSql","tag","tagValue","valueArray","Array","isArray","highlightOrNot","forEach","push","commentValue","sqlThing","identifier","inflection","conditionType","typeName","upperCamelCase","inputType","rangeBoundType","rangeType","patchType","baseInputType","patchField","itemName","camelCase","orderByType","pluralize","edge","connection","_functionName","proc","_typeName","type","_tableName","table","_singularizedTableName","singularize","_columnName","_options","enumType","argument","index","orderByColumnEnum","ascending","columnName","skipRowId","constantCase","domainType","enumName","inValue","$","tableNode","tableFieldName","allRows","allRowsSimple","functionMutationName","functionQueryName","functionQueryNameList","functionPayloadType","functionInputType","tableType","column","computedColumn","pseudoColumnName","_table","fieldName","computedColumnList","singleRelationByKeys","detailedKeys","_foreignTable","constraint","singleRelationByKeysBackwards","foreignSingleFieldName","foreignFieldName","manyRelationByKeys","manyRelationByKeysSimple","foreignSimpleFieldName","rowByUniqueKeys","updateByKeys","updateFieldName","deleteByKeys","deleteFieldName","updateByKeysInputType","deleteByKeysInputType","updateNode","deleteNode","updateNodeInputType","deleteNodeInputType","edgeField","scalarFunctionConnection","scalarFunctionEdge","createField","createInputType","createPayloadType","updatePayloadType","deletePayloadType"],"mappings":";;;;;QAwCgBA,kB,GAAAA,kB;;AAvChB;;IAAYC,G;;AAEZ;;AASA;;;;AACA;;;;AACA;;;;AAWA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,MAAMC,wBAAwB,CAACC,KAAD,EAAQC,MAAR,EAAgBC,QAAhB,KAA6B,IAA3D;;;AAOA,MAAMC,WAAWC,KAAKA,CAAtB;;AAEO,SAASP,kBAAT,CAGLQ,GAHK,EAG4B;AACjC,SAAOC,OAAOC,IAAP,CAAYF,GAAZ,EAAiBG,MAAjB,CAAwB,CAACC,IAAD,EAAOC,GAAP,KAAe;AAC5C,UAAMC,KAAKN,IAAIK,GAAJ,CAAX;AACAD,SAAKC,GAAL,IAAY,UAAS,GAAGE,IAAZ,EAAkB;AAC5B,YAAMC,SAASF,GAAGG,KAAH,CAAS,IAAT,EAAeF,IAAf,CAAf;AACA,UAAI,OAAOC,MAAP,KAAkB,QAAlB,IAA8BA,OAAOE,MAAP,KAAkB,CAApD,EAAuD;AACrD,cAAMC,kBAAkBC,QAAQ,MAAR,EAAgBC,OAAhB,CAAwBN,IAAxB,CAAxB;AACA,cAAM,IAAIO,KAAJ,CACH,kBAAiBT,GAAI,eAAcU,OAClCP,MADkC,CAElC,gCAFF,GAGG,wHAHH,GAIG,uBAAsBH,GAAI,MAAKM,eAAgB,EAL9C,CAAN;AAOD;AACD,aAAOH,MAAP;AACD,KAbD;AAcA,WAAOJ,IAAP;AACD,GAjBM,EAiBJ,EAjBI,CAAP;AAkBD;;AAED,SAASY,kBAAT,CACEC,MADF,EAEEC,UAFF,EAGE;AACA,QAAMC,iBAAiB,GAAvB;AACA,QAAMC,OAAO,GAAb;AACA,QAAMC,oBAAoB,GAA1B;AACA,QAAMC,cAAcL,UAClBA,UACAA,OAAOM,IAAP,KAAgB,OADhB,KAECN,OAAOO,SAAP,KAAqBL,cAArB,IACCF,OAAOO,SAAP,KAAqBJ,IADtB,IAECH,OAAOO,SAAP,KAAqBH,iBAJvB,CADF;AAMA,MAAIJ,OAAOM,IAAP,KAAgB,WAApB,EAAiC;AAC/B,QAAIL,eAAeO,aAAf,IAA0B,CAACR,OAAOS,aAAtC,EAAqD;AACnD,aAAO,IAAP;AACD;AACF,GAJD,MAIO,IAAIT,OAAOM,IAAP,KAAgB,OAAhB,IAA2BD,YAAYL,MAAZ,CAA/B,EAAoD;AACzD,UAAMU,cAAuBV,MAA7B;AACA,QACE,CAACC,eAAeU,UAAf,IAAuBV,eAAeW,SAAtC,IAA6CX,eAAeY,UAA7D,KACC,CAACH,YAAYI,aAAb,IACC,CAACJ,YAAYK,UAAZ,CAAuBC,IAAvB,CAA4BC,QAAQA,KAAKH,aAAzC,CAHL,EAIE;AACA,aAAO,IAAP;AACD,KAND,MAMO,IACLb,eAAeiB,YAAf,IACC,CAACR,YAAYS,aAAb,IACC,CAACT,YAAYK,UAAZ,CAAuBC,IAAvB,CAA4BC,QAAQA,KAAKE,aAAzC,CAHE,EAIL;AACA,aAAO,IAAP;AACD,KANM,MAMA,IACLlB,eAAemB,YAAf,IACC,CAACV,YAAYW,YAAb,IACC,CAACX,YAAYK,UAAZ,CAAuBC,IAAvB,CAA4BC,QAAQA,KAAKI,YAAzC,CAHE,EAIL;AACA,aAAO,IAAP;AACD,KANM,MAMA,IAAIpB,eAAeqB,YAAf,IAAyB,CAACZ,YAAYa,YAA1C,EAAwD;AAC7D,aAAO,IAAP;AACD;AACF,GAvBM,MAuBA,IAAIvB,OAAOM,IAAP,KAAgB,WAAhB,IAA+BD,YAAYL,OAAOwB,KAAnB,CAAnC,EAA8D;AACnE,UAAMC,kBAA+BzB,MAArC;;AAEA,UAAM0B,QAAQD,gBAAgBD,KAA9B;AACA;AACA,QACEE,MAAMZ,aAAN,IACAY,MAAMX,UAAN,CAAiBC,IAAjB,CAAsBC,QAAQA,KAAKH,aAAnC,CAFF,EAGE;AACA;AACA,UACE,CAACb,eAAeU,UAAf,IACCV,eAAe0B,YADhB,IAEC1B,eAAe2B,WAFjB,KAGA,CAACH,gBAAgBX,aAJnB,EAKE;AACA,eAAO,IAAP;AACD,OAPD,MAOO,IAAIb,eAAeiB,YAAf,IAAyB,CAACO,gBAAgBN,aAA9C,EAA6D;AAClE,eAAO,IAAP;AACD,OAFM,MAEA,IAAIlB,eAAemB,YAAf,IAAyB,CAACK,gBAAgBJ,YAA9C,EAA4D;AACjE,eAAO,IAAP;AACD;AACF,KAjBD,MAiBO;AACL;AACA;AACA;AACA;AACD;AACF;AACD,SAAO,oBAAKrB,MAAL,EAAaC,UAAb,CAAP;AACD;;AAED,SAAS4B,gBAAT,CAA0B7B,MAA1B,EAAkC8B,eAAe,IAAjD,EAAuD;AACrD,QAAMC,WAAW,CAACD,YAAD,GACb,MAAM,EADO,GAEb,MAAM;AACJ,UAAME,OAAO,sBACXhC,OAAOgC,IADI,EAEX,CAACC,KAAD,EAAQ7C,GAAR,KAAgBA,QAAQ,MAAR,IAAkBA,IAAI8C,QAAJ,CAAa,MAAb,CAFvB,CAAb;AAIA,QAAIlD,OAAOC,IAAP,CAAY+C,IAAZ,EAAkBvC,MAAtB,EAA8B;AAC5B,aAAQ,0BAAyB0C,gBAAMC,IAAN,CAC/BpD,OAAOC,IAAP,CAAY+C,IAAZ,EACGK,GADH,CACOC,KAAM,IAAGA,CAAE,IAAGN,KAAKM,CAAL,CAAQ,EAD7B,EAEGC,IAFH,CAEQ,KAFR,CAD+B,CAI/B,GAJF;AAKD;AACD,WAAO,EAAP;AACD,GAfL;;AAiBA,MAAI;AACF,QAAIvC,OAAOM,IAAP,KAAgB,YAApB,EAAkC;AAChC,aAAQ,cAAa6B,gBAAMC,IAAN,CAClB,IAAGpC,OAAOwC,IAAK,GADG,CAEnB,OAAMX,iBAAiB7B,OAAOwB,KAAxB,EAA+B,KAA/B,CAAsC,GAAEO,UAAW,EAF3D;AAGD,KAJD,MAIO,IAAI/B,OAAOM,IAAP,KAAgB,OAApB,EAA6B;AAClC;AACA,YAAMA,OACJ;AACEmC,WAAG,gBADL;AAEEC,WAAG,eAFL;AAGEC,WAAG,mBAHL;AAIEC,WAAG,OAJL;AAKEC,WAAG,MALL;AAMEC,WAAG;AANL,QAOE9C,OAAOO,SAPT,KAOuB,YARzB;AASA,aAAQ,GAAED,IAAK,IAAG6B,gBAAMC,IAAN,CACf,IAAGpC,OAAO+C,aAAc,MAAK/C,OAAOwC,IAAK,GAD1B,CAEhB,GAAET,UAAW,EAFf;AAGD,KAdM,MAcA,IAAI/B,OAAOM,IAAP,KAAgB,WAApB,EAAiC;AACtC,aAAQ,YAAW6B,gBAAMC,IAAN,CAChB,IAAGpC,OAAO+C,aAAc,MAAK/C,OAAOwC,IAAK,eADzB,CAEjB,GAAET,UAAW,EAFf;AAGD,KAJM,MAIA,IAAI/B,OAAOM,IAAP,KAAgB,WAApB,EAAiC;AACtC,aAAQ,UAAS6B,gBAAMC,IAAN,CAAY,IAAGpC,OAAOwC,IAAK,GAA3B,CAA+B,OAAMX,iBACpD7B,OAAOwB,KAD6C,EAEpD,KAFoD,CAGpD,GAAEO,UAAW,EAHf;AAID;AACF,GA7BD,CA6BE,OAAOiB,CAAP,EAAU;AACV;AACAC,YAAQC,KAAR,CAAc,kDAAd,EAAkElD,MAAlE;AACA;AACAiD,YAAQC,KAAR,CAAcF,CAAd;AACD;AACD,SAAQ,mBAAkBhD,OAAOM,IAAK,eAAcN,OAAOmD,GAAI,GAA/D;AACD;;kBAEe,SAASC,cAAT,CACdC,OADc,EAEd;AACEC,sBAAoB,KADtB;AAEEC,mBAAiB9E,qBAFnB;AAGE+E,iBAAe;AAHjB,CAFc,EAOd;AACA,QAAMC,SAASD,eAAeE,cAAf,GAAsB3D,kBAArC;AACAsD,UAAQM,IAAR,CAAa,OAAb,EAAsBC,SAAS;AAC7B,WAAOA,MAAMC,MAAN,CAAaD,KAAb,EAAoB;AACzBE,8BAAwBC,gBADC;AAEzBC,aAAOxF,GAFkB;AAGzB8E,uBAHyB;AAIzBC,oBAJyB;AAKzBU,8BAAwBC,8BALC;AAMzBC,2BAAqBC,2BANI;AAOzBX,YAPyB;AAQzBY,uBAAiBC,uBARQ;AASzBC,yBAAmBC,yBATM;AAUzBC,2BAAqBC,2BAVI;AAWzB7C,sBAXyB;AAYzB8C,8BAAwB,CAAC3E,MAAD,EAAS4E,SAAT,KAAuB;AAC7C;AACA;AACA;;AAEA;AACA,cAAMC,SAASC,OACbA,IAAIC,OAAJ,CACE,kBADF,EAEEC,OACG;AACC,gBAAM,KADP;AAEC,gBAAM,KAFP;AAGC,gBAAM,KAHP;AAIC,gBAAM,KAJP;AAKC,gBAAM;AALP,WAMCA,GAND,KAMS,OAAOA,GATrB,CADF;;AAaA;AACA,cAAMhD,OAAOhD,OAAOiG,MAAP,CAAc,EAAd,EAAkBL,SAAlB,EAA6B5E,OAAOgC,IAApC,EAA0C4C,SAA1C,CAAb;;AAEA,cAAMM,cAAclF,OAAOkF,WAA3B;AACA,cAAMC,UAAUnG,OAAOC,IAAP,CAAY+C,IAAZ,EACb9C,MADa,CACN,CAACC,IAAD,EAAOiG,GAAP,KAAe;AACrB,gBAAMC,WAAWrD,KAAKoD,GAAL,CAAjB;AACA,gBAAME,aAAaC,MAAMC,OAAN,CAAcH,QAAd,IAA0BA,QAA1B,GAAqC,CAACA,QAAD,CAAxD;AACA,gBAAMI,iBAAiBL,OAAOR,SAAP,GAAmBzC,gBAAMC,IAAzB,GAAgCvD,QAAvD;AACAyG,qBAAWI,OAAX,CAAmBzD,SAAS;AAC1B9C,iBAAKwG,IAAL,CACEF,eACG,IAAGZ,OAAOA,OAAOO,GAAP,CAAP,CAAoB,GACtBnD,UAAU,IAAV,GAAiB,EAAjB,GAAsB,MAAM4C,OAAOA,OAAO5C,KAAP,CAAP,CAC7B,EAHH,CADF;AAOD,WARD;AASA,iBAAO9C,IAAP;AACD,SAfa,EAeX,EAfW,EAgBboD,IAhBa,CAgBR,KAhBQ,CAAhB;AAiBA,cAAMqD,eAAgB,KAAIT,OAAQ,GAChCD,cAAc,QAAQL,OAAOK,WAAP,CAAtB,GAA4C,EAC7C,GAFD;AAGA,YAAIW,QAAJ;AACA,YAAI7F,OAAOM,IAAP,KAAgB,OAApB,EAA6B;AAC3B,gBAAMwF,aAAc,IAAG9F,OAAO+C,aAAc,MAAK/C,OAAOwC,IAAK,GAA7D;AACA,cAAIxC,OAAOO,SAAP,KAAqB,GAAzB,EAA8B;AAC5BsF,uBAAY,SAAQC,UAAW,EAA/B;AACD,WAFD,MAEO,IAAI9F,OAAOO,SAAP,KAAqB,GAAzB,EAA8B;AACnCsF,uBAAY,QAAOC,UAAW,EAA9B;AACD,WAFM,MAEA,IAAI9F,OAAOO,SAAP,KAAqB,GAAzB,EAA8B;AACnCsF,uBAAY,qBAAoBC,UAAW,EAA3C;AACD,WAFM,MAEA;AACLD,uBAAY,0CAAyCC,UAAW,EAAhE;AACD;AACF,SAXD,MAWO,IAAI9F,OAAOM,IAAP,KAAgB,WAApB,EAAiC;AACtCuF,qBAAY,WAAU7F,OAAOwB,KAAP,CAAauB,aAAc,MAC/C/C,OAAOwB,KAAP,CAAagB,IACd,MAAKxC,OAAOwC,IAAK,GAFlB;AAGD,SAJM,MAIA,IAAIxC,OAAOM,IAAP,KAAgB,WAApB,EAAiC;AACtCuF,qBAAY,aAAY7F,OAAO+C,aAAc,MAC3C/C,OAAOwC,IACR,4BAFD;AAGD,SAJM,MAIA,IAAIxC,OAAOM,IAAP,KAAgB,YAApB,EAAkC;AACvC;AACAuF,qBAAY,eAAc7F,OAAOwC,IAAK,SACpCxC,OAAOwB,KAAP,CAAauB,aACd,MAAK/C,OAAOwB,KAAP,CAAagB,IAAK,GAFxB;AAGD,SALM,MAKA;AACLqD,qBAAY,2CAAZ;AACD;;AAED,eAAQ,cAAaA,QAAS,OAAMD,YAAa,GAAjD;AACD;AArFwB,KAApB,CAAP;AAuFD,GAxFD;;AA0FAvC,UAAQM,IAAR,CAAa,YAAb,EAA2B,CAACoC,UAAD,EAAanC,KAAb,KAAuB;AAChD,WAAOA,MAAMC,MAAN,CACLkC,UADK,EAELxH,mBAAmB;AACjB;AACAyH,oBAAcC,QAAd,EAAgC;AAC9B,eAAO,KAAKC,cAAL,CAAqB,GAAED,QAAS,YAAhC,CAAP;AACD,OAJgB;AAKjBE,gBAAUF,QAAV,EAA4B;AAC1B,eAAO,KAAKC,cAAL,CAAqB,GAAED,QAAS,QAAhC,CAAP;AACD,OAPgB;AAQjBG,qBAAeH,QAAf,EAAiC;AAC/B,eAAO,KAAKC,cAAL,CAAqB,GAAED,QAAS,cAAhC,CAAP;AACD,OAVgB;AAWjBI,gBAAUJ,QAAV,EAA4B;AAC1B,eAAO,KAAKC,cAAL,CAAqB,GAAED,QAAS,QAAhC,CAAP;AACD,OAbgB;AAcjBK,gBAAUL,QAAV,EAA4B;AAC1B,eAAO,KAAKC,cAAL,CAAqB,GAAED,QAAS,QAAhC,CAAP;AACD,OAhBgB;AAiBjBM,oBAAcN,QAAd,EAAgC;AAC9B,eAAO,KAAKC,cAAL,CAAqB,GAAED,QAAS,aAAhC,CAAP;AACD,OAnBgB;AAoBjBO,iBAAWC,QAAX,EAA6B;AAC3B,eAAO,KAAKC,SAAL,CAAgB,GAAED,QAAS,QAA3B,CAAP;AACD,OAtBgB;AAuBjBE,kBAAYV,QAAZ,EAA8B;AAC5B,eAAO,KAAKC,cAAL,CAAqB,GAAE,KAAKU,SAAL,CAAeX,QAAf,CAAyB,WAAhD,CAAP;AACD,OAzBgB;AA0BjBY,WAAKZ,QAAL,EAAuB;AACrB,eAAO,KAAKC,cAAL,CAAqB,GAAE,KAAKU,SAAL,CAAeX,QAAf,CAAyB,OAAhD,CAAP;AACD,OA5BgB;AA6BjBa,iBAAWb,QAAX,EAA6B;AAC3B,eAAO,KAAKC,cAAL,CAAqB,GAAE,KAAKU,SAAL,CAAeX,QAAf,CAAyB,aAAhD,CAAP;AACD,OA/BgB;;AAiCjB;AACA;AACA;AACA;AACA;AACA;AACAc,oBAAcC,IAAd,EAA4B;AAC1B,eAAOA,KAAKhF,IAAL,CAAUQ,IAAV,IAAkBwE,KAAKxE,IAA9B;AACD,OAzCgB;AA0CjByE,gBAAUC,IAAV,EAAwB;AACtB;AACA,eAAOA,KAAKlF,IAAL,CAAUQ,IAAV,IAAkB0E,KAAK1E,IAA9B;AACD,OA7CgB;AA8CjB2E,iBAAWC,KAAX,EAA2B;AACzB,eAAOA,MAAMpF,IAAN,CAAWQ,IAAX,IAAmB4E,MAAMF,IAAN,CAAWlF,IAAX,CAAgBQ,IAAnC,IAA2C4E,MAAM5E,IAAxD;AACD,OAhDgB;AAiDjB6E,6BAAuBD,KAAvB,EAA+C;AAC7C,eAAO,KAAKE,WAAL,CAAiB,KAAKH,UAAL,CAAgBC,KAAhB,CAAjB,EAAyCrC,OAAzC,CACL,uCADK,EAEL,WAFK,CAAP;AAID,OAtDgB;AAuDjBwC,kBAAYtG,IAAZ,EAA+BuG,QAA/B,EAAmE;AACjE,eAAOvG,KAAKe,IAAL,CAAUQ,IAAV,IAAkBvB,KAAKuB,IAA9B;AACD,OAzDgB;;AA2DjB;AACAiF,eAASP,IAAT,EAAuB;AACrB,eAAO,KAAKhB,cAAL,CAAoB,KAAKe,SAAL,CAAeC,IAAf,CAApB,CAAP;AACD,OA9DgB;AA+DjBQ,eAASlF,IAAT,EAAwBmF,KAAxB,EAAuC;AACrC,eAAO,KAAKjB,SAAL,CAAelE,QAAS,MAAKmF,KAAM,EAAnC,CAAP;AACD,OAjEgB;AAkEjBC,wBAAkB3G,IAAlB,EAAqC4G,SAArC,EAAyD;AACvD,cAAMC,aAAa,KAAKP,WAAL,CAAiBtG,IAAjB,EAAuB;AACxC8G,qBAAW,IAD6B,CACvB;AADuB,SAAvB,CAAnB;AAGA,eAAO,KAAKC,YAAL,CACJ,GAAEF,UAAW,IAAGD,YAAY,KAAZ,GAAoB,MAAO,EADvC,CAAP;AAGD,OAzEgB;AA0EjBI,iBAAWf,IAAX,EAAyB;AACvB,eAAO,KAAKhB,cAAL,CAAoB,KAAKe,SAAL,CAAeC,IAAf,CAApB,CAAP;AACD,OA5EgB;AA6EjBgB,eAASC,OAAT,EAA0B;AACxB,YAAIlG,QAAQkG,OAAZ;;AAEA,YAAIlG,UAAU,EAAd,EAAkB;AAChB,iBAAO,SAAP;AACD;;AAED;AACA;AACA;AACA;AACAA,gBAAQA,MACL8C,OADK,CACG,KADH,EACU,YADV,EAELA,OAFK,CAEG,iBAFH,EAEsB,YAFtB,EAGLA,OAHK,CAGG,kBAHH,EAGuB,YAHvB,CAAR;;AAKA;AACA;AACA;AACA;AACA;AACA9C,gBACE;AACE;AACA,eAAK,cAFP;AAGE,gBAAM,uBAHR;AAIE,eAAK,OAJP;AAKE,gBAAM,WALR;AAME,gBAAM,WANR;AAOE,gBAAM,oBAPR;AAQE,eAAK,WARP;;AAUE;AACA,gBAAM,MAXR;AAYE,iBAAO,OAZT;AAaE,iBAAO,UAbT;AAcE,kBAAQ,WAdV;;AAgBE;AACA;AACA;AACA,eAAK,OAnBP;AAoBE,gBAAM,gBApBR;AAqBE,gBAAM,WArBR;AAsBE,iBAAO,oBAtBT;;AAwBE;AACA;AACA;AACA;AACA,eAAK,SA5BP;AA6BE,eAAK,MA7BP;AA8BE,eAAK,OA9BP;AA+BE,eAAK,OA/BP;AAgCE,gBAAM,WAhCR;AAiCEnD,aAAG,YAjCL;AAkCE,eAAK,OAlCP;AAmCE,eAAK,UAnCP;AAoCEsJ,aAAG,QApCL;AAqCE,eAAK,WArCP;AAsCE,eAAK,IAtCP;AAuCE,eAAK,YAvCP;AAwCE,eAAK,OAxCP;AAyCE,eAAK,UAzCP;AA0CE,eAAK,OA1CP;AA2CE,eAAK,WA3CP;AA4CE,eAAK,mBA5CP;AA6CE,eAAK,eA7CP;AA8CE,eAAK,OA9CP;AA+CE,eAAK,KA/CP;AAgDE,eAAK,OAhDP;AAiDE,eAAK,KAjDP;AAkDE,eAAK,cAlDP;AAmDE,eAAK,eAnDP;AAoDE,eAAK,kBApDP;AAqDE,eAAK,mBArDP;AAsDE,eAAK,YAtDP;AAuDE,eAAK;AAvDP,UAwDEnG,KAxDF,KAwDYA,KAzDd;AA0DA,eAAOA,KAAP;AACD,OA7JgB;;AA+JjBoG,gBAAUjB,KAAV,EAA0B;AACxB,eAAO,KAAKV,SAAL,CAAe,KAAKW,sBAAL,CAA4BD,KAA5B,CAAf,CAAP;AACD,OAjKgB;AAkKjBkB,qBAAelB,KAAf,EAA+B;AAC7B,eAAO,KAAKV,SAAL,CAAe,KAAKW,sBAAL,CAA4BD,KAA5B,CAAf,CAAP;AACD,OApKgB;AAqKjBmB,cAAQnB,KAAR,EAAwB;AACtB,eAAO,KAAKV,SAAL,CACJ,OAAM,KAAKE,SAAL,CAAe,KAAKS,sBAAL,CAA4BD,KAA5B,CAAf,CAAmD,EADrD,CAAP;AAGD,OAzKgB;AA0KjBoB,oBAAcpB,KAAd,EAA8B;AAC5B,eAAO,KAAKV,SAAL,CACJ,OAAM,KAAKE,SAAL,CAAe,KAAKS,sBAAL,CAA4BD,KAA5B,CAAf,CAAmD,OADrD,CAAP;AAGD,OA9KgB;AA+KjBqB,2BAAqBzB,IAArB,EAAmC;AACjC,eAAO,KAAKN,SAAL,CAAe,KAAKK,aAAL,CAAmBC,IAAnB,CAAf,CAAP;AACD,OAjLgB;AAkLjB0B,wBAAkB1B,IAAlB,EAAgC;AAC9B,eAAO,KAAKN,SAAL,CAAe,KAAKK,aAAL,CAAmBC,IAAnB,CAAf,CAAP;AACD,OApLgB;AAqLjB2B,4BAAsB3B,IAAtB,EAAoC;AAClC,eAAO,KAAKN,SAAL,CAAgB,GAAE,KAAKK,aAAL,CAAmBC,IAAnB,CAAyB,OAA3C,CAAP;AACD,OAvLgB;AAwLjB4B,0BAAoB5B,IAApB,EAAkC;AAChC,eAAO,KAAKd,cAAL,CAAqB,GAAE,KAAKa,aAAL,CAAmBC,IAAnB,CAAyB,UAAhD,CAAP;AACD,OA1LgB;AA2LjB6B,wBAAkB7B,IAAlB,EAAgC;AAC9B,eAAO,KAAKd,cAAL,CAAqB,GAAE,KAAKa,aAAL,CAAmBC,IAAnB,CAAyB,QAAhD,CAAP;AACD,OA7LgB;AA8LjB8B,gBAAU1B,KAAV,EAA0B;AACxB,eAAO,KAAKlB,cAAL,CAAoB,KAAKmB,sBAAL,CAA4BD,KAA5B,CAApB,CAAP;AACD,OAhMgB;AAiMjB2B,aAAO9H,IAAP,EAA0B;AACxB,eAAO,KAAKyF,SAAL,CAAe,KAAKa,WAAL,CAAiBtG,IAAjB,CAAf,CAAP;AACD,OAnMgB;AAoMjB+H,qBACEC,gBADF,EAEEjC,IAFF,EAGEkC,MAHF,EAIE;AACA,eAAOlC,KAAKhF,IAAL,CAAUmH,SAAV,IAAuB,KAAKzC,SAAL,CAAeuC,gBAAf,CAA9B;AACD,OA1MgB;AA2MjBG,yBACEH,gBADF,EAEEjC,IAFF,EAGEkC,MAHF,EAIE;AACA,eAAOlC,KAAKhF,IAAL,CAAUmH,SAAV,GACHnC,KAAKhF,IAAL,CAAUmH,SAAV,GAAsB,MADnB,GAEH,KAAKzC,SAAL,CAAgB,GAAEuC,gBAAiB,OAAnC,CAFJ;AAGD,OAnNgB;AAoNjBI,2BACEC,YADF,EAEElC,KAFF,EAGEmC,aAHF,EAIEC,UAJF,EAKE;AACA,YAAIA,WAAWxH,IAAX,CAAgBmH,SAApB,EAA+B;AAC7B,iBAAOK,WAAWxH,IAAX,CAAgBmH,SAAvB;AACD;AACD,eAAO,KAAKzC,SAAL,CACJ,GAAE,KAAKW,sBAAL,CAA4BD,KAA5B,CAAmC,OAAMkC,aACzCjH,GADyC,CACrCjD,OAAO,KAAK2J,MAAL,CAAY3J,GAAZ,CAD8B,EAEzCmD,IAFyC,CAEpC,OAFoC,CAE3B,EAHZ,CAAP;AAKD,OAlOgB;AAmOjBkH,oCACEH,YADF,EAEElC,KAFF,EAGEmC,aAHF,EAIEC,UAJF,EAKE;AACA,YAAIA,WAAWxH,IAAX,CAAgB0H,sBAApB,EAA4C;AAC1C,iBAAOF,WAAWxH,IAAX,CAAgB0H,sBAAvB;AACD;AACD,YAAIF,WAAWxH,IAAX,CAAgB2H,gBAApB,EAAsC;AACpC,iBAAOH,WAAWxH,IAAX,CAAgB2H,gBAAvB;AACD;AACD,eAAO,KAAKN,oBAAL,CACLC,YADK,EAELlC,KAFK,EAGLmC,aAHK,EAILC,UAJK,CAAP;AAMD,OArPgB;AAsPjBI,yBACEN,YADF,EAEElC,KAFF,EAGEmC,aAHF,EAIEC,UAJF,EAKE;AACA,YAAIA,WAAWxH,IAAX,CAAgB2H,gBAApB,EAAsC;AACpC,iBAAOH,WAAWxH,IAAX,CAAgB2H,gBAAvB;AACD;AACD,eAAO,KAAKjD,SAAL,CACJ,GAAE,KAAKE,SAAL,CACD,KAAKS,sBAAL,CAA4BD,KAA5B,CADC,CAED,OAAMkC,aAAajH,GAAb,CAAiBjD,OAAO,KAAK2J,MAAL,CAAY3J,GAAZ,CAAxB,EAA0CmD,IAA1C,CAA+C,OAA/C,CAAwD,EAH3D,CAAP;AAKD,OApQgB;AAqQjBsH,+BACEP,YADF,EAEElC,KAFF,EAGEmC,aAHF,EAIEC,UAJF,EAKE;AACA,YAAIA,WAAWxH,IAAX,CAAgB8H,sBAApB,EAA4C;AAC1C,iBAAON,WAAWxH,IAAX,CAAgB8H,sBAAvB;AACD;AACD,YAAIN,WAAWxH,IAAX,CAAgB2H,gBAApB,EAAsC;AACpC,iBAAOH,WAAWxH,IAAX,CAAgB2H,gBAAvB;AACD;AACD,eAAO,KAAKjD,SAAL,CACJ,GAAE,KAAKE,SAAL,CACD,KAAKS,sBAAL,CAA4BD,KAA5B,CADC,CAED,OAAMkC,aACLjH,GADK,CACDjD,OAAO,KAAK2J,MAAL,CAAY3J,GAAZ,CADN,EAELmD,IAFK,CAEA,OAFA,CAES,OALZ,CAAP;AAOD,OAxRgB;AAyRjBwH,sBACET,YADF,EAEElC,KAFF,EAGEoC,UAHF,EAIE;AACA,YAAIA,WAAWxH,IAAX,CAAgBmH,SAApB,EAA+B;AAC7B,iBAAOK,WAAWxH,IAAX,CAAgBmH,SAAvB;AACD;AACD,eAAO,KAAKzC,SAAL,CACJ,GAAE,KAAKW,sBAAL,CAA4BD,KAA5B,CAAmC,OAAMkC,aACzCjH,GADyC,CACrCjD,OAAO,KAAK2J,MAAL,CAAY3J,GAAZ,CAD8B,EAEzCmD,IAFyC,CAEpC,OAFoC,CAE3B,EAHZ,CAAP;AAKD,OAtSgB;AAuSjByH,mBACEV,YADF,EAEElC,KAFF,EAGEoC,UAHF,EAIE;AACA,YAAIA,WAAWxH,IAAX,CAAgBiI,eAApB,EAAqC;AACnC,iBAAOT,WAAWxH,IAAX,CAAgBiI,eAAvB;AACD;AACD,eAAO,KAAKvD,SAAL,CACJ,UAAS,KAAKW,sBAAL,CAA4BD,KAA5B,CAAmC,OAAMkC,aAChDjH,GADgD,CAC5CjD,OAAO,KAAK2J,MAAL,CAAY3J,GAAZ,CADqC,EAEhDmD,IAFgD,CAE3C,OAF2C,CAElC,EAHZ,CAAP;AAKD,OApTgB;AAqTjB2H,mBACEZ,YADF,EAEElC,KAFF,EAGEoC,UAHF,EAIE;AACA,YAAIA,WAAWxH,IAAX,CAAgBmI,eAApB,EAAqC;AACnC,iBAAOX,WAAWxH,IAAX,CAAgBmI,eAAvB;AACD;AACD,eAAO,KAAKzD,SAAL,CACJ,UAAS,KAAKW,sBAAL,CAA4BD,KAA5B,CAAmC,OAAMkC,aAChDjH,GADgD,CAC5CjD,OAAO,KAAK2J,MAAL,CAAY3J,GAAZ,CADqC,EAEhDmD,IAFgD,CAE3C,OAF2C,CAElC,EAHZ,CAAP;AAKD,OAlUgB;AAmUjB6H,4BACEd,YADF,EAEElC,KAFF,EAGEoC,UAHF,EAIE;AACA,YAAIA,WAAWxH,IAAX,CAAgBiI,eAApB,EAAqC;AACnC,iBAAO,KAAK/D,cAAL,CACJ,GAAEsD,WAAWxH,IAAX,CAAgBiI,eAAgB,QAD9B,CAAP;AAGD;AACD,eAAO,KAAK/D,cAAL,CACJ,UAAS,KAAKmB,sBAAL,CAA4BD,KAA5B,CAAmC,OAAMkC,aAChDjH,GADgD,CAC5CjD,OAAO,KAAK2J,MAAL,CAAY3J,GAAZ,CADqC,EAEhDmD,IAFgD,CAE3C,OAF2C,CAElC,QAHZ,CAAP;AAKD,OAlVgB;AAmVjB8H,4BACEf,YADF,EAEElC,KAFF,EAGEoC,UAHF,EAIE;AACA,YAAIA,WAAWxH,IAAX,CAAgBmI,eAApB,EAAqC;AACnC,iBAAO,KAAKjE,cAAL,CACJ,GAAEsD,WAAWxH,IAAX,CAAgBmI,eAAgB,QAD9B,CAAP;AAGD;AACD,eAAO,KAAKjE,cAAL,CACJ,UAAS,KAAKmB,sBAAL,CAA4BD,KAA5B,CAAmC,OAAMkC,aAChDjH,GADgD,CAC5CjD,OAAO,KAAK2J,MAAL,CAAY3J,GAAZ,CADqC,EAEhDmD,IAFgD,CAE3C,OAF2C,CAElC,QAHZ,CAAP;AAKD,OAlWgB;AAmWjB+H,iBAAWlD,KAAX,EAA2B;AACzB,eAAO,KAAKV,SAAL,CAAgB,UAAS,KAAKW,sBAAL,CAA4BD,KAA5B,CAAmC,EAA5D,CAAP;AACD,OArWgB;AAsWjBmD,iBAAWnD,KAAX,EAA2B;AACzB,eAAO,KAAKV,SAAL,CAAgB,UAAS,KAAKW,sBAAL,CAA4BD,KAA5B,CAAmC,EAA5D,CAAP;AACD,OAxWgB;AAyWjBoD,0BAAoBpD,KAApB,EAAoC;AAClC,eAAO,KAAKlB,cAAL,CACJ,UAAS,KAAKmB,sBAAL,CAA4BD,KAA5B,CAAmC,QADxC,CAAP;AAGD,OA7WgB;AA8WjBqD,0BAAoBrD,KAApB,EAAoC;AAClC,eAAO,KAAKlB,cAAL,CACJ,UAAS,KAAKmB,sBAAL,CAA4BD,KAA5B,CAAmC,QADxC,CAAP;AAGD,OAlXgB;AAmXjBsD,gBAAUtD,KAAV,EAA0B;AACxB,eAAO,KAAKV,SAAL,CAAgB,GAAE,KAAKW,sBAAL,CAA4BD,KAA5B,CAAmC,OAArD,CAAP;AACD,OArXgB;AAsXjBuD,+BAAyB3D,IAAzB,EAAuC;AACrC,eAAO,KAAKd,cAAL,CAAqB,GAAE,KAAKa,aAAL,CAAmBC,IAAnB,CAAyB,aAAhD,CAAP;AACD,OAxXgB;AAyXjB4D,yBAAmB5D,IAAnB,EAAiC;AAC/B,eAAO,KAAKd,cAAL,CACJ,GAAE,KAAKoB,WAAL,CAAiB,KAAKP,aAAL,CAAmBC,IAAnB,CAAjB,CAA2C,OADzC,CAAP;AAGD,OA7XgB;AA8XjB6D,kBAAYzD,KAAZ,EAA4B;AAC1B,eAAO,KAAKV,SAAL,CAAgB,UAAS,KAAKW,sBAAL,CAA4BD,KAA5B,CAAmC,EAA5D,CAAP;AACD,OAhYgB;AAiYjB0D,sBAAgB1D,KAAhB,EAAgC;AAC9B,eAAO,KAAKlB,cAAL,CACJ,UAAS,KAAKmB,sBAAL,CAA4BD,KAA5B,CAAmC,QADxC,CAAP;AAGD,OArYgB;AAsYjB2D,wBAAkB3D,KAAlB,EAAkC;AAChC,eAAO,KAAKlB,cAAL,CACJ,UAAS,KAAKmB,sBAAL,CAA4BD,KAA5B,CAAmC,UADxC,CAAP;AAGD,OA1YgB;AA2YjB4D,wBAAkB5D,KAAlB,EAAkC;AAChC,eAAO,KAAKlB,cAAL,CACJ,UAAS,KAAKmB,sBAAL,CAA4BD,KAA5B,CAAmC,UADxC,CAAP;AAGD,OA/YgB;AAgZjB6D,wBAAkB7D,KAAlB,EAAkC;AAChC,eAAO,KAAKlB,cAAL,CACJ,UAAS,KAAKmB,sBAAL,CAA4BD,KAA5B,CAAmC,UADxC,CAAP;AAGD;AApZgB,KAAnB,CAFK,CAAP;AAyZD,GA1ZD;AA2ZD,C","file":"PgBasicsPlugin.js","sourcesContent":["// @flow\nimport * as sql from \"pg-sql2\";\nimport type { Plugin } from \"graphile-build\";\nimport { version } from \"../../package.json\";\nimport type {\n  PgProc,\n  PgType,\n  PgClass,\n  PgAttribute,\n  PgConstraint,\n} from \"./PgIntrospectionPlugin\";\n\nimport queryFromResolveData from \"../queryFromResolveData\";\nimport addStartEndCursor from \"./addStartEndCursor\";\nimport omit, {\n  CREATE,\n  READ,\n  UPDATE,\n  DELETE,\n  ALL,\n  MANY,\n  ORDER,\n  FILTER,\n  EXECUTE,\n} from \"../omit\";\nimport makeProcField from \"./makeProcField\";\nimport parseIdentifier from \"../parseIdentifier\";\nimport viaTemporaryTable from \"./viaTemporaryTable\";\nimport chalk from \"chalk\";\nimport pickBy from \"lodash/pickBy\";\n\nconst defaultPgColumnFilter = (_attr, _build, _context) => true;\ntype Keys = Array<{\n  column: string,\n  table: string,\n  schema: ?string,\n}>;\n\nconst identity = _ => _;\n\nexport function preventEmptyResult<\n  // eslint-disable-next-line flowtype/no-weak-types\n  O: { [key: string]: (...args: Array<any>) => string }\n>(obj: O): $ObjMap<O, <V>(V) => V> {\n  return Object.keys(obj).reduce((memo, key) => {\n    const fn = obj[key];\n    memo[key] = function(...args) {\n      const result = fn.apply(this, args);\n      if (typeof result !== \"string\" || result.length === 0) {\n        const stringifiedArgs = require(\"util\").inspect(args);\n        throw new Error(\n          `Inflector for '${key}' returned '${String(\n            result\n          )}'; expected non-empty string\\n` +\n            `See: https://github.com/graphile/graphile-build/blob/master/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js\\n` +\n            `Arguments passed to ${key}:\\n${stringifiedArgs}`\n        );\n      }\n      return result;\n    };\n    return memo;\n  }, {});\n}\n\nfunction omitWithRBACChecks(\n  entity: PgProc | PgClass | PgAttribute | PgConstraint,\n  permission: string\n) {\n  const ORDINARY_TABLE = \"r\";\n  const VIEW = \"v\";\n  const MATERIALIZED_VIEW = \"m\";\n  const isTableLike = entity =>\n    entity &&\n    entity.kind === \"class\" &&\n    (entity.classKind === ORDINARY_TABLE ||\n      entity.classKind === VIEW ||\n      entity.classKind === MATERIALIZED_VIEW);\n  if (entity.kind === \"procedure\") {\n    if (permission === EXECUTE && !entity.aclExecutable) {\n      return true;\n    }\n  } else if (entity.kind === \"class\" && isTableLike(entity)) {\n    const tableEntity: PgClass = entity;\n    if (\n      (permission === READ || permission === ALL || permission === MANY) &&\n      (!tableEntity.aclSelectable &&\n        !tableEntity.attributes.some(attr => attr.aclSelectable))\n    ) {\n      return true;\n    } else if (\n      permission === CREATE &&\n      (!tableEntity.aclInsertable &&\n        !tableEntity.attributes.some(attr => attr.aclInsertable))\n    ) {\n      return true;\n    } else if (\n      permission === UPDATE &&\n      (!tableEntity.aclUpdatable &&\n        !tableEntity.attributes.some(attr => attr.aclUpdatable))\n    ) {\n      return true;\n    } else if (permission === DELETE && !tableEntity.aclDeletable) {\n      return true;\n    }\n  } else if (entity.kind === \"attribute\" && isTableLike(entity.class)) {\n    const attributeEntity: PgAttribute = entity;\n\n    const klass = attributeEntity.class;\n    // Have we got *any* permissions on the table?\n    if (\n      klass.aclSelectable ||\n      klass.attributes.some(attr => attr.aclSelectable)\n    ) {\n      // Yes; this is a regular table; omit if RBAC permissions tell us to.\n      if (\n        (permission === READ ||\n          permission === FILTER ||\n          permission === ORDER) &&\n        !attributeEntity.aclSelectable\n      ) {\n        return true;\n      } else if (permission === CREATE && !attributeEntity.aclInsertable) {\n        return true;\n      } else if (permission === UPDATE && !attributeEntity.aclUpdatable) {\n        return true;\n      }\n    } else {\n      // No permissions on the table at all, so normal connections will skip\n      // over it. Thus we must be being exposed via a security definer function\n      // or similar, so we should expose all fields except those that are\n      // explicitly @omit-ed.\n    }\n  }\n  return omit(entity, permission);\n}\n\nfunction describePgEntity(entity, includeAlias = true) {\n  const getAlias = !includeAlias\n    ? () => \"\"\n    : () => {\n        const tags = pickBy(\n          entity.tags,\n          (value, key) => key === \"name\" || key.endsWith(\"Name\")\n        );\n        if (Object.keys(tags).length) {\n          return ` (with smart comments: ${chalk.bold(\n            Object.keys(tags)\n              .map(t => `@${t} ${tags[t]}`)\n              .join(\" | \")\n          )})`;\n        }\n        return \"\";\n      };\n\n  try {\n    if (entity.kind === \"constraint\") {\n      return `constraint ${chalk.bold(\n        `\"${entity.name}\"`\n      )} on ${describePgEntity(entity.class, false)}${getAlias()}`;\n    } else if (entity.kind === \"class\") {\n      // see pg_class.relkind https://www.postgresql.org/docs/10/static/catalog-pg-class.html\n      const kind =\n        {\n          c: \"composite type\",\n          f: \"foreign table\",\n          p: \"partitioned table\",\n          r: \"table\",\n          v: \"view\",\n          m: \"materialized view\",\n        }[entity.classKind] || \"table-like\";\n      return `${kind} ${chalk.bold(\n        `\"${entity.namespaceName}\".\"${entity.name}\"`\n      )}${getAlias()}`;\n    } else if (entity.kind === \"procedure\") {\n      return `function ${chalk.bold(\n        `\"${entity.namespaceName}\".\"${entity.name}\"(...args...)`\n      )}${getAlias()}`;\n    } else if (entity.kind === \"attribute\") {\n      return `column ${chalk.bold(`\"${entity.name}\"`)} on ${describePgEntity(\n        entity.class,\n        false\n      )}${getAlias()}`;\n    }\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error(\"Error occurred while attempting to debug entity:\", entity);\n    // eslint-disable-next-line no-console\n    console.error(e);\n  }\n  return `entity of kind '${entity.kind}' with oid '${entity.oid}'`;\n}\n\nexport default (function PgBasicsPlugin(\n  builder,\n  {\n    pgStrictFunctions = false,\n    pgColumnFilter = defaultPgColumnFilter,\n    pgIgnoreRBAC = false,\n  }\n) {\n  const pgOmit = pgIgnoreRBAC ? omit : omitWithRBACChecks;\n  builder.hook(\"build\", build => {\n    return build.extend(build, {\n      graphileBuildPgVersion: version,\n      pgSql: sql,\n      pgStrictFunctions,\n      pgColumnFilter,\n      pgQueryFromResolveData: queryFromResolveData,\n      pgAddStartEndCursor: addStartEndCursor,\n      pgOmit,\n      pgMakeProcField: makeProcField,\n      pgParseIdentifier: parseIdentifier,\n      pgViaTemporaryTable: viaTemporaryTable,\n      describePgEntity,\n      sqlCommentByAddingTags: (entity, tagsToAdd) => {\n        // NOTE: this function is NOT intended to be SQL safe; it's for\n        // displaying in error messages. Nonetheless if you find issues with\n        // SQL compatibility, please send a PR or issue.\n\n        // Ref: https://www.postgresql.org/docs/current/static/sql-syntax-lexical.html#SQL-BACKSLASH-TABLE\n        const escape = str =>\n          str.replace(\n            /['\\\\\\b\\f\\n\\r\\t]/g,\n            chr =>\n              ({\n                \"\\b\": \"\\\\b\",\n                \"\\f\": \"\\\\f\",\n                \"\\n\": \"\\\\n\",\n                \"\\r\": \"\\\\r\",\n                \"\\t\": \"\\\\t\",\n              }[chr] || \"\\\\\" + chr)\n          );\n\n        // tagsToAdd is here twice to ensure that the keys in tagsToAdd come first, but that they also \"win\" any conflicts.\n        const tags = Object.assign({}, tagsToAdd, entity.tags, tagsToAdd);\n\n        const description = entity.description;\n        const tagsSql = Object.keys(tags)\n          .reduce((memo, tag) => {\n            const tagValue = tags[tag];\n            const valueArray = Array.isArray(tagValue) ? tagValue : [tagValue];\n            const highlightOrNot = tag in tagsToAdd ? chalk.bold : identity;\n            valueArray.forEach(value => {\n              memo.push(\n                highlightOrNot(\n                  `@${escape(escape(tag))}${\n                    value === true ? \"\" : \" \" + escape(escape(value))\n                  }`\n                )\n              );\n            });\n            return memo;\n          }, [])\n          .join(\"\\\\n\");\n        const commentValue = `E'${tagsSql}${\n          description ? \"\\\\n\" + escape(description) : \"\"\n        }'`;\n        let sqlThing;\n        if (entity.kind === \"class\") {\n          const identifier = `\"${entity.namespaceName}\".\"${entity.name}\"`;\n          if (entity.classKind === \"r\") {\n            sqlThing = `TABLE ${identifier}`;\n          } else if (entity.classKind === \"v\") {\n            sqlThing = `VIEW ${identifier}`;\n          } else if (entity.classKind === \"m\") {\n            sqlThing = `MATERIALIZED VIEW ${identifier}`;\n          } else {\n            sqlThing = `PLEASE_SEND_A_PULL_REQUEST_TO_FIX_THIS ${identifier}`;\n          }\n        } else if (entity.kind === \"attribute\") {\n          sqlThing = `COLUMN \"${entity.class.namespaceName}\".\"${\n            entity.class.name\n          }\".\"${entity.name}\"`;\n        } else if (entity.kind === \"procedure\") {\n          sqlThing = `FUNCTION \"${entity.namespaceName}\".\"${\n            entity.name\n          }\"(...arg types go here...)`;\n        } else if (entity.kind === \"constraint\") {\n          // TODO: TEST!\n          sqlThing = `CONSTRAINT \"${entity.name}\" ON \"${\n            entity.class.namespaceName\n          }\".\"${entity.class.name}\"`;\n        } else {\n          sqlThing = `UNKNOWN_ENTITY_PLEASE_SEND_A_PULL_REQUEST`;\n        }\n\n        return `COMMENT ON ${sqlThing} IS ${commentValue};`;\n      },\n    });\n  });\n\n  builder.hook(\"inflection\", (inflection, build) => {\n    return build.extend(\n      inflection,\n      preventEmptyResult({\n        // These helpers are passed GraphQL type names as strings\n        conditionType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-condition`);\n        },\n        inputType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-input`);\n        },\n        rangeBoundType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-range-bound`);\n        },\n        rangeType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-range`);\n        },\n        patchType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-patch`);\n        },\n        baseInputType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-base-input`);\n        },\n        patchField(itemName: string) {\n          return this.camelCase(`${itemName}-patch`);\n        },\n        orderByType(typeName: string) {\n          return this.upperCamelCase(`${this.pluralize(typeName)}-order-by`);\n        },\n        edge(typeName: string) {\n          return this.upperCamelCase(`${this.pluralize(typeName)}-edge`);\n        },\n        connection(typeName: string) {\n          return this.upperCamelCase(`${this.pluralize(typeName)}-connection`);\n        },\n\n        // These helpers handle overrides via smart comments. They should only\n        // be used in other inflectors, hence the underscore prefix.\n        //\n        // IMPORTANT: do NOT do case transforms here, because detail can be\n        // lost, e.g.\n        // `constantCase(camelCase('foo_1')) !== constantCase('foo_1')`\n        _functionName(proc: PgProc) {\n          return proc.tags.name || proc.name;\n        },\n        _typeName(type: PgType) {\n          // 'type' introspection result\n          return type.tags.name || type.name;\n        },\n        _tableName(table: PgClass) {\n          return table.tags.name || table.type.tags.name || table.name;\n        },\n        _singularizedTableName(table: PgClass): string {\n          return this.singularize(this._tableName(table)).replace(\n            /.(?:(?:[_-]i|I)nput|(?:[_-]p|P)atch)$/,\n            \"$&_record\"\n          );\n        },\n        _columnName(attr: PgAttribute, _options?: { skipRowId?: boolean }) {\n          return attr.tags.name || attr.name;\n        },\n\n        // From here down, functions are passed database introspection results\n        enumType(type: PgType) {\n          return this.upperCamelCase(this._typeName(type));\n        },\n        argument(name: ?string, index: number) {\n          return this.camelCase(name || `arg${index}`);\n        },\n        orderByColumnEnum(attr: PgAttribute, ascending: boolean) {\n          const columnName = this._columnName(attr, {\n            skipRowId: true, // Because we messed up 😔\n          });\n          return this.constantCase(\n            `${columnName}_${ascending ? \"asc\" : \"desc\"}`\n          );\n        },\n        domainType(type: PgType) {\n          return this.upperCamelCase(this._typeName(type));\n        },\n        enumName(inValue: string) {\n          let value = inValue;\n\n          if (value === \"\") {\n            return \"_EMPTY_\";\n          }\n\n          // Some enums use asterisks to signify wildcards - this might be for\n          // the whole item, or prefixes/suffixes, or even in the middle.  This\n          // is provided on a best efforts basis, if it doesn't suit your\n          // purposes then please pass a custom inflector as mentioned below.\n          value = value\n            .replace(/\\*/g, \"_ASTERISK_\")\n            .replace(/^(_?)_+ASTERISK/, \"$1ASTERISK\")\n            .replace(/ASTERISK_(_?)_*$/, \"ASTERISK$1\");\n\n          // This is a best efforts replacement for common symbols that you\n          // might find in enums. Generally we only support enums that are\n          // alphanumeric, if these replacements don't work for you, you should\n          // pass a custom inflector that replaces this `enumName` method\n          // with one of your own chosing.\n          value =\n            {\n              // SQL comparison operators\n              \">\": \"GREATER_THAN\",\n              \">=\": \"GREATER_THAN_OR_EQUAL\",\n              \"=\": \"EQUAL\",\n              \"!=\": \"NOT_EQUAL\",\n              \"<>\": \"DIFFERENT\",\n              \"<=\": \"LESS_THAN_OR_EQUAL\",\n              \"<\": \"LESS_THAN\",\n\n              // PostgreSQL LIKE shortcuts\n              \"~~\": \"LIKE\",\n              \"~~*\": \"ILIKE\",\n              \"!~~\": \"NOT_LIKE\",\n              \"!~~*\": \"NOT_ILIKE\",\n\n              // '~' doesn't necessarily represent regexps, but the three\n              // operators following it likely do, so we'll use the word TILDE\n              // in all for consistency.\n              \"~\": \"TILDE\",\n              \"~*\": \"TILDE_ASTERISK\",\n              \"!~\": \"NOT_TILDE\",\n              \"!~*\": \"NOT_TILDE_ASTERISK\",\n\n              // A number of other symbols where we're not sure of their\n              // meaning.  We give them common generic names so that they're\n              // suitable for multiple purposes, e.g. favouring 'PLUS' over\n              // 'ADDITION' and 'DOT' over 'FULL_STOP'\n              \"%\": \"PERCENT\",\n              \"+\": \"PLUS\",\n              \"-\": \"MINUS\",\n              \"/\": \"SLASH\",\n              \"\\\\\": \"BACKSLASH\",\n              _: \"UNDERSCORE\",\n              \"#\": \"POUND\",\n              \"£\": \"STERLING\",\n              $: \"DOLLAR\",\n              \"&\": \"AMPERSAND\",\n              \"@\": \"AT\",\n              \"'\": \"APOSTROPHE\",\n              '\"': \"QUOTE\",\n              \"`\": \"BACKTICK\",\n              \":\": \"COLON\",\n              \";\": \"SEMICOLON\",\n              \"!\": \"EXCLAMATION_POINT\",\n              \"?\": \"QUESTION_MARK\",\n              \",\": \"COMMA\",\n              \".\": \"DOT\",\n              \"^\": \"CARET\",\n              \"|\": \"BAR\",\n              \"[\": \"OPEN_BRACKET\",\n              \"]\": \"CLOSE_BRACKET\",\n              \"(\": \"OPEN_PARENTHESIS\",\n              \")\": \"CLOSE_PARENTHESIS\",\n              \"{\": \"OPEN_BRACE\",\n              \"}\": \"CLOSE_BRACE\",\n            }[value] || value;\n          return value;\n        },\n\n        tableNode(table: PgClass) {\n          return this.camelCase(this._singularizedTableName(table));\n        },\n        tableFieldName(table: PgClass) {\n          return this.camelCase(this._singularizedTableName(table));\n        },\n        allRows(table: PgClass) {\n          return this.camelCase(\n            `all-${this.pluralize(this._singularizedTableName(table))}`\n          );\n        },\n        allRowsSimple(table: PgClass) {\n          return this.camelCase(\n            `all-${this.pluralize(this._singularizedTableName(table))}-list`\n          );\n        },\n        functionMutationName(proc: PgProc) {\n          return this.camelCase(this._functionName(proc));\n        },\n        functionQueryName(proc: PgProc) {\n          return this.camelCase(this._functionName(proc));\n        },\n        functionQueryNameList(proc: PgProc) {\n          return this.camelCase(`${this._functionName(proc)}-list`);\n        },\n        functionPayloadType(proc: PgProc) {\n          return this.upperCamelCase(`${this._functionName(proc)}-payload`);\n        },\n        functionInputType(proc: PgProc) {\n          return this.upperCamelCase(`${this._functionName(proc)}-input`);\n        },\n        tableType(table: PgClass) {\n          return this.upperCamelCase(this._singularizedTableName(table));\n        },\n        column(attr: PgAttribute) {\n          return this.camelCase(this._columnName(attr));\n        },\n        computedColumn(\n          pseudoColumnName: string,\n          proc: PgProc,\n          _table: PgClass\n        ) {\n          return proc.tags.fieldName || this.camelCase(pseudoColumnName);\n        },\n        computedColumnList(\n          pseudoColumnName: string,\n          proc: PgProc,\n          _table: PgClass\n        ) {\n          return proc.tags.fieldName\n            ? proc.tags.fieldName + \"List\"\n            : this.camelCase(`${pseudoColumnName}-list`);\n        },\n        singleRelationByKeys(\n          detailedKeys: Keys,\n          table: PgClass,\n          _foreignTable: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.fieldName) {\n            return constraint.tags.fieldName;\n          }\n          return this.camelCase(\n            `${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}`\n          );\n        },\n        singleRelationByKeysBackwards(\n          detailedKeys: Keys,\n          table: PgClass,\n          _foreignTable: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.foreignSingleFieldName) {\n            return constraint.tags.foreignSingleFieldName;\n          }\n          if (constraint.tags.foreignFieldName) {\n            return constraint.tags.foreignFieldName;\n          }\n          return this.singleRelationByKeys(\n            detailedKeys,\n            table,\n            _foreignTable,\n            constraint\n          );\n        },\n        manyRelationByKeys(\n          detailedKeys: Keys,\n          table: PgClass,\n          _foreignTable: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.foreignFieldName) {\n            return constraint.tags.foreignFieldName;\n          }\n          return this.camelCase(\n            `${this.pluralize(\n              this._singularizedTableName(table)\n            )}-by-${detailedKeys.map(key => this.column(key)).join(\"-and-\")}`\n          );\n        },\n        manyRelationByKeysSimple(\n          detailedKeys: Keys,\n          table: PgClass,\n          _foreignTable: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.foreignSimpleFieldName) {\n            return constraint.tags.foreignSimpleFieldName;\n          }\n          if (constraint.tags.foreignFieldName) {\n            return constraint.tags.foreignFieldName;\n          }\n          return this.camelCase(\n            `${this.pluralize(\n              this._singularizedTableName(table)\n            )}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}-list`\n          );\n        },\n        rowByUniqueKeys(\n          detailedKeys: Keys,\n          table: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.fieldName) {\n            return constraint.tags.fieldName;\n          }\n          return this.camelCase(\n            `${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}`\n          );\n        },\n        updateByKeys(\n          detailedKeys: Keys,\n          table: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.updateFieldName) {\n            return constraint.tags.updateFieldName;\n          }\n          return this.camelCase(\n            `update-${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}`\n          );\n        },\n        deleteByKeys(\n          detailedKeys: Keys,\n          table: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.deleteFieldName) {\n            return constraint.tags.deleteFieldName;\n          }\n          return this.camelCase(\n            `delete-${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}`\n          );\n        },\n        updateByKeysInputType(\n          detailedKeys: Keys,\n          table: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.updateFieldName) {\n            return this.upperCamelCase(\n              `${constraint.tags.updateFieldName}-input`\n            );\n          }\n          return this.upperCamelCase(\n            `update-${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}-input`\n          );\n        },\n        deleteByKeysInputType(\n          detailedKeys: Keys,\n          table: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.deleteFieldName) {\n            return this.upperCamelCase(\n              `${constraint.tags.deleteFieldName}-input`\n            );\n          }\n          return this.upperCamelCase(\n            `delete-${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}-input`\n          );\n        },\n        updateNode(table: PgClass) {\n          return this.camelCase(`update-${this._singularizedTableName(table)}`);\n        },\n        deleteNode(table: PgClass) {\n          return this.camelCase(`delete-${this._singularizedTableName(table)}`);\n        },\n        updateNodeInputType(table: PgClass) {\n          return this.upperCamelCase(\n            `update-${this._singularizedTableName(table)}-input`\n          );\n        },\n        deleteNodeInputType(table: PgClass) {\n          return this.upperCamelCase(\n            `delete-${this._singularizedTableName(table)}-input`\n          );\n        },\n        edgeField(table: PgClass) {\n          return this.camelCase(`${this._singularizedTableName(table)}-edge`);\n        },\n        scalarFunctionConnection(proc: PgProc) {\n          return this.upperCamelCase(`${this._functionName(proc)}-connection`);\n        },\n        scalarFunctionEdge(proc: PgProc) {\n          return this.upperCamelCase(\n            `${this.singularize(this._functionName(proc))}-edge`\n          );\n        },\n        createField(table: PgClass) {\n          return this.camelCase(`create-${this._singularizedTableName(table)}`);\n        },\n        createInputType(table: PgClass) {\n          return this.upperCamelCase(\n            `create-${this._singularizedTableName(table)}-input`\n          );\n        },\n        createPayloadType(table: PgClass) {\n          return this.upperCamelCase(\n            `create-${this._singularizedTableName(table)}-payload`\n          );\n        },\n        updatePayloadType(table: PgClass) {\n          return this.upperCamelCase(\n            `update-${this._singularizedTableName(table)}-payload`\n          );\n        },\n        deletePayloadType(table: PgClass) {\n          return this.upperCamelCase(\n            `delete-${this._singularizedTableName(table)}-payload`\n          );\n        },\n      })\n    );\n  });\n}: Plugin);\n"]}