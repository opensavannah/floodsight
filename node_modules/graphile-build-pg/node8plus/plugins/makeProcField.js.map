{"version":3,"sources":["../../src/plugins/makeProcField.js"],"names":["makeProcField","debugSql","firstValue","obj","firstKey","k","fieldName","proc","pgIntrospectionResultsByKind","introspectionResultsByKind","pgGetGqlTypeByTypeIdAndModifier","pgGetGqlInputTypeByTypeIdAndModifier","getTypeByName","pgSql","sql","parseResolveInfo","getSafeAliasFromResolveInfo","getSafeAliasFromAlias","gql2pg","pg2gql","newWithHooks","pgStrictFunctions","strictFunctions","pgTweakFragmentForTypeAndModifier","graphql","GraphQLNonNull","GraphQLList","GraphQLString","GraphQLInt","GraphQLFloat","GraphQLBoolean","GraphQLObjectType","GraphQLInputObjectType","getNamedType","isCompositeType","inflection","pgQueryFromResolveData","queryFromResolveData","pgAddStartEndCursor","addStartEndCursor","pgViaTemporaryTable","viaTemporaryTable","describePgEntity","sqlCommentByAddingTags","fieldWithHooks","computed","isMutation","forceList","pluralize","camelCase","getResultFieldName","gqlType","type","returnsSet","tags","resultFieldName","gqlNamedType","name","isPgArray","Error","sliceAmount","argNames","argTypeIds","slice","map","_","idx","argTypes","typeId","typeById","requiredArgCount","Math","max","length","argDefaultsNum","variantFromName","_type","match","variantFromTags","variant","parseInt","notNullArgCount","isStrict","argGqlTypes","Type","id","hint","class","namespace","t","namespaceName","join","rawReturnType","returnTypeId","returnType","arrayItemType","returnTypeTable","classById","classId","fieldScope","payloadTypeScope","pgFieldIntrospection","pgIntrospection","returnFirstValueAsValue","TableType","isTableLike","isPgFieldSimpleCollection","ConnectionType","connection","isPgFieldConnection","pgFieldIntrospectionTable","pgIntrospectionTable","connectionTypeName","scalarFunctionConnection","addDataGenerator","getDataFromParsedResolveInfoFragment","addArgDataGenerator","addPgCursorPrefix","pgCursorPrefix","literal","makeMutationCall","parsedResolveInfoFragment","ReturnType","implicitArgs","args","rawArgs","input","sqlArgValues","haveNames","argIndex","argName","gqlArgName","argument","value","sqlValue","sqlArgName","identifier","unshift","fragment","functionCall","makeQuery","sqlMutationQuery","functionAlias","parentQueryBuilder","resolveData","query","withPagination","withPaginationAsFields","asJson","asJsonAggregate","addNullCase","innerQueryBuilder","select","pgQuery","queryBuilder","parentTableAlias","getTableAlias","Symbol","alias","PayloadType","reduce","memo","isNotVoid","String","functionPayloadType","description","functionMutationName","fields","recurseDataGeneratorsForField","Object","assign","clientMutationId","resolve","data","__origin","isMutationPayload","InputType","functionInputType","isMutationInput","scalarAwarePg2gql","v","_args","_context","resolveInfo","safeAlias","pgClient","queryResultRows","intermediateIdentifier","isVoid","isPgClass","e","text","values","compile","enabled","queryResult","rows","row","result"],"mappings":"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","file":"makeProcField.js","sourcesContent":["// @flow\nimport debugFactory from \"debug\";\n\nimport type { Build, FieldWithHooksFunction } from \"graphile-build\";\nimport type { PgProc } from \"./PgIntrospectionPlugin\";\nimport type { SQL } from \"pg-sql2\";\n\nconst debugSql = debugFactory(\"graphile-build-pg:sql\");\nconst firstValue = obj => {\n  let firstKey;\n  for (const k in obj) {\n    if (k[0] !== \"_\" && k[1] !== \"_\") {\n      firstKey = k;\n    }\n  }\n  return obj[firstKey];\n};\n\nexport default function makeProcField(\n  fieldName: string,\n  proc: PgProc,\n  {\n    pgIntrospectionResultsByKind: introspectionResultsByKind,\n    pgGetGqlTypeByTypeIdAndModifier,\n    pgGetGqlInputTypeByTypeIdAndModifier,\n    getTypeByName,\n    pgSql: sql,\n    parseResolveInfo,\n    getSafeAliasFromResolveInfo,\n    getSafeAliasFromAlias,\n    gql2pg,\n    pg2gql,\n    newWithHooks,\n    pgStrictFunctions: strictFunctions,\n    pgTweakFragmentForTypeAndModifier,\n    graphql: {\n      GraphQLNonNull,\n      GraphQLList,\n      GraphQLString,\n      GraphQLInt,\n      GraphQLFloat,\n      GraphQLBoolean,\n      GraphQLObjectType,\n      GraphQLInputObjectType,\n      getNamedType,\n      isCompositeType,\n    },\n    inflection,\n    pgQueryFromResolveData: queryFromResolveData,\n    pgAddStartEndCursor: addStartEndCursor,\n    pgViaTemporaryTable: viaTemporaryTable,\n    describePgEntity,\n    sqlCommentByAddingTags,\n  }: {| ...Build |},\n  {\n    fieldWithHooks,\n    computed = false,\n    isMutation = false,\n    forceList = false,\n  }: {\n    fieldWithHooks: FieldWithHooksFunction,\n    computed?: boolean,\n    isMutation?: boolean,\n    forceList?: boolean,\n  }\n) {\n  const { pluralize, camelCase } = inflection;\n  function getResultFieldName(proc, gqlType, type, returnsSet) {\n    if (proc.tags.resultFieldName) {\n      return proc.tags.resultFieldName;\n    }\n    const gqlNamedType = getNamedType(gqlType);\n    let name;\n    if (gqlNamedType === GraphQLInt) {\n      name = \"integer\";\n    } else if (gqlNamedType === GraphQLFloat) {\n      name = \"float\";\n    } else if (gqlNamedType === GraphQLBoolean) {\n      name = \"boolean\";\n    } else if (gqlNamedType === GraphQLString) {\n      name = \"string\";\n    } else {\n      name = camelCase(gqlNamedType.name);\n    }\n    return returnsSet || type.isPgArray ? pluralize(name) : name;\n  }\n  if (computed && isMutation) {\n    throw new Error(\"Mutation procedure cannot be computed\");\n  }\n  const sliceAmount = computed ? 1 : 0;\n  const argNames = proc.argTypeIds\n    .slice(sliceAmount)\n    .map((_, idx) => proc.argNames[idx + sliceAmount] || \"\");\n  const argTypes = proc.argTypeIds\n    .slice(sliceAmount)\n    .map(typeId => introspectionResultsByKind.typeById[typeId]);\n  const requiredArgCount = Math.max(0, argNames.length - proc.argDefaultsNum);\n  const variantFromName = (name, _type) => {\n    if (name.match(/(_p|P)atch$/)) {\n      return \"patch\";\n    }\n    return null;\n  };\n  const variantFromTags = (tags, idx) => {\n    const variant = tags[`arg${idx}variant`];\n    if (variant && variant.match && variant.match(/^[0-9]+$/)) {\n      return parseInt(variant, 10);\n    }\n    return variant;\n  };\n  const notNullArgCount =\n    proc.isStrict || strictFunctions ? requiredArgCount : 0;\n  const argGqlTypes = argTypes.map((type, idx) => {\n    // TODO: PG10 doesn't support the equivalent of pg_attribute.atttypemod on function return values, but maybe a later version might\n    const variant =\n      variantFromTags(proc.tags, idx) || variantFromName(argNames[idx], type);\n    const Type = pgGetGqlInputTypeByTypeIdAndModifier(type.id, variant);\n    if (!Type) {\n      const hint = type.class\n        ? `; you might want to use smart comments, e.g. 'COMMENT ON FUNCTION \"${\n            proc.namespace.name\n          }\".\"${proc.name}\"(${argTypes\n            .map(t => `\"${t.namespaceName}\".\"${t.name}\"`)\n            .join(\", \")}) IS E'@arg${idx}variant base';\"`\n        : \"\";\n      throw new Error(\n        `Could not determine type for argument ${idx} ('${\n          argNames[idx]\n        }') of function '${proc.name}'${hint}`\n      );\n    }\n    if (idx >= notNullArgCount) {\n      return Type;\n    } else {\n      return new GraphQLNonNull(Type);\n    }\n  });\n\n  const rawReturnType = introspectionResultsByKind.typeById[proc.returnTypeId];\n  const returnType = rawReturnType.isPgArray\n    ? rawReturnType.arrayItemType\n    : rawReturnType;\n  const returnTypeTable =\n    introspectionResultsByKind.classById[returnType.classId];\n  if (!returnType) {\n    throw new Error(\n      `Could not determine return type for function '${proc.name}'`\n    );\n  }\n  let type;\n  const fieldScope = {};\n  const payloadTypeScope = {};\n  fieldScope.pgFieldIntrospection = proc;\n  payloadTypeScope.pgIntrospection = proc;\n  let returnFirstValueAsValue = false;\n  const TableType =\n    returnTypeTable &&\n    pgGetGqlTypeByTypeIdAndModifier(returnTypeTable.type.id, null);\n\n  const isTableLike: boolean =\n    (TableType && isCompositeType(TableType)) || false;\n  if (isTableLike) {\n    if (proc.returnsSet) {\n      if (isMutation) {\n        type = new GraphQLList(TableType);\n      } else if (forceList) {\n        type = new GraphQLList(TableType);\n        fieldScope.isPgFieldSimpleCollection = true;\n      } else {\n        const ConnectionType = getTypeByName(\n          inflection.connection(TableType.name)\n        );\n        if (!ConnectionType) {\n          throw new Error(\n            `Do not have a connection type '${inflection.connection(\n              TableType.name\n            )}' for '${TableType.name}' so cannot create procedure field`\n          );\n        }\n        type = new GraphQLNonNull(ConnectionType);\n        fieldScope.isPgFieldConnection = true;\n      }\n      fieldScope.pgFieldIntrospectionTable = returnTypeTable;\n      payloadTypeScope.pgIntrospectionTable = returnTypeTable;\n    } else {\n      type = TableType;\n      if (rawReturnType.isPgArray) {\n        type = new GraphQLList(type);\n      }\n      fieldScope.pgFieldIntrospectionTable = returnTypeTable;\n      payloadTypeScope.pgIntrospectionTable = returnTypeTable;\n    }\n  } else {\n    // TODO: PG10 doesn't support the equivalent of pg_attribute.atttypemod on function return values, but maybe a later version might\n    const Type =\n      pgGetGqlTypeByTypeIdAndModifier(returnType.id, null) || GraphQLString;\n    if (proc.returnsSet) {\n      const connectionTypeName = inflection.scalarFunctionConnection(proc);\n      const ConnectionType = getTypeByName(connectionTypeName);\n      if (isMutation) {\n        // Cannot return a connection because it would have to run the mutation again\n        type = new GraphQLList(Type);\n        returnFirstValueAsValue = true;\n      } else if (forceList || !ConnectionType) {\n        type = new GraphQLList(Type);\n        returnFirstValueAsValue = true;\n        fieldScope.isPgFieldSimpleCollection = true;\n      } else {\n        type = new GraphQLNonNull(ConnectionType);\n        fieldScope.isPgFieldConnection = true;\n        // We don't return the first value as the value here because it gets\n        // sent down into PgScalarFunctionConnectionPlugin so the relevant\n        // EdgeType can return cursor / node; i.e. we might want to add an\n        // `__cursor` field so we can't just use a scalar.\n      }\n    } else {\n      returnFirstValueAsValue = true;\n      type = Type;\n      if (rawReturnType.isPgArray) {\n        type = new GraphQLList(type);\n      }\n    }\n  }\n  return fieldWithHooks(\n    fieldName,\n    ({\n      addDataGenerator,\n      getDataFromParsedResolveInfoFragment,\n      addArgDataGenerator,\n    }) => {\n      if (\n        proc.returnsSet &&\n        !isTableLike &&\n        !returnFirstValueAsValue &&\n        !isMutation\n      ) {\n        // Natural ordering\n        addArgDataGenerator(function addPgCursorPrefix() {\n          return {\n            pgCursorPrefix: sql.literal(\"natural\"),\n          };\n        });\n      }\n      function makeMutationCall(\n        parsedResolveInfoFragment,\n        ReturnType,\n        { implicitArgs = [] } = {}\n      ): SQL {\n        const { args: rawArgs = {} } = parsedResolveInfoFragment;\n        const args = isMutation ? rawArgs.input : rawArgs;\n        const sqlArgValues = [];\n        let haveNames = true;\n        for (let argIndex = argNames.length - 1; argIndex >= 0; argIndex--) {\n          const argName = argNames[argIndex];\n          const gqlArgName = inflection.argument(argName, argIndex);\n          const value = args[gqlArgName];\n          const variant =\n            variantFromTags(proc.tags, argIndex) ||\n            variantFromName(argNames[argIndex], type);\n\n          const sqlValue = gql2pg(value, argTypes[argIndex], variant);\n\n          if (argIndex + 1 > requiredArgCount && haveNames && value == null) {\n            // No need to pass argument to function\n            continue;\n          } else if (argIndex + 1 > requiredArgCount && haveNames) {\n            const sqlArgName = argName ? sql.identifier(argName) : null;\n            if (sqlArgName) {\n              sqlArgValues.unshift(sql.fragment`${sqlArgName} := ${sqlValue}`);\n            } else {\n              haveNames = false;\n              sqlArgValues.unshift(sqlValue);\n            }\n          } else {\n            sqlArgValues.unshift(sqlValue);\n          }\n        }\n        const functionCall = sql.fragment`${sql.identifier(\n          proc.namespace.name,\n          proc.name\n        )}(${sql.join([...implicitArgs, ...sqlArgValues], \", \")})`;\n        return rawReturnType.isPgArray\n          ? sql.fragment`unnest(${functionCall})`\n          : functionCall;\n      }\n      function makeQuery(\n        parsedResolveInfoFragment,\n        ReturnType,\n        sqlMutationQuery,\n        functionAlias,\n        parentQueryBuilder\n      ) {\n        const resolveData = getDataFromParsedResolveInfoFragment(\n          parsedResolveInfoFragment,\n          ReturnType\n        );\n        const query = queryFromResolveData(\n          sqlMutationQuery,\n          functionAlias,\n          resolveData,\n          {\n            withPagination: !forceList && !isMutation && proc.returnsSet,\n            withPaginationAsFields:\n              !forceList && !isMutation && proc.returnsSet && !computed,\n            asJson:\n              computed &&\n              (forceList || (!proc.returnsSet && !returnFirstValueAsValue)),\n            asJsonAggregate:\n              computed &&\n              (forceList || (!proc.returnsSet && rawReturnType.isPgArray)),\n            addNullCase:\n              !proc.returnsSet && !rawReturnType.isPgArray && isTableLike,\n          },\n          innerQueryBuilder => {\n            innerQueryBuilder.parentQueryBuilder = parentQueryBuilder;\n            if (!isTableLike) {\n              if (returnTypeTable) {\n                innerQueryBuilder.select(\n                  pgTweakFragmentForTypeAndModifier(\n                    sql.fragment`${functionAlias}`,\n                    returnTypeTable.type,\n                    null,\n                    resolveData\n                  ),\n                  \"value\"\n                );\n              } else {\n                innerQueryBuilder.select(\n                  pgTweakFragmentForTypeAndModifier(\n                    sql.fragment`${functionAlias}.${functionAlias}`,\n                    returnType,\n                    null, // We can't determine a type modifier for functions\n                    resolveData\n                  ),\n                  \"value\"\n                );\n              }\n            }\n          }\n        );\n        return query;\n      }\n      if (computed) {\n        addDataGenerator((parsedResolveInfoFragment, ReturnType) => {\n          return {\n            pgQuery: queryBuilder => {\n              queryBuilder.select(() => {\n                const parentTableAlias = queryBuilder.getTableAlias();\n                const functionAlias = sql.identifier(Symbol());\n                const sqlMutationQuery = makeMutationCall(\n                  parsedResolveInfoFragment,\n                  ReturnType,\n                  {\n                    implicitArgs: [parentTableAlias],\n                  }\n                );\n                const query = makeQuery(\n                  parsedResolveInfoFragment,\n                  ReturnType,\n                  sqlMutationQuery,\n                  functionAlias,\n                  queryBuilder\n                );\n                return sql.fragment`(${query})`;\n              }, getSafeAliasFromAlias(parsedResolveInfoFragment.alias));\n            },\n          };\n        });\n      }\n\n      let ReturnType = type;\n      let PayloadType;\n      let args = argNames.reduce((memo, argName, argIndex) => {\n        const gqlArgName = inflection.argument(argName, argIndex);\n        memo[gqlArgName] = {\n          type: argGqlTypes[argIndex],\n        };\n        return memo;\n      }, {});\n      if (isMutation) {\n        const resultFieldName = getResultFieldName(\n          proc,\n          type,\n          rawReturnType,\n          proc.returnsSet\n        );\n        const isNotVoid = String(returnType.id) !== \"2278\";\n        // If set then plural name\n        PayloadType = newWithHooks(\n          GraphQLObjectType,\n          {\n            name: inflection.functionPayloadType(proc),\n            description: `The output of our \\`${inflection.functionMutationName(\n              proc\n            )}\\` mutation.`,\n            fields: ({ recurseDataGeneratorsForField }) => {\n              if (isNotVoid) {\n                recurseDataGeneratorsForField(resultFieldName);\n              }\n              return Object.assign(\n                {},\n                {\n                  clientMutationId: {\n                    type: GraphQLString,\n                  },\n                },\n                isNotVoid\n                  ? {\n                      [resultFieldName]: {\n                        type: type,\n                        resolve(data) {\n                          return data.data;\n                        },\n                      },\n                      // Result\n                    }\n                  : null\n              );\n            },\n          },\n          Object.assign(\n            {},\n            {\n              __origin: `Adding mutation function payload type for ${describePgEntity(\n                proc\n              )}. You can rename the function's GraphQL field (and its dependent types) via:\\n\\n  ${sqlCommentByAddingTags(\n                proc,\n                {\n                  name: \"newNameHere\",\n                }\n              )}`,\n              isMutationPayload: true,\n            },\n            payloadTypeScope\n          )\n        );\n        ReturnType = PayloadType;\n        const InputType = newWithHooks(\n          GraphQLInputObjectType,\n          {\n            name: inflection.functionInputType(proc),\n            description: `All input for the \\`${inflection.functionMutationName(\n              proc\n            )}\\` mutation.`,\n            fields: Object.assign(\n              {\n                clientMutationId: {\n                  type: GraphQLString,\n                },\n              },\n              args\n            ),\n          },\n          {\n            __origin: `Adding mutation function input type for ${describePgEntity(\n              proc\n            )}. You can rename the function's GraphQL field (and its dependent types) via:\\n\\n  ${sqlCommentByAddingTags(\n              proc,\n              {\n                name: \"newNameHere\",\n              }\n            )}`,\n            isMutationInput: true,\n          }\n        );\n        args = {\n          input: {\n            type: new GraphQLNonNull(InputType),\n          },\n        };\n      }\n      // If this is a table we can process it directly; but if it's a scalar\n      // setof function we must dereference '.value' from it, because this\n      // makes space for '__cursor' to exist alongside it (whereas on a table\n      // the '__cursor' can just be on the table object itself)\n      const scalarAwarePg2gql = v =>\n        isTableLike\n          ? pg2gql(v, returnType)\n          : {\n              ...v,\n              value: pg2gql(v.value, returnType),\n            };\n\n      return {\n        description: proc.description\n          ? proc.description\n          : isTableLike && proc.returnsSet\n            ? `Reads and enables pagination through a set of \\`${\n                TableType.name\n              }\\`.`\n            : null,\n        type: ReturnType,\n        args: args,\n        resolve: computed\n          ? (data, _args, _context, resolveInfo) => {\n              const safeAlias = getSafeAliasFromResolveInfo(resolveInfo);\n              const value = data[safeAlias];\n              if (returnFirstValueAsValue) {\n                if (proc.returnsSet && !forceList) {\n                  // EITHER `isMutation` is true, or `ConnectionType` does not\n                  // exist - either way, we're not returning a connection.\n                  return value.data\n                    .map(firstValue)\n                    .map(v => pg2gql(v, returnType));\n                } else if (proc.returnsSet || rawReturnType.isPgArray) {\n                  return value.map(firstValue).map(v => pg2gql(v, returnType));\n                } else {\n                  return pg2gql(value, returnType);\n                }\n              } else {\n                if (proc.returnsSet && !isMutation && !forceList) {\n                  return addStartEndCursor({\n                    ...value,\n                    data: value.data ? value.data.map(scalarAwarePg2gql) : null,\n                  });\n                } else if (proc.returnsSet || rawReturnType.isPgArray) {\n                  return value.map(v => pg2gql(v, returnType));\n                } else {\n                  return pg2gql(value, returnType);\n                }\n              }\n            }\n          : async (data, args, { pgClient }, resolveInfo) => {\n              const parsedResolveInfoFragment = parseResolveInfo(resolveInfo);\n              const functionAlias = sql.identifier(Symbol());\n              const sqlMutationQuery = makeMutationCall(\n                parsedResolveInfoFragment,\n                resolveInfo.returnType,\n                {}\n              );\n\n              let queryResultRows;\n              if (isMutation) {\n                const query = makeQuery(\n                  parsedResolveInfoFragment,\n                  resolveInfo.returnType,\n                  functionAlias,\n                  functionAlias,\n                  null\n                );\n                const intermediateIdentifier = sql.identifier(Symbol());\n                const isVoid = returnType.id === \"2278\";\n                const isPgClass =\n                  !returnFirstValueAsValue || returnTypeTable || false;\n                try {\n                  await pgClient.query(\"SAVEPOINT graphql_mutation\");\n                  queryResultRows = await viaTemporaryTable(\n                    pgClient,\n                    isVoid\n                      ? null\n                      : sql.identifier(\n                          returnType.namespaceName,\n                          returnType.name\n                        ),\n                    sql.query`select ${\n                      isPgClass\n                        ? sql.query`${intermediateIdentifier}.*`\n                        : sql.query`${intermediateIdentifier}.${intermediateIdentifier} as ${functionAlias}`\n                    } from ${sqlMutationQuery} ${intermediateIdentifier}`,\n                    functionAlias,\n                    query,\n                    isPgClass\n                  );\n                  await pgClient.query(\"RELEASE SAVEPOINT graphql_mutation\");\n                } catch (e) {\n                  await pgClient.query(\n                    \"ROLLBACK TO SAVEPOINT graphql_mutation\"\n                  );\n                  throw e;\n                }\n              } else {\n                const query = makeQuery(\n                  parsedResolveInfoFragment,\n                  resolveInfo.returnType,\n                  sqlMutationQuery,\n                  functionAlias,\n                  null\n                );\n                const { text, values } = sql.compile(query);\n                if (debugSql.enabled) debugSql(text);\n                const queryResult = await pgClient.query(text, values);\n                queryResultRows = queryResult.rows;\n              }\n              const rows = queryResultRows;\n              const [row] = rows;\n              const result = (() => {\n                if (returnFirstValueAsValue) {\n                  if (proc.returnsSet && !isMutation && !forceList) {\n                    // EITHER `isMutation` is true, or `ConnectionType` does\n                    // not exist - either way, we're not returning a\n                    // connection.\n                    return row.data\n                      .map(firstValue)\n                      .map(v => pg2gql(v, returnType));\n                  } else if (proc.returnsSet || rawReturnType.isPgArray) {\n                    return rows.map(firstValue).map(v => pg2gql(v, returnType));\n                  } else {\n                    return pg2gql(firstValue(row), returnType);\n                  }\n                } else {\n                  if (proc.returnsSet && !isMutation && !forceList) {\n                    // Connection\n                    return addStartEndCursor({\n                      ...row,\n                      data: row.data ? row.data.map(scalarAwarePg2gql) : null,\n                    });\n                  } else if (proc.returnsSet || rawReturnType.isPgArray) {\n                    return rows.map(row => pg2gql(row, returnType));\n                  } else {\n                    return pg2gql(row, returnType);\n                  }\n                }\n              })();\n              if (isMutation) {\n                return {\n                  clientMutationId: args.input.clientMutationId,\n                  data: result,\n                };\n              } else {\n                return result;\n              }\n            },\n      };\n    },\n    fieldScope\n  );\n}\n"]}