{"version":3,"sources":["../../src/plugins/PgQueryProceduresPlugin.js"],"names":["PgQueryProceduresPlugin","builder","pgSimpleCollections","hasConnections","hasSimpleCollections","hook","fields","build","context","extend","inflection","pgIntrospectionResultsByKind","introspectionResultsByKind","pgMakeProcField","makeProcField","pgOmit","omit","describePgEntity","sqlCommentByAddingTags","swallowError","scope","isRootQuery","fieldWithHooks","procedure","filter","proc","isStable","namespace","reduce","memo","argTypes","argTypeIds","map","typeId","typeById","some","type","class","isSelectable","firstArgType","namespaceId","name","startsWith","makeField","forceList","fieldName","functionQueryNameList","functionQueryName","e","returnsSet"],"mappings":";;;;;;kBAGgB,SAASA,uBAAT,CACdC,OADc,EAEd,EAAEC,mBAAF,EAFc,EAGd;AACA,QAAMC,iBAAiBD,wBAAwB,MAA/C;AACA,QAAME,uBACJF,wBAAwB,MAAxB,IAAkCA,wBAAwB,MAD5D;AAEAD,UAAQI,IAAR,CAAa,0BAAb,EAAyC,CAACC,MAAD,EAASC,KAAT,EAAgBC,OAAhB,KAA4B;AACnE,UAAM;AACJC,YADI;AAEJC,gBAFI;AAGJC,oCAA8BC,0BAH1B;AAIJC,uBAAiBC,aAJb;AAKJC,cAAQC,IALJ;AAMJC,sBANI;AAOJC,4BAPI;AAQJC;AARI,QASFZ,KATJ;AAUA,UAAM;AACJa,aAAO,EAAEC,WAAF,EADH;AAEJC;AAFI,QAGFd,OAHJ;AAIA,QAAI,CAACa,WAAL,EAAkB;AAChB,aAAOf,MAAP;AACD;AACD,WAAOG,OACLH,MADK,EAELM,2BAA2BW,SAA3B,CACGC,MADH,CACUC,QAAQA,KAAKC,QADvB,EAEGF,MAFH,CAEUC,QAAQ,CAAC,CAACA,KAAKE,SAFzB,EAGGH,MAHH,CAGUC,QAAQ,CAACT,KAAKS,IAAL,EAAW,SAAX,CAHnB,EAIGG,MAJH,CAIU,CAACC,IAAD,EAAOJ,IAAP,KAAgB;AACtB;;;;;;;;;;;;;;AAcA,YAAMK,WAAWL,KAAKM,UAAL,CAAgBC,GAAhB,CACfC,UAAUrB,2BAA2BsB,QAA3B,CAAoCD,MAApC,CADK,CAAjB;AAGA,UACEH,SAASK,IAAT,CACEC,QAAQA,KAAKA,IAAL,KAAc,GAAd,IAAqBA,KAAKC,KAA1B,IAAmCD,KAAKC,KAAL,CAAWC,YADxD,CADF,EAIE;AACA;AACA,eAAOT,IAAP;AACD;AACD,YAAMU,eAAeT,SAAS,CAAT,CAArB;AACA,UACES,gBACAA,aAAaH,IAAb,KAAsB,GADtB,IAEAG,aAAaF,KAFb,IAGAE,aAAaC,WAAb,KAA6Bf,KAAKe,WAHlC,IAIAf,KAAKgB,IAAL,CAAUC,UAAV,CAAsB,GAAEH,aAAaE,IAAK,GAA1C,CALF,EAME;AACA;AACA,eAAOZ,IAAP;AACD;;AAED,eAASc,SAAT,CAAmBC,SAAnB,EAA8B;AAC5B,cAAMC,YAAYD,YACdlC,WAAWoC,qBAAX,CAAiCrB,IAAjC,CADc,GAEdf,WAAWqC,iBAAX,CAA6BtB,IAA7B,CAFJ;AAGA,YAAI;AACFI,iBAAOpB,OACLoB,IADK,EAEL;AACE,aAACgB,SAAD,GAAa/B,cAAc+B,SAAd,EAAyBpB,IAAzB,EAA+BlB,KAA/B,EAAsC;AACjDe,4BADiD;AAEjDsB;AAFiD,aAAtC;AADf,WAFK,EAQJ,0BAAyB3B,iBACxBQ,IADwB,CAExB,0CAAyCP,uBACzCO,IADyC,EAEzC;AACEgB,kBAAM;AADR,WAFyC,CAKzC,EAfG,CAAP;AAiBD,SAlBD,CAkBE,OAAOO,CAAP,EAAU;AACV7B,uBAAa6B,CAAb;AACD;AACF;AACD,UAAI,CAACvB,KAAKwB,UAAN,IAAoB9C,cAAxB,EAAwC;AACtCwC,kBAAU,KAAV;AACD;AACD,UAAIlB,KAAKwB,UAAL,IAAmB7C,oBAAvB,EAA6C;AAC3CuC,kBAAU,IAAV;AACD;AACD,aAAOd,IAAP;AACD,KA3EH,EA2EK,EA3EL,CAFK,EA8EJ,4CA9EI,CAAP;AAgFD,GAlGD;AAmGD,C","file":"PgQueryProceduresPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgQueryProceduresPlugin(\n  builder,\n  { pgSimpleCollections }\n) {\n  const hasConnections = pgSimpleCollections !== \"only\";\n  const hasSimpleCollections =\n    pgSimpleCollections === \"only\" || pgSimpleCollections === \"both\";\n  builder.hook(\"GraphQLObjectType:fields\", (fields, build, context) => {\n    const {\n      extend,\n      inflection,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      pgMakeProcField: makeProcField,\n      pgOmit: omit,\n      describePgEntity,\n      sqlCommentByAddingTags,\n      swallowError,\n    } = build;\n    const {\n      scope: { isRootQuery },\n      fieldWithHooks,\n    } = context;\n    if (!isRootQuery) {\n      return fields;\n    }\n    return extend(\n      fields,\n      introspectionResultsByKind.procedure\n        .filter(proc => proc.isStable)\n        .filter(proc => !!proc.namespace)\n        .filter(proc => !omit(proc, \"execute\"))\n        .reduce((memo, proc) => {\n          /*\n            proc =\n              { kind: 'procedure',\n                name: 'integration_webhook_secret',\n                description: null,\n                namespaceId: '6484381',\n                isStrict: false,\n                returnsSet: false,\n                isStable: true,\n                returnTypeId: '2950',\n                argTypeIds: [ '6484569' ],\n                argNames: [ 'integration' ],\n                argDefaultsNum: 0 }\n            */\n          const argTypes = proc.argTypeIds.map(\n            typeId => introspectionResultsByKind.typeById[typeId]\n          );\n          if (\n            argTypes.some(\n              type => type.type === \"c\" && type.class && type.class.isSelectable\n            )\n          ) {\n            // Selects a table, ignore!\n            return memo;\n          }\n          const firstArgType = argTypes[0];\n          if (\n            firstArgType &&\n            firstArgType.type === \"c\" &&\n            firstArgType.class &&\n            firstArgType.namespaceId === proc.namespaceId &&\n            proc.name.startsWith(`${firstArgType.name}_`)\n          ) {\n            // It's a computed field, skip\n            return memo;\n          }\n\n          function makeField(forceList) {\n            const fieldName = forceList\n              ? inflection.functionQueryNameList(proc)\n              : inflection.functionQueryName(proc);\n            try {\n              memo = extend(\n                memo,\n                {\n                  [fieldName]: makeProcField(fieldName, proc, build, {\n                    fieldWithHooks,\n                    forceList,\n                  }),\n                },\n                `Adding query field for ${describePgEntity(\n                  proc\n                )}. You can rename this field with:\\n\\n  ${sqlCommentByAddingTags(\n                  proc,\n                  {\n                    name: \"newNameHere\",\n                  }\n                )}`\n              );\n            } catch (e) {\n              swallowError(e);\n            }\n          }\n          if (!proc.returnsSet || hasConnections) {\n            makeField(false);\n          }\n          if (proc.returnsSet && hasSimpleCollections) {\n            makeField(true);\n          }\n          return memo;\n        }, {}),\n      `Adding query procedures to root Query type`\n    );\n  });\n}: Plugin);\n"]}