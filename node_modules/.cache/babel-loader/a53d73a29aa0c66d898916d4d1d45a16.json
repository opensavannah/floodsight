{"ast":null,"code":"var _jsxFileName = \"/Users/carlvlewis/floodsight/src/components/Shared/CrossingMapPage/SelectedFeatureContainer.js\";\nimport React from 'react';\nimport { Layer, Feature, Popup } from 'react-mapbox-gl';\nimport SelectedCrossingContainer from 'components/Shared/CrossingMapPage/SelectedCrossingContainer';\nimport * as statusConstants from 'constants/StatusConstants';\nexport default function SelectedFeatureContainer(props) {\n  var selectedFeature = props.selectedFeature,\n      iconSize = props.iconSize,\n      mobile = props.mobile,\n      showDetailsOnMobile = props.showDetailsOnMobile,\n      setShowDetailsOnMobile = props.setShowDetailsOnMobile,\n      setDetailsHeight = props.setDetailsHeight,\n      onDash = props.onDash;\n  var featureProperties, featureCoordinates, layerId, iconImage, popupComponent; // iconImages are taken from mapbox\n\n  if (selectedFeature) {\n    if (selectedFeature.type === \"Crossing\") {\n      var selectedCrossing = selectedFeature.data;\n\n      switch (selectedCrossing.latestStatusId) {\n        case statusConstants.OPEN:\n          layerId = \"selectedOpenCrossing\";\n          iconImage = \"marker-open-\".concat(iconSize);\n          break;\n\n        case statusConstants.CLOSED:\n          layerId = \"selectedClosedCrossing\";\n          iconImage = \"marker-closed-\".concat(iconSize);\n          break;\n\n        case statusConstants.CAUTION:\n          layerId = \"selectedCautionCrossing\";\n          iconImage = \"marker-caution-\".concat(iconSize);\n          break;\n\n        case statusConstants.LONGTERM:\n          layerId = \"selectedLongtermCrossing\";\n          iconImage = \"marker-long-term-\".concat(iconSize);\n          break;\n\n        default:\n          return null;\n      }\n\n      featureCoordinates = selectedCrossing.coordinates;\n      featureProperties = {\n        latestStatusId: selectedCrossing.latestStatusId,\n        crossingId: selectedCrossing.id,\n        geojson: selectedCrossing.geojson\n      };\n      popupComponent = React.createElement(Popup, {\n        coordinates: featureCoordinates,\n        anchor: \"bottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, selectedCrossing.name, mobile && !showDetailsOnMobile && selectedCrossing.latestStatusId !== statusConstants.OPEN && React.createElement(\"button\", {\n        onClick: function onClick() {\n          return setShowDetailsOnMobile();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Details\"), showDetailsOnMobile && React.createElement(SelectedCrossingContainer, {\n        crossingId: selectedCrossing.id,\n        isMobileDetails: true,\n        onDash: onDash,\n        setHeight: function setHeight(crossingId, statusReasonId, reopenDate, indefiniteClosure, notes) {\n          return setDetailsHeight(crossingId, statusReasonId, reopenDate, indefiniteClosure, notes);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      })));\n    } else if (selectedFeature.type === \"Camera\") {\n      var selectedCamera = selectedFeature.data;\n      layerId = 'selectedCamera';\n      iconImage = \"camera-\".concat(iconSize);\n      featureCoordinates = selectedCamera.coordinates;\n      featureProperties = {\n        cameraId: selectedCamera.id,\n        geojson: selectedCamera.geojson,\n        cameraName: selectedCamera.name\n      };\n      popupComponent = React.createElement(Popup, {\n        coordinates: featureCoordinates,\n        anchor: \"bottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, selectedCamera.name, mobile && React.createElement(\"div\", {\n        className: \"MobileDetails__container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        alt: selectedCamera.name,\n        style: {\n          width: '200px'\n        },\n        src: selectedCamera.latestPhotoUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }))));\n    } else if (selectedFeature.type === \"Misc\") {\n      var selectedMiscLocation = selectedFeature.data;\n      layerId = 'selectedMiscLocation';\n      iconImage = 'selected-location-marker';\n      featureCoordinates = selectedMiscLocation.coordinates;\n      featureProperties = {};\n      popupComponent = React.createElement(Popup, {\n        coordinates: featureCoordinates,\n        anchor: \"bottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, selectedMiscLocation.name));\n    }\n  } else {\n    return null;\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(Layer, {\n    type: \"symbol\",\n    id: layerId,\n    layout: {\n      'icon-image': \"\".concat(iconImage),\n      'icon-allow-overlap': true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(Feature, {\n    key: 1,\n    coordinates: featureCoordinates,\n    properties: featureProperties,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  })), popupComponent);\n}","map":{"version":3,"sources":["/Users/carlvlewis/floodsight/src/components/Shared/CrossingMapPage/SelectedFeatureContainer.js"],"names":["React","Layer","Feature","Popup","SelectedCrossingContainer","statusConstants","SelectedFeatureContainer","props","selectedFeature","iconSize","mobile","showDetailsOnMobile","setShowDetailsOnMobile","setDetailsHeight","onDash","featureProperties","featureCoordinates","layerId","iconImage","popupComponent","type","selectedCrossing","data","latestStatusId","OPEN","CLOSED","CAUTION","LONGTERM","coordinates","crossingId","id","geojson","name","statusReasonId","reopenDate","indefiniteClosure","notes","selectedCamera","cameraId","cameraName","width","latestPhotoUrl","selectedMiscLocation"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Layer, Feature, Popup } from 'react-mapbox-gl';\n\nimport SelectedCrossingContainer from 'components/Shared/CrossingMapPage/SelectedCrossingContainer';\nimport * as statusConstants from 'constants/StatusConstants';\n\nexport default function SelectedFeatureContainer(props){\n  const {\n    selectedFeature,\n    iconSize,\n    mobile,\n    showDetailsOnMobile,\n    setShowDetailsOnMobile,\n    setDetailsHeight,\n    onDash,\n  } = props;\n\n  let featureProperties, featureCoordinates, layerId, iconImage, popupComponent;\n  // iconImages are taken from mapbox\n\n  if (selectedFeature) {\n    if (selectedFeature.type === \"Crossing\") {\n      const selectedCrossing = selectedFeature.data;\n      switch(selectedCrossing.latestStatusId) {\n        case statusConstants.OPEN:\n          layerId = \"selectedOpenCrossing\";\n          iconImage = `marker-open-${iconSize}`;\n          break;\n        case statusConstants.CLOSED:\n          layerId = \"selectedClosedCrossing\";\n          iconImage = `marker-closed-${iconSize}`;\n          break;\n        case statusConstants.CAUTION:\n          layerId = \"selectedCautionCrossing\";\n          iconImage = `marker-caution-${iconSize}`;\n          break;\n        case statusConstants.LONGTERM:\n          layerId = \"selectedLongtermCrossing\";\n          iconImage = `marker-long-term-${iconSize}`;\n          break;\n        default:\n          return null;\n      }\n      featureCoordinates = selectedCrossing.coordinates;\n      featureProperties = {\n        latestStatusId: selectedCrossing.latestStatusId,\n        crossingId: selectedCrossing.id,\n        geojson: selectedCrossing.geojson,\n      }\n      popupComponent = (\n        <Popup\n          coordinates={featureCoordinates}\n          anchor=\"bottom\"\n        >\n          <div>\n            {selectedCrossing.name}\n            {(mobile && !showDetailsOnMobile &&\n              selectedCrossing.latestStatusId !== statusConstants.OPEN\n            ) && (\n              <button onClick={() => setShowDetailsOnMobile()}>\n                Details\n              </button>\n            )}\n            {showDetailsOnMobile && (\n              <SelectedCrossingContainer\n                crossingId={selectedCrossing.id}\n                isMobileDetails={true}\n                onDash={onDash}\n                setHeight={(\n                  crossingId,\n                  statusReasonId,\n                  reopenDate,\n                  indefiniteClosure,\n                  notes,\n                ) =>\n                  setDetailsHeight(\n                    crossingId,\n                    statusReasonId,\n                    reopenDate,\n                    indefiniteClosure,\n                    notes,\n                  )\n                }\n              />\n            )}\n          </div>\n        </Popup>\n      );\n    } else if (selectedFeature.type === \"Camera\") {\n      const selectedCamera = selectedFeature.data;\n      layerId = 'selectedCamera';\n      iconImage = `camera-${iconSize}`;\n      featureCoordinates = selectedCamera.coordinates;\n      featureProperties = {\n        cameraId: selectedCamera.id,\n        geojson: selectedCamera.geojson,\n        cameraName: selectedCamera.name,\n      }\n      popupComponent = (\n        <Popup\n          coordinates={featureCoordinates}\n          anchor=\"bottom\"\n        >\n          <div>\n            {selectedCamera.name}\n            {mobile && (\n              <div className=\"MobileDetails__container\">\n                <img\n                  alt={selectedCamera.name}\n                  style={{ width: '200px' }}\n                  src={selectedCamera.latestPhotoUrl}\n                />\n              </div>\n            )}\n          </div>\n        </Popup>\n      );\n    } else if (selectedFeature.type === \"Misc\") {\n      const selectedMiscLocation = selectedFeature.data;\n      layerId = 'selectedMiscLocation';\n      iconImage = 'selected-location-marker'\n      featureCoordinates = selectedMiscLocation.coordinates;\n      featureProperties = {};\n      popupComponent = (\n        <Popup\n          coordinates={featureCoordinates}\n          anchor=\"bottom\"\n        >\n          <div>\n            {selectedMiscLocation.name}\n          </div>\n        </Popup>\n      );\n    }\n  } else {\n    return null\n  }\n\n  return (\n    <div>\n      <Layer\n        type=\"symbol\"\n        id={layerId}\n        layout={{\n          'icon-image': `${iconImage}`,\n          'icon-allow-overlap': true,\n        }}\n      >\n        <Feature\n          key={1}\n          coordinates={featureCoordinates}\n          properties={featureProperties}\n        />\n      </Layer>\n      {popupComponent}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}