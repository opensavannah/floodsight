{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLLanguageService = undefined;\n\nvar _graphql = require('graphql');\n\nvar _getAutocompleteSuggestions2 = require('./getAutocompleteSuggestions');\n\nvar _getHoverInformation2 = require('./getHoverInformation');\n\nvar _getDiagnostics = require('./getDiagnostics');\n\nvar _getDefinition = require('./getDefinition');\n\nvar _graphqlLanguageServiceUtils = require('graphql-language-service-utils');\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n *  Copyright (c) Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  \n */\n\n\nvar FRAGMENT_DEFINITION = _graphql.Kind.FRAGMENT_DEFINITION,\n    OBJECT_TYPE_DEFINITION = _graphql.Kind.OBJECT_TYPE_DEFINITION,\n    INTERFACE_TYPE_DEFINITION = _graphql.Kind.INTERFACE_TYPE_DEFINITION,\n    ENUM_TYPE_DEFINITION = _graphql.Kind.ENUM_TYPE_DEFINITION,\n    UNION_TYPE_DEFINITION = _graphql.Kind.UNION_TYPE_DEFINITION,\n    SCALAR_TYPE_DEFINITION = _graphql.Kind.SCALAR_TYPE_DEFINITION,\n    INPUT_OBJECT_TYPE_DEFINITION = _graphql.Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    SCALAR_TYPE_EXTENSION = _graphql.Kind.SCALAR_TYPE_EXTENSION,\n    OBJECT_TYPE_EXTENSION = _graphql.Kind.OBJECT_TYPE_EXTENSION,\n    INTERFACE_TYPE_EXTENSION = _graphql.Kind.INTERFACE_TYPE_EXTENSION,\n    UNION_TYPE_EXTENSION = _graphql.Kind.UNION_TYPE_EXTENSION,\n    ENUM_TYPE_EXTENSION = _graphql.Kind.ENUM_TYPE_EXTENSION,\n    INPUT_OBJECT_TYPE_EXTENSION = _graphql.Kind.INPUT_OBJECT_TYPE_EXTENSION,\n    DIRECTIVE_DEFINITION = _graphql.Kind.DIRECTIVE_DEFINITION,\n    FRAGMENT_SPREAD = _graphql.Kind.FRAGMENT_SPREAD,\n    OPERATION_DEFINITION = _graphql.Kind.OPERATION_DEFINITION,\n    NAMED_TYPE = _graphql.Kind.NAMED_TYPE;\n\nvar GraphQLLanguageService = exports.GraphQLLanguageService = function () {\n  function GraphQLLanguageService(cache) {\n    _classCallCheck(this, GraphQLLanguageService);\n\n    this._graphQLCache = cache;\n    this._graphQLConfig = cache.getGraphQLConfig();\n  }\n\n  GraphQLLanguageService.prototype.getDiagnostics = function getDiagnostics(query, uri, isRelayCompatMode) {\n    var queryHasExtensions, projectConfig, schemaPath, queryAST, range, source, fragmentDefinitions, fragmentDependencies, dependenciesSource, validationAst, customRules, customRulesModulePath, rulesPath, schema;\n    return _regeneratorRuntime.async(function getDiagnostics$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // Perform syntax diagnostics first, as this doesn't require\n            // schema/fragment definitions, even the project configuration.\n            queryHasExtensions = false;\n            projectConfig = this._graphQLConfig.getConfigForFile(uri);\n            schemaPath = projectConfig.schemaPath;\n            _context.prev = 3;\n            queryAST = (0, _graphql.parse)(query);\n\n            if (!schemaPath || uri !== schemaPath) {\n              queryHasExtensions = queryAST.definitions.some(function (definition) {\n                switch (definition.kind) {\n                  case OBJECT_TYPE_DEFINITION:\n                  case INTERFACE_TYPE_DEFINITION:\n                  case ENUM_TYPE_DEFINITION:\n                  case UNION_TYPE_DEFINITION:\n                  case SCALAR_TYPE_DEFINITION:\n                  case INPUT_OBJECT_TYPE_DEFINITION:\n                  case SCALAR_TYPE_EXTENSION:\n                  case OBJECT_TYPE_EXTENSION:\n                  case INTERFACE_TYPE_EXTENSION:\n                  case UNION_TYPE_EXTENSION:\n                  case ENUM_TYPE_EXTENSION:\n                  case INPUT_OBJECT_TYPE_EXTENSION:\n                  case DIRECTIVE_DEFINITION:\n                    return true;\n                }\n\n                return false;\n              });\n            }\n\n            _context.next = 12;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context['catch'](3);\n            range = (0, _getDiagnostics.getRange)(_context.t0.locations[0], query);\n            return _context.abrupt('return', [{\n              severity: _getDiagnostics.SEVERITY.ERROR,\n              message: _context.t0.message,\n              source: 'GraphQL: Syntax',\n              range: range\n            }]);\n\n          case 12:\n            // If there's a matching config, proceed to prepare to run validation\n            source = query;\n            _context.next = 15;\n            return _regeneratorRuntime.awrap(this._graphQLCache.getFragmentDefinitions(projectConfig));\n\n          case 15:\n            fragmentDefinitions = _context.sent;\n            _context.next = 18;\n            return _regeneratorRuntime.awrap(this._graphQLCache.getFragmentDependencies(query, fragmentDefinitions));\n\n          case 18:\n            fragmentDependencies = _context.sent;\n            dependenciesSource = fragmentDependencies.reduce(function (prev, cur) {\n              return prev + ' ' + (0, _graphql.print)(cur.definition);\n            }, '');\n            source = source + ' ' + dependenciesSource;\n            validationAst = null;\n            _context.prev = 22;\n            validationAst = (0, _graphql.parse)(source);\n            _context.next = 29;\n            break;\n\n          case 26:\n            _context.prev = 26;\n            _context.t1 = _context['catch'](22);\n            return _context.abrupt('return', []);\n\n          case 29:\n            // Check if there are custom validation rules to be used\n            customRules = void 0;\n            customRulesModulePath = projectConfig.extensions.customValidationRules;\n\n            if (customRulesModulePath) {\n              /* eslint-disable no-implicit-coercion */\n              rulesPath = require.resolve('' + customRulesModulePath);\n\n              if (rulesPath) {\n                customRules = require('' + rulesPath)(this._graphQLConfig);\n              }\n              /* eslint-enable no-implicit-coercion */\n\n            }\n\n            _context.next = 34;\n            return _regeneratorRuntime.awrap(this._graphQLCache.getSchema(projectConfig.projectName, queryHasExtensions).catch(function () {\n              return null;\n            }));\n\n          case 34:\n            schema = _context.sent;\n\n            if (schema) {\n              _context.next = 37;\n              break;\n            }\n\n            return _context.abrupt('return', []);\n\n          case 37:\n            return _context.abrupt('return', (0, _getDiagnostics.validateQuery)(validationAst, schema, customRules, isRelayCompatMode));\n\n          case 38:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, null, this, [[3, 8], [22, 26]]);\n  };\n\n  GraphQLLanguageService.prototype.getAutocompleteSuggestions = function getAutocompleteSuggestions(query, position, filePath) {\n    var projectConfig, schema;\n    return _regeneratorRuntime.async(function getAutocompleteSuggestions$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            projectConfig = this._graphQLConfig.getConfigForFile(filePath);\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(this._graphQLCache.getSchema(projectConfig.projectName).catch(function () {\n              return null;\n            }));\n\n          case 3:\n            schema = _context2.sent;\n\n            if (!schema) {\n              _context2.next = 6;\n              break;\n            }\n\n            return _context2.abrupt('return', (0, _getAutocompleteSuggestions2.getAutocompleteSuggestions)(schema, query, position));\n\n          case 6:\n            return _context2.abrupt('return', []);\n\n          case 7:\n          case 'end':\n            return _context2.stop();\n        }\n      }\n    }, null, this);\n  };\n\n  GraphQLLanguageService.prototype.getHoverInformation = function getHoverInformation(query, position, filePath) {\n    var projectConfig, schema;\n    return _regeneratorRuntime.async(function getHoverInformation$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            projectConfig = this._graphQLConfig.getConfigForFile(filePath);\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(this._graphQLCache.getSchema(projectConfig.projectName).catch(function () {\n              return null;\n            }));\n\n          case 3:\n            schema = _context3.sent;\n\n            if (!schema) {\n              _context3.next = 6;\n              break;\n            }\n\n            return _context3.abrupt('return', (0, _getHoverInformation2.getHoverInformation)(schema, query, position));\n\n          case 6:\n            return _context3.abrupt('return', '');\n\n          case 7:\n          case 'end':\n            return _context3.stop();\n        }\n      }\n    }, null, this);\n  };\n\n  GraphQLLanguageService.prototype.getDefinition = function getDefinition(query, position, filePath) {\n    var projectConfig, ast, node;\n    return _regeneratorRuntime.async(function getDefinition$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            projectConfig = this._graphQLConfig.getConfigForFile(filePath);\n            ast = void 0;\n            _context4.prev = 2;\n            ast = (0, _graphql.parse)(query);\n            _context4.next = 9;\n            break;\n\n          case 6:\n            _context4.prev = 6;\n            _context4.t0 = _context4['catch'](2);\n            return _context4.abrupt('return', null);\n\n          case 9:\n            node = (0, _graphqlLanguageServiceUtils.getASTNodeAtPosition)(query, ast, position);\n\n            if (!node) {\n              _context4.next = 17;\n              break;\n            }\n\n            _context4.t1 = node.kind;\n            _context4.next = _context4.t1 === FRAGMENT_SPREAD ? 14 : _context4.t1 === FRAGMENT_DEFINITION ? 15 : _context4.t1 === OPERATION_DEFINITION ? 15 : _context4.t1 === NAMED_TYPE ? 16 : 17;\n            break;\n\n          case 14:\n            return _context4.abrupt('return', this._getDefinitionForFragmentSpread(query, ast, node, filePath, projectConfig));\n\n          case 15:\n            return _context4.abrupt('return', (0, _getDefinition.getDefinitionQueryResultForDefinitionNode)(filePath, query, node));\n\n          case 16:\n            return _context4.abrupt('return', this._getDefinitionForNamedType(query, ast, node, filePath, projectConfig));\n\n          case 17:\n            return _context4.abrupt('return', null);\n\n          case 18:\n          case 'end':\n            return _context4.stop();\n        }\n      }\n    }, null, this, [[2, 6]]);\n  };\n\n  GraphQLLanguageService.prototype._getDefinitionForNamedType = function _getDefinitionForNamedType(query, ast, node, filePath, projectConfig) {\n    var objectTypeDefinitions, dependencies, localObjectTypeDefinitions, typeCastedDefs, localOperationDefinationInfos, result;\n    return _regeneratorRuntime.async(function _getDefinitionForNamedType$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _regeneratorRuntime.awrap(this._graphQLCache.getObjectTypeDefinitions(projectConfig));\n\n          case 2:\n            objectTypeDefinitions = _context5.sent;\n            _context5.next = 5;\n            return _regeneratorRuntime.awrap(this._graphQLCache.getObjectTypeDependenciesForAST(ast, objectTypeDefinitions));\n\n          case 5:\n            dependencies = _context5.sent;\n            localObjectTypeDefinitions = ast.definitions.filter(function (definition) {\n              return definition.kind === OBJECT_TYPE_DEFINITION || definition.kind === INPUT_OBJECT_TYPE_DEFINITION || definition.kind === ENUM_TYPE_DEFINITION;\n            });\n            typeCastedDefs = localObjectTypeDefinitions;\n            localOperationDefinationInfos = typeCastedDefs.map(function (definition) {\n              return {\n                filePath: filePath,\n                content: query,\n                definition: definition\n              };\n            });\n            _context5.next = 11;\n            return _regeneratorRuntime.awrap((0, _getDefinition.getDefinitionQueryResultForNamedType)(query, node, dependencies.concat(localOperationDefinationInfos)));\n\n          case 11:\n            result = _context5.sent;\n            return _context5.abrupt('return', result);\n\n          case 13:\n          case 'end':\n            return _context5.stop();\n        }\n      }\n    }, null, this);\n  };\n\n  GraphQLLanguageService.prototype._getDefinitionForFragmentSpread = function _getDefinitionForFragmentSpread(query, ast, node, filePath, projectConfig) {\n    var fragmentDefinitions, dependencies, localFragDefinitions, typeCastedDefs, localFragInfos, result;\n    return _regeneratorRuntime.async(function _getDefinitionForFragmentSpread$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return _regeneratorRuntime.awrap(this._graphQLCache.getFragmentDefinitions(projectConfig));\n\n          case 2:\n            fragmentDefinitions = _context6.sent;\n            _context6.next = 5;\n            return _regeneratorRuntime.awrap(this._graphQLCache.getFragmentDependenciesForAST(ast, fragmentDefinitions));\n\n          case 5:\n            dependencies = _context6.sent;\n            localFragDefinitions = ast.definitions.filter(function (definition) {\n              return definition.kind === FRAGMENT_DEFINITION;\n            });\n            typeCastedDefs = localFragDefinitions;\n            localFragInfos = typeCastedDefs.map(function (definition) {\n              return {\n                filePath: filePath,\n                content: query,\n                definition: definition\n              };\n            });\n            _context6.next = 11;\n            return _regeneratorRuntime.awrap((0, _getDefinition.getDefinitionQueryResultForFragmentSpread)(query, node, dependencies.concat(localFragInfos)));\n\n          case 11:\n            result = _context6.sent;\n            return _context6.abrupt('return', result);\n\n          case 13:\n          case 'end':\n            return _context6.stop();\n        }\n      }\n    }, null, this);\n  };\n\n  return GraphQLLanguageService;\n}();","map":null,"metadata":{},"sourceType":"script"}