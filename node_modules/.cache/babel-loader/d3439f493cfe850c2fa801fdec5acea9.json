{"ast":null,"code":"import _classCallCheck from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/carlvlewis/floodsight/src/components/Dashboard/CrossingStatusHistory/CrossingStatusHistorySpreadsheetModal.js\";\nimport { graphql } from 'react-apollo';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { get, size } from 'lodash';\nimport { CSVLink } from 'react-csv';\nimport FontAwesome from 'react-fontawesome';\nimport { logError } from 'services/logger';\nimport { dateToTimestampWithTimezone } from 'services/dateHelpers';\nimport Modal from 'components/Shared/Modal';\nimport ModalErrorMessage from 'components/Shared/Modal/ModalErrorMessage';\nimport ButtonSecondary from 'components/Shared/Button/ButtonSecondary';\nimport StatusHistoryQuery from 'components/Dashboard/CrossingListPage/queries/statusHistoryQuery';\nimport './CrossingStatusHistorySpreadsheetLink.css';\n\nvar CrossingStatusHistorySpreadsheetModal =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CrossingStatusHistorySpreadsheetModal, _Component);\n\n  function CrossingStatusHistorySpreadsheetModal() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CrossingStatusHistorySpreadsheetModal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CrossingStatusHistorySpreadsheetModal)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      errorMessage: null\n    };\n    return _this;\n  }\n\n  _createClass(CrossingStatusHistorySpreadsheetModal, [{\n    key: \"componentDidCatch\",\n    value: function componentDidCatch(err) {\n      logError(err);\n      this.setState({\n        errorMessage: err.message\n      });\n    }\n  }, {\n    key: \"generateCsv\",\n    value: function generateCsv() {\n      try {\n        var loading = !this.props.data || this.props.data.loading;\n        if (loading) return 'loading';\n        var history = this.props.data.getStatusUpdateHistory.edges;\n        var headers = [['Crossing Name', 'Crossing Address', 'Date & Time', 'Status', 'Reason', 'Open Date', 'Closed Indefinitely', 'Notes', 'Coordinates', 'Community']];\n        return headers.concat(history.map(function (update) {\n          var _update$node = update.node,\n              crossingName = _update$node.crossingName,\n              crossingHumanAddress = _update$node.crossingHumanAddress,\n              createdAt = _update$node.createdAt,\n              statusName = _update$node.statusName,\n              statusReasonName = _update$node.statusReasonName,\n              reopenDate = _update$node.reopenDate,\n              indefiniteClosure = _update$node.indefiniteClosure,\n              notes = _update$node.notes,\n              geojson = _update$node.geojson,\n              communities = _update$node.communities;\n          return [crossingName, crossingHumanAddress, createdAt, statusName, statusReasonName, reopenDate, indefiniteClosure, notes, JSON.parse(geojson).coordinates, communities.join(', ')];\n        }));\n      } catch (err) {\n        logError(err);\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _ref = !this.props.data || this.props.data.loading,\n          loading = _ref.loading;\n\n      var rowCount = size(get(this, 'props.data.getStatusUpdateHistory.edges', []));\n      return React.createElement(Modal, {\n        title: \"Crossing History CSV\",\n        isOpen: true,\n        onClose: this.props.onClose,\n        footer: React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, !loading && !this.state.errorMessage && React.createElement(CSVLink, {\n          className: \"Shared__button Shared__button--primary CrossingStatusHistorySpreadsheetLink__download-button\",\n          filename: 'statusHistory.csv',\n          data: this.generateCsv(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, \"Download CSV\"), React.createElement(ButtonSecondary, {\n          onClick: this.props.onClose,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, \"Cancel\")),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, loading && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Loading CSV\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(FontAwesome, {\n        name: \"spinner\",\n        size: \"lg\",\n        className: \"fa-spin\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }))), !loading && !this.state.errorMessage && rowCount && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Generated CSV file with \", rowCount, \" rows.\"), this.state.errorMessage && React.createElement(ModalErrorMessage, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, this.state.errorMessage));\n    }\n  }]);\n\n  return CrossingStatusHistorySpreadsheetModal;\n}(Component);\n\nCrossingStatusHistorySpreadsheetModal.propTypes = {\n  data: PropTypes.object,\n  onClose: PropTypes.func.isRequired,\n  crossingId: PropTypes.number,\n  communityId: PropTypes.number,\n  dateLowerBound: PropTypes.string,\n  dateUpperBound: PropTypes.string\n};\nexport default graphql(StatusHistoryQuery, {\n  options: function options(ownProps) {\n    return {\n      variables: {\n        communityId: ownProps.communityId,\n        crossingId: ownProps.crossingId,\n        dateLowerBound: dateToTimestampWithTimezone(ownProps.dateLowerBound),\n        dateUpperBound: dateToTimestampWithTimezone(ownProps.dateUpperBound),\n        idUpperBound: null,\n        rowLimit: null\n      }\n    };\n  }\n})(CrossingStatusHistorySpreadsheetModal);","map":{"version":3,"sources":["/Users/carlvlewis/floodsight/src/components/Dashboard/CrossingStatusHistory/CrossingStatusHistorySpreadsheetModal.js"],"names":["graphql","React","Component","PropTypes","get","size","CSVLink","FontAwesome","logError","dateToTimestampWithTimezone","Modal","ModalErrorMessage","ButtonSecondary","StatusHistoryQuery","CrossingStatusHistorySpreadsheetModal","args","state","errorMessage","err","setState","message","loading","props","data","history","getStatusUpdateHistory","edges","headers","concat","map","update","node","crossingName","crossingHumanAddress","createdAt","statusName","statusReasonName","reopenDate","indefiniteClosure","notes","geojson","communities","JSON","parse","coordinates","join","rowCount","onClose","generateCsv","propTypes","object","func","isRequired","crossingId","number","communityId","dateLowerBound","string","dateUpperBound","options","ownProps","variables","idUpperBound","rowLimit"],"mappings":"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","sourcesContent":["import { graphql } from 'react-apollo';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { get, size } from 'lodash';\nimport { CSVLink } from 'react-csv';\nimport FontAwesome from 'react-fontawesome';\n\nimport { logError } from 'services/logger';\nimport { dateToTimestampWithTimezone } from 'services/dateHelpers';\nimport Modal from 'components/Shared/Modal';\nimport ModalErrorMessage from 'components/Shared/Modal/ModalErrorMessage';\nimport ButtonSecondary from 'components/Shared/Button/ButtonSecondary';\nimport StatusHistoryQuery from 'components/Dashboard/CrossingListPage/queries/statusHistoryQuery';\n\nimport './CrossingStatusHistorySpreadsheetLink.css';\n\nclass CrossingStatusHistorySpreadsheetModal extends Component {\n  static propTypes = {\n    data: PropTypes.object,\n    onClose: PropTypes.func.isRequired,\n    crossingId: PropTypes.number,\n    communityId: PropTypes.number,\n    dateLowerBound: PropTypes.string,\n    dateUpperBound: PropTypes.string,\n  };\n\n  constructor(...args) {\n    super(...args);\n\n    this.state = {\n      errorMessage: null,\n    };\n  }\n\n  componentDidCatch(err) {\n    logError(err);\n    this.setState({ errorMessage: err.message });\n  }\n\n  generateCsv() {\n    try {\n      const loading = !this.props.data || this.props.data.loading;\n      if (loading) return 'loading';\n\n      const history = this.props.data.getStatusUpdateHistory.edges;\n\n      const headers = [\n        [\n          'Crossing Name',\n          'Crossing Address',\n          'Date & Time',\n          'Status',\n          'Reason',\n          'Open Date',\n          'Closed Indefinitely',\n          'Notes',\n          'Coordinates',\n          'Community'\n        ],\n      ];\n\n      return headers.concat(\n        history.map(update => {\n          const {\n            crossingName,\n            crossingHumanAddress,\n            createdAt,\n            statusName,\n            statusReasonName,\n            reopenDate,\n            indefiniteClosure,\n            notes,\n            geojson,\n            communities,\n          } = update.node;\n\n          return [\n            crossingName,\n            crossingHumanAddress,\n            createdAt,\n            statusName,\n            statusReasonName,\n            reopenDate,\n            indefiniteClosure,\n            notes,\n            JSON.parse(geojson).coordinates,\n            communities.join(', ')\n          ];\n        }),\n      );\n    } catch (err) {\n      logError(err);\n      this.setState({ errorMessage: err.message });\n    }\n  }\n\n  render() {\n    const { loading } = !this.props.data || this.props.data.loading;\n\n    const rowCount = size(get(this, 'props.data.getStatusUpdateHistory.edges', []));\n    return (\n      <Modal\n        title=\"Crossing History CSV\"\n        isOpen\n        onClose={this.props.onClose}\n        footer={\n          <div>\n            {!loading &&\n              !this.state.errorMessage && (\n                <CSVLink\n                  className=\"Shared__button Shared__button--primary CrossingStatusHistorySpreadsheetLink__download-button\"\n                  filename={'statusHistory.csv'}\n                  data={this.generateCsv()}\n                >\n                  Download CSV\n                </CSVLink>\n              )}\n            <ButtonSecondary onClick={this.props.onClose}>\n              Cancel\n            </ButtonSecondary>\n          </div>\n        }\n      >\n        {loading && (\n          <div>\n            <p>Loading CSV</p>\n            <div>\n              <FontAwesome name=\"spinner\" size=\"lg\" className=\"fa-spin\" />\n            </div>\n          </div>\n        )}\n        {!loading &&\n          !this.state.errorMessage &&\n          rowCount && <p>Generated CSV file with {rowCount} rows.</p>}\n        {this.state.errorMessage && (\n          <ModalErrorMessage>{this.state.errorMessage}</ModalErrorMessage>\n        )}\n      </Modal>\n    );\n  }\n}\n\nexport default graphql(StatusHistoryQuery, {\n  options: ownProps => ({\n    variables: {\n      communityId: ownProps.communityId,\n      crossingId: ownProps.crossingId,\n      dateLowerBound: dateToTimestampWithTimezone(ownProps.dateLowerBound),\n      dateUpperBound: dateToTimestampWithTimezone(ownProps.dateUpperBound),\n      idUpperBound: null,\n      rowLimit: null\n    }\n  }),\n})(CrossingStatusHistorySpreadsheetModal);\n"]},"metadata":{},"sourceType":"module"}