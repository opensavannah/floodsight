{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _toConsumableArray from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/carlvlewis/floodsight/src/components/Shared/ReportIncidentPage/index.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    allCommunities(orderBy: NAME_ASC) {\\n      nodes {\\n        id\\n        name\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Recaptcha from \"react-google-recaptcha\";\nimport { logError } from 'services/logger';\nimport ContentPage from 'components/Shared/ContentPage';\nimport ButtonPrimary from 'components/Shared/Button/ButtonPrimary';\nimport ButtonSecondary from 'components/Shared/Button/ButtonSecondary';\nimport TextArea from 'components/Shared/Form/TextArea';\nimport Checkbox from 'components/Shared/Form/Checkbox';\nimport IncidentLocationModal from './IncidentLocationModal';\nimport './ReportIncidentPage.css';\n\nvar Required = function Required() {\n  return React.createElement(\"span\", {\n    className: \"ReportIncidentPage__required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"Required*\");\n};\n\nvar Optional = function Optional() {\n  return React.createElement(\"span\", {\n    className: \"ReportIncidentPage__optional\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Optional\");\n};\n\nfunction toggleArrayItem(array, item) {\n  if (array.includes(item)) {\n    return array.filter(function (el) {\n      return el !== item;\n    });\n  }\n\n  return _toConsumableArray(array).concat([item]);\n}\n\nvar ReportIncidentPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ReportIncidentPage, _Component);\n\n  function ReportIncidentPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ReportIncidentPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ReportIncidentPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var res, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                e.preventDefault();\n\n                _this.setState({\n                  loading: true,\n                  errorMessage: ''\n                });\n\n                _context.next = 5;\n                return fetch(\"\".concat(process.env.REACT_APP_BACKEND_URL, \"/incident/report\"), {\n                  method: 'POST',\n                  body: JSON.stringify({\n                    notes: _this.state.notes,\n                    locationDescription: _this.state.locationDescription,\n                    latitude: _this.state.latitude,\n                    longitude: _this.state.longitude,\n                    communityIds: _this.state.communityIds,\n                    recaptchaResponse: _this.state.recaptchaResponse\n                  }),\n                  headers: new Headers({\n                    'Content-Type': 'application/json'\n                  })\n                });\n\n              case 5:\n                res = _context.sent;\n                _context.next = 8;\n                return res.json();\n\n              case 8:\n                data = _context.sent;\n\n                if (!data.errorMessage) {\n                  _context.next = 11;\n                  break;\n                }\n\n                throw new Error(data.errorMessage);\n\n              case 11:\n                _this.setState({\n                  usersNotifiedCount: data.usersNotifiedCount,\n                  createdReport: data.createdReport\n                });\n\n                _context.next = 18;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](0);\n                logError(_context.t0);\n\n                _this.setState({\n                  errorMessage: _context.t0.message\n                });\n\n              case 18:\n                _context.prev = 18;\n\n                _this.setState({\n                  loading: false\n                });\n\n                return _context.finish(18);\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 14, 18, 21]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.toggleCommunity = function (e) {\n      var communityId = Number(e.target.value);\n\n      _this.setState({\n        communityIds: toggleArrayItem(_this.state.communityIds, communityId)\n      });\n    };\n\n    _this.state = {\n      notes: '',\n      locationDescription: '',\n      latitude: null,\n      longitude: null,\n      communityIds: [],\n      errorMessage: '',\n      loading: false,\n      usersNotifiedCount: null,\n      createdReport: null,\n      isLocationModalOpen: false,\n      recaptchaResponse: null\n    };\n    return _this;\n  }\n\n  _createClass(ReportIncidentPage, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.createdReport) {\n        return React.createElement(ContentPage, {\n          className: \"ReportIncidentPage\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, \"Report Incident\"), React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, \"Incident report #\", this.state.createdReport.id, \" created\"), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, \"Notified \", this.state.usersNotifiedCount, \" community\", ' ', this.state.usersNotifiedCount === 1 ? 'administrators' : 'administrator', \".\"));\n      }\n\n      return React.createElement(ContentPage, {\n        className: \"ReportIncidentPage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Report Incident\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Report an incident such as flooding. Your report will be sent to the appropriate community administrators.\"), React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"What happened? \", React.createElement(Required, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      })), React.createElement(TextArea, {\n        rows: 3,\n        cols: 50,\n        id: \"incident-notes\",\n        name: \"incident-notes\",\n        value: this.state.notes,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            notes: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"Which communities should this incident be reported to?\", ' ', React.createElement(Required, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      })), React.createElement(\"fieldset\", {\n        value: this.state.notes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, this.props.data.allCommunities && this.props.data.allCommunities.nodes.map(function (community) {\n        return React.createElement(Checkbox, {\n          key: community.id,\n          value: community.id,\n          checked: _this2.state.communityIds.includes(community.id),\n          onChange: _this2.toggleCommunity,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, community.name);\n      }))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \"Where did this incident occur? \", React.createElement(Required, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(TextArea, {\n        rows: 3,\n        cols: 50,\n        id: \"incident-location-description\",\n        name: \"incident-location-description\",\n        value: this.state.locationDescription,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            locationDescription: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      })), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"Where on the map did this incident occurr? \", React.createElement(Optional, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      })), React.createElement(ButtonSecondary, {\n        className: \"ReportIncidentPage__location-btn\",\n        onClick: function onClick(e) {\n          e.preventDefault();\n\n          _this2.setState({\n            isLocationModalOpen: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, this.state.longitude ? 'Update location' : 'Choose location on map'), this.state.isLocationModalOpen && React.createElement(IncidentLocationModal, {\n        isOpen: this.state.isLocationModalOpen,\n        lngLat: this.state.longitude && [this.state.longitude, this.state.latitude],\n        onClose: function onClose() {\n          _this2.setState({\n            isLocationModalOpen: false\n          });\n        },\n        saveLngLat: function saveLngLat(lngLat) {\n          _this2.setState({\n            longitude: lngLat[0],\n            latitude: lngLat[1]\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"ReportIncidentPage__recaptcha\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(Recaptcha, {\n        sitekey: \"6LdUs3YUAAAAALEB7OGR-Gcozoa3xFPMFB5W6GvK\",\n        render: \"explicit\",\n        onChange: function onChange(recaptchaResponse) {\n          return _this2.setState({\n            recaptchaResponse: recaptchaResponse\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      })), this.state.errorMessage && React.createElement(\"div\", {\n        className: \"ReportIncidentPage__error-message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, this.state.errorMessage), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, React.createElement(ButtonPrimary, {\n        loading: this.state.loading,\n        onClick: this.onSubmit,\n        disabled: !this.state.notes || !this.state.communityIds.length || !this.state.locationDescription || !this.state.recaptchaResponse,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, \"Submit\"))));\n    }\n  }]);\n\n  return ReportIncidentPage;\n}(Component);\n\nexport default graphql(gql(_templateObject()))(ReportIncidentPage);","map":{"version":3,"sources":["/Users/carlvlewis/floodsight/src/components/Shared/ReportIncidentPage/index.js"],"names":["React","Component","graphql","gql","Recaptcha","logError","ContentPage","ButtonPrimary","ButtonSecondary","TextArea","Checkbox","IncidentLocationModal","Required","Optional","toggleArrayItem","array","item","includes","filter","el","ReportIncidentPage","args","onSubmit","e","preventDefault","setState","loading","errorMessage","fetch","process","env","REACT_APP_BACKEND_URL","method","body","JSON","stringify","notes","state","locationDescription","latitude","longitude","communityIds","recaptchaResponse","headers","Headers","res","json","data","Error","usersNotifiedCount","createdReport","message","toggleCommunity","communityId","Number","target","value","isLocationModalOpen","id","props","allCommunities","nodes","map","community","name","lngLat","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Recaptcha from \"react-google-recaptcha\";\n\nimport { logError } from 'services/logger';\n\nimport ContentPage from 'components/Shared/ContentPage';\nimport ButtonPrimary from 'components/Shared/Button/ButtonPrimary';\nimport ButtonSecondary from 'components/Shared/Button/ButtonSecondary';\nimport TextArea from 'components/Shared/Form/TextArea';\nimport Checkbox from 'components/Shared/Form/Checkbox';\n\nimport IncidentLocationModal from './IncidentLocationModal';\nimport './ReportIncidentPage.css';\n\nconst Required = () => (\n  <span className=\"ReportIncidentPage__required\">Required*</span>\n);\nconst Optional = () => (\n  <span className=\"ReportIncidentPage__optional\">Optional</span>\n);\n\nfunction toggleArrayItem(array, item) {\n  if (array.includes(item)) {\n    return array.filter(el => el !== item);\n  }\n  return [...array, item];\n}\n\nclass ReportIncidentPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.state = {\n      notes: '',\n      locationDescription: '',\n      latitude: null,\n      longitude: null,\n      communityIds: [],\n      errorMessage: '',\n      loading: false,\n      usersNotifiedCount: null,\n      createdReport: null,\n      isLocationModalOpen: false,\n      recaptchaResponse: null,\n    };\n  }\n\n  onSubmit = async e => {\n    try {\n      e.preventDefault();\n\n      this.setState({\n        loading: true,\n        errorMessage: '',\n      });\n\n      const res = await fetch(\n        `${process.env.REACT_APP_BACKEND_URL}/incident/report`,\n        {\n          method: 'POST',\n          body: JSON.stringify({\n            notes: this.state.notes,\n            locationDescription: this.state.locationDescription,\n            latitude: this.state.latitude,\n            longitude: this.state.longitude,\n            communityIds: this.state.communityIds,\n            recaptchaResponse: this.state.recaptchaResponse,\n          }),\n          headers: new Headers({\n            'Content-Type': 'application/json',\n          }),\n        },\n      );\n\n      const data = await res.json();\n\n      if (data.errorMessage) {\n        throw new Error(data.errorMessage);\n      }\n\n      this.setState({\n        usersNotifiedCount: data.usersNotifiedCount,\n        createdReport: data.createdReport,\n      });\n    } catch (err) {\n      logError(err);\n      this.setState({\n        errorMessage: err.message,\n      });\n    } finally {\n      this.setState({\n        loading: false,\n      });\n    }\n  };\n\n  toggleCommunity = e => {\n    const communityId = Number(e.target.value);\n    this.setState({\n      communityIds: toggleArrayItem(this.state.communityIds, communityId),\n    });\n  };\n\n  render() {\n    if (this.state.createdReport) {\n      return (\n        <ContentPage className=\"ReportIncidentPage\">\n          <h1>Report Incident</h1>\n          <h2>Incident report #{this.state.createdReport.id} created</h2>\n          <p>\n            Notified {this.state.usersNotifiedCount} community{' '}\n            {this.state.usersNotifiedCount === 1\n              ? 'administrators'\n              : 'administrator'}\n            .\n          </p>\n        </ContentPage>\n      );\n    }\n\n    return (\n      <ContentPage className=\"ReportIncidentPage\">\n        <h1>Report Incident</h1>\n        <p>\n          Report an incident such as flooding. Your report will be sent to the\n          appropriate community administrators.\n        </p>\n        <form onSubmit={this.onSubmit}>\n          <div>\n            <h2>\n              What happened? <Required />\n            </h2>\n            <TextArea\n              rows={3}\n              cols={50}\n              id=\"incident-notes\"\n              name=\"incident-notes\"\n              value={this.state.notes}\n              onChange={e => this.setState({ notes: e.target.value })}\n            />\n          </div>\n          <div>\n            <h2>\n              Which communities should this incident be reported to?{' '}\n              <Required />\n            </h2>\n            <fieldset value={this.state.notes}>\n              {this.props.data.allCommunities &&\n                this.props.data.allCommunities.nodes.map(community => (\n                  <Checkbox\n                    key={community.id}\n                    value={community.id}\n                    checked={this.state.communityIds.includes(community.id)}\n                    onChange={this.toggleCommunity}\n                  >\n                    {community.name}\n                  </Checkbox>\n                ))}\n            </fieldset>\n          </div>\n          <div>\n            <h2>\n              Where did this incident occur? <Required />\n            </h2>\n            <div>\n              <TextArea\n                rows={3}\n                cols={50}\n                id=\"incident-location-description\"\n                name=\"incident-location-description\"\n                value={this.state.locationDescription}\n                onChange={e =>\n                  this.setState({ locationDescription: e.target.value })\n                }\n              />\n            </div>\n            <h2>\n              Where on the map did this incident occurr? <Optional />\n            </h2>\n            <ButtonSecondary\n              className=\"ReportIncidentPage__location-btn\"\n              onClick={e => {\n                e.preventDefault();\n                this.setState({\n                  isLocationModalOpen: true,\n                });\n              }}\n            >\n              {this.state.longitude\n                ? 'Update location'\n                : 'Choose location on map'}\n            </ButtonSecondary>\n            {this.state.isLocationModalOpen && (\n              <IncidentLocationModal\n                isOpen={this.state.isLocationModalOpen}\n                lngLat={\n                  this.state.longitude && [\n                    this.state.longitude,\n                    this.state.latitude,\n                  ]\n                }\n                onClose={() => {\n                  this.setState({\n                    isLocationModalOpen: false,\n                  });\n                }}\n                saveLngLat={lngLat => {\n                  this.setState({\n                    longitude: lngLat[0],\n                    latitude: lngLat[1],\n                  });\n                }}\n              />\n            )}\n          </div>\n          <div className=\"ReportIncidentPage__recaptcha\">\n            <Recaptcha\n              sitekey=\"6LdUs3YUAAAAALEB7OGR-Gcozoa3xFPMFB5W6GvK\"\n              render=\"explicit\"\n              onChange={recaptchaResponse =>\n                this.setState({ recaptchaResponse })\n              }\n            />\n          </div>\n          {this.state.errorMessage && (\n            <div className=\"ReportIncidentPage__error-message\">\n              {this.state.errorMessage}\n            </div>\n          )}\n          <div>\n            <ButtonPrimary\n              loading={this.state.loading}\n              onClick={this.onSubmit}\n              disabled={\n                !this.state.notes ||\n                !this.state.communityIds.length ||\n                !this.state.locationDescription ||\n                !this.state.recaptchaResponse\n              }\n            >\n              Submit\n            </ButtonPrimary>\n          </div>\n        </form>\n      </ContentPage>\n    );\n  }\n}\n\nexport default graphql(gql`\n  query {\n    allCommunities(orderBy: NAME_ASC) {\n      nodes {\n        id\n        name\n      }\n    }\n  }\n`)(ReportIncidentPage);\n"]},"metadata":{},"sourceType":"module"}