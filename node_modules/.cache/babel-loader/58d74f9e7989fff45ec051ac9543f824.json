{"ast":null,"code":"import ApolloClient from 'apollo-client';\nimport { ApolloLink, from } from 'apollo-link';\nimport { createHttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { onError } from \"apollo-link-error\";\nimport { logError } from './logger';\nimport { isTokenValid } from './jwtHelper';\nvar httpLink = createHttpLink({\n  uri: \"\".concat(process.env.REACT_APP_BACKEND_URL, \"/graphql\")\n});\nvar errorLink = onError(function (_ref) {\n  var graphQLErrors = _ref.graphQLErrors,\n      networkError = _ref.networkError,\n      operation = _ref.operation,\n      forward = _ref.forward;\n\n  // TODO: make an error page for displaying all errors\n  if (graphQLErrors) {\n    graphQLErrors.forEach(function (err) {\n      if (err.name === \"JsonWebTokenError\" || err.message === \"invalid signature\") {\n        localStorage.removeItem('jwt_user_token');\n        window.location.reload();\n      } else {\n        logError(\"[GraphQL error]: Message: \".concat(err.message));\n      }\n    });\n  }\n\n  logError(\"networkError\", networkError);\n});\nvar jwtMiddleware = new ApolloLink(function (operation, forward) {\n  var token = localStorage.getItem('jwt_user_token');\n\n  if (token !== null && token !== 'null') {\n    if (!isTokenValid(token)) {\n      localStorage.removeItem('jwt_user_token');\n      window.location.reload();\n    } else {\n      operation.setContext({\n        headers: {\n          authorization: \"Bearer \".concat(token)\n        }\n      });\n    }\n  }\n\n  return forward(operation);\n});\nvar client = new ApolloClient({\n  link: from([jwtMiddleware, errorLink, httpLink]),\n  cache: new InMemoryCache()\n});\nexport default client;","map":{"version":3,"sources":["/Users/carlvlewis/floodsight/src/services/apolloClientService.js"],"names":["ApolloClient","ApolloLink","from","createHttpLink","InMemoryCache","onError","logError","isTokenValid","httpLink","uri","process","env","REACT_APP_BACKEND_URL","errorLink","graphQLErrors","networkError","operation","forward","forEach","err","name","message","localStorage","removeItem","window","location","reload","jwtMiddleware","token","getItem","setContext","headers","authorization","client","link","cache"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,eAAzB;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,aAAjC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,QAAT,QAAyB,UAAzB;AAEA,SAASC,YAAT,QAA6B,aAA7B;AAEA,IAAMC,QAAQ,GAAGL,cAAc,CAAC;AAC9BM,EAAAA,GAAG,YAAKC,OAAO,CAACC,GAAR,CAAYC,qBAAjB;AAD2B,CAAD,CAA/B;AAIA,IAAMC,SAAS,GAAGR,OAAO,CAAC,gBAAyD;AAAA,MAAtDS,aAAsD,QAAtDA,aAAsD;AAAA,MAAvCC,YAAuC,QAAvCA,YAAuC;AAAA,MAAzBC,SAAyB,QAAzBA,SAAyB;AAAA,MAAdC,OAAc,QAAdA,OAAc;;AACjF;AACA,MAAIH,aAAJ,EAAmB;AACjBA,IAAAA,aAAa,CAACI,OAAd,CAAsB,UAACC,GAAD,EAAS;AAC7B,UAAKA,GAAG,CAACC,IAAJ,KAAa,mBAAd,IAAuCD,GAAG,CAACE,OAAJ,KAAgB,mBAA3D,EAAiF;AAC/EC,QAAAA,YAAY,CAACC,UAAb,CAAwB,gBAAxB;AACAC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,OAHD,MAGO;AACLpB,QAAAA,QAAQ,qCAA8Ba,GAAG,CAACE,OAAlC,EAAR;AACD;AACF,KAPD;AAQD;;AACDf,EAAAA,QAAQ,CAAC,cAAD,EAAiBS,YAAjB,CAAR;AACD,CAbwB,CAAzB;AAeA,IAAMY,aAAa,GAAG,IAAI1B,UAAJ,CAAe,UAACe,SAAD,EAAYC,OAAZ,EAAwB;AAC3D,MAAMW,KAAK,GAAGN,YAAY,CAACO,OAAb,CAAqB,gBAArB,CAAd;;AAEA,MAAID,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,MAAhC,EAAwC;AACtC,QAAI,CAACrB,YAAY,CAACqB,KAAD,CAAjB,EAA0B;AACxBN,MAAAA,YAAY,CAACC,UAAb,CAAwB,gBAAxB;AACAC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,KAHD,MAGO;AACLV,MAAAA,SAAS,CAACc,UAAV,CAAqB;AACnBC,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,mBAAYJ,KAAZ;AADN;AADU,OAArB;AAKD;AACF;;AAED,SAAOX,OAAO,CAACD,SAAD,CAAd;AACD,CAjBqB,CAAtB;AAmBA,IAAMiB,MAAM,GAAG,IAAIjC,YAAJ,CAAiB;AAC9BkC,EAAAA,IAAI,EAAEhC,IAAI,CAAC,CAACyB,aAAD,EAAgBd,SAAhB,EAA2BL,QAA3B,CAAD,CADoB;AAE9B2B,EAAAA,KAAK,EAAE,IAAI/B,aAAJ;AAFuB,CAAjB,CAAf;AAKA,eAAe6B,MAAf","sourcesContent":["import ApolloClient from 'apollo-client';\nimport { ApolloLink, from } from 'apollo-link';\nimport { createHttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { onError } from \"apollo-link-error\";\nimport { logError } from './logger';\n\nimport { isTokenValid } from './jwtHelper';\n\nconst httpLink = createHttpLink({\n  uri: `${process.env.REACT_APP_BACKEND_URL}/graphql`,\n});\n\nconst errorLink = onError(({ graphQLErrors, networkError, operation, forward }) => {\n  // TODO: make an error page for displaying all errors\n  if (graphQLErrors) {\n    graphQLErrors.forEach((err) => {\n      if ((err.name === \"JsonWebTokenError\") || (err.message === \"invalid signature\")) {\n        localStorage.removeItem('jwt_user_token');\n        window.location.reload();\n      } else {\n        logError(`[GraphQL error]: Message: ${err.message}`)\n      }\n    });\n  }\n  logError(\"networkError\", networkError);\n});\n\nconst jwtMiddleware = new ApolloLink((operation, forward) => {\n  const token = localStorage.getItem('jwt_user_token');\n\n  if (token !== null && token !== 'null') {\n    if (!isTokenValid(token)) {\n      localStorage.removeItem('jwt_user_token');\n      window.location.reload();\n    } else {\n      operation.setContext({\n        headers: {\n          authorization: `Bearer ${token}`,\n        },\n      });\n    }\n  }\n\n  return forward(operation);\n});\n\nconst client = new ApolloClient({\n  link: from([jwtMiddleware, errorLink, httpLink]),\n  cache: new InMemoryCache(),\n});\n\nexport default client;\n"]},"metadata":{},"sourceType":"module"}