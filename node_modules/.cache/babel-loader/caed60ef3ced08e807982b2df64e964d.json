{"ast":null,"code":"import _classCallCheck from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/carlvlewis/floodsight/src/components/Shared/DatePicker/index.js\";\nimport React, { Component } from 'react';\nimport Flatpickr from 'react-flatpickr';\nimport moment from 'moment';\nimport 'flatpickr/dist/themes/material_blue.css';\nimport 'components/Shared/DatePicker/DatePicker.css';\nimport Emoji from 'components/Shared/Emoji';\nimport { dateToString } from 'components/../services/dateHelpers';\n\nvar DatePicker =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DatePicker, _Component);\n\n  function DatePicker() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DatePicker);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DatePicker)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleDateChange = function (date) {\n      if (date[0]) {\n        _this.props.onChange(dateToString(date[0]));\n      } else {\n        _this.props.onChange(_this.props.date);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(DatePicker, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          date = _this$props.date,\n          checkForExpiration = _this$props.checkForExpiration,\n          maxDate = _this$props.maxDate,\n          minDate = _this$props.minDate;\n      var options = {\n        dateFormat: 'Y-m-d',\n        enableTime: false,\n        wrap: true,\n        allowInput: true\n      };\n      var isExpired = false;\n\n      if (checkForExpiration) {\n        isExpired = moment(this.props.reopenDate).isBefore(moment(moment.now()).format('YYYY-MM-DD'));\n        options.minDate = 'today';\n      } else {\n        options.maxDate = maxDate || null;\n        options.minDate = minDate || null;\n      }\n\n      return React.createElement(Flatpickr, {\n        className: \"flatpickr\",\n        options: options,\n        value: date,\n        onChange: function onChange(date) {\n          return _this2.handleDateChange(date);\n        },\n        onClose: function onClose(date) {\n          return _this2.handleDateChange(date);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"expired-reopen-date \".concat(!isExpired && 'eliminated'),\n        \"data-toggle\": true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, date), React.createElement(\"input\", {\n        className: \"flatpickr-input-box \".concat(isExpired && 'hidden-input-box'),\n        type: \"text\",\n        \"data-input\": true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"flatpickr-input-button\",\n        title: \"toggle\",\n        \"data-toggle\": true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(Emoji, {\n        symbol: \"\\uD83D\\uDCC5\",\n        label: \"calendar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return DatePicker;\n}(Component);\n\nexport { DatePicker as default };","map":{"version":3,"sources":["/Users/carlvlewis/floodsight/src/components/Shared/DatePicker/index.js"],"names":["React","Component","Flatpickr","moment","Emoji","dateToString","DatePicker","handleDateChange","date","props","onChange","checkForExpiration","maxDate","minDate","options","dateFormat","enableTime","wrap","allowInput","isExpired","reopenDate","isBefore","now","format"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAO,yCAAP;AACA,OAAO,6CAAP;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,SAAQC,YAAR,QAA2B,oCAA3B;;IAEqBC,U;;;;;;;;;;;;;;;;;;UAEnBC,gB,GAAmB,UAACC,IAAD,EAAU;AAC3B,UAAIA,IAAI,CAAC,CAAD,CAAR,EAAa;AACX,cAAKC,KAAL,CAAWC,QAAX,CAAoBL,YAAY,CAACG,IAAI,CAAC,CAAD,CAAL,CAAhC;AACD,OAFD,MAEO;AACL,cAAKC,KAAL,CAAWC,QAAX,CAAoB,MAAKD,KAAL,CAAWD,IAA/B;AACD;AACF,K;;;;;;;6BAEQ;AAAA;;AAAA,wBAC8C,KAAKC,KADnD;AAAA,UACAD,IADA,eACAA,IADA;AAAA,UACMG,kBADN,eACMA,kBADN;AAAA,UAC0BC,OAD1B,eAC0BA,OAD1B;AAAA,UACmCC,OADnC,eACmCA,OADnC;AAEP,UAAMC,OAAO,GAAG;AACdC,QAAAA,UAAU,EAAE,OADE;AAEdC,QAAAA,UAAU,EAAE,KAFE;AAGdC,QAAAA,IAAI,EAAE,IAHQ;AAIdC,QAAAA,UAAU,EAAE;AAJE,OAAhB;AAOA,UAAIC,SAAS,GAAG,KAAhB;;AACA,UAAIR,kBAAJ,EAAwB;AACtBQ,QAAAA,SAAS,GAAGhB,MAAM,CAAC,KAAKM,KAAL,CAAWW,UAAZ,CAAN,CAA8BC,QAA9B,CAAuClB,MAAM,CAACA,MAAM,CAACmB,GAAP,EAAD,CAAN,CAAqBC,MAArB,CAA4B,YAA5B,CAAvC,CAAZ;AACAT,QAAAA,OAAO,CAACD,OAAR,GAAkB,OAAlB;AACD,OAHD,MAGO;AACLC,QAAAA,OAAO,CAACF,OAAR,GAAkBA,OAAO,IAAI,IAA7B;AACAE,QAAAA,OAAO,CAACD,OAAR,GAAkBA,OAAO,IAAI,IAA7B;AACD;;AAED,aACE,oBAAC,SAAD;AACE,QAAA,SAAS,EAAC,WADZ;AAEE,QAAA,OAAO,EAAEC,OAFX;AAGE,QAAA,KAAK,EAAEN,IAHT;AAIE,QAAA,QAAQ,EAAE,kBAAAA,IAAI;AAAA,iBAAI,MAAI,CAACD,gBAAL,CAAsBC,IAAtB,CAAJ;AAAA,SAJhB;AAKE,QAAA,OAAO,EAAE,iBAAAA,IAAI;AAAA,iBAAI,MAAI,CAACD,gBAAL,CAAsBC,IAAtB,CAAJ;AAAA,SALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOE;AAAM,QAAA,SAAS,gCAAyB,CAACW,SAAD,IAAc,YAAvC,CAAf;AAAsE,2BAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGX,IADH,CAPF,EAUE;AAAO,QAAA,SAAS,gCAAyBW,SAAS,IAAI,kBAAtC,CAAhB;AAA4E,QAAA,IAAI,EAAC,MAAjF;AAAwF,0BAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVF,EAWE;AAAM,QAAA,SAAS,EAAC,wBAAhB;AAAyC,QAAA,KAAK,EAAC,QAA/C;AAAwD,2BAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,MAAM,EAAC,cAAd;AAAmB,QAAA,KAAK,EAAC,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAXF,CADF;AAiBD;;;;EA7CqClB,S;;SAAnBK,U","sourcesContent":["import React, { Component } from 'react';\nimport Flatpickr from 'react-flatpickr';\nimport moment from 'moment';\n\nimport 'flatpickr/dist/themes/material_blue.css';\nimport 'components/Shared/DatePicker/DatePicker.css';\nimport Emoji from 'components/Shared/Emoji';\nimport {dateToString} from 'components/../services/dateHelpers';\n\nexport default class DatePicker extends Component {\n\n  handleDateChange = (date) => {\n    if (date[0]) {\n      this.props.onChange(dateToString(date[0]))\n    } else {\n      this.props.onChange(this.props.date)\n    }\n  }\n\n  render() {\n    const {date, checkForExpiration, maxDate, minDate} = this.props;\n    const options = {\n      dateFormat: 'Y-m-d',\n      enableTime: false,\n      wrap: true,\n      allowInput: true,\n    }\n\n    let isExpired = false;\n    if (checkForExpiration) {\n      isExpired = moment(this.props.reopenDate).isBefore(moment(moment.now()).format('YYYY-MM-DD'));\n      options.minDate = 'today';\n    } else {\n      options.maxDate = maxDate || null;\n      options.minDate = minDate || null;\n    }\n\n    return (\n      <Flatpickr\n        className=\"flatpickr\"\n        options={options}\n        value={date}\n        onChange={date => this.handleDateChange(date)}\n        onClose={date => this.handleDateChange(date)}\n      >\n        <span className={`expired-reopen-date ${!isExpired && 'eliminated'}`} data-toggle>\n          {date}\n        </span>\n        <input className={`flatpickr-input-box ${isExpired && 'hidden-input-box'}`} type=\"text\" data-input />\n        <span className=\"flatpickr-input-button\" title=\"toggle\" data-toggle>\n          <Emoji symbol=\"ðŸ“…\" label=\"calendar\"/>\n        </span>\n      </Flatpickr>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}