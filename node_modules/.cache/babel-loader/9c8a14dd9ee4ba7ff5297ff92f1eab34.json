{"ast":null,"code":"import _toConsumableArray from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/carlvlewis/floodsight/src/components/Dashboard/CrossingStatusHistory/InfiniteCrossingStatusHistoryList.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'react-apollo';\nimport { InfiniteLoader, AutoSizer, List, CellMeasurer, CellMeasurerCache } from 'react-virtualized';\nimport { dateToTimestampWithTimezone } from 'components/../services/dateHelpers';\nimport StatusHistoryQuery from 'components/Dashboard/CrossingListPage/queries/statusHistoryQuery';\nimport CrossingStatusHistoryItem from 'components/Dashboard/CrossingStatusHistory/CrossingStatusHistoryItem';\nimport 'components/Dashboard/CrossingListPage/CrossingListPage.css';\nvar batchSize = 30;\n\nvar InfiniteCrossingStatusHistoryList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(InfiniteCrossingStatusHistoryList, _React$Component);\n\n  function InfiniteCrossingStatusHistoryList(props) {\n    var _this;\n\n    _classCallCheck(this, InfiniteCrossingStatusHistoryList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InfiniteCrossingStatusHistoryList).call(this, props));\n    _this.cache = new CellMeasurerCache({\n      defaultHeight: 400,\n      fixedWidth: true\n    });\n    _this.loadingMore = false;\n    _this.virtualizingList = [];\n    _this._handleLoadMoreRows = _this._handleLoadMoreRows.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this._isRowLoaded = _this._isRowLoaded.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this._rowRenderer = _this._rowRenderer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this._noRowsRenderer = _this._noRowsRenderer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(InfiniteCrossingStatusHistoryList, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // Scroll to top of list when applying new filter\n      if (this.infiniteLoaderRef && (prevProps.communityId !== this.props.communityId || prevProps.crossingId !== this.props.crossingId || prevProps.dateLowerBound !== this.props.dateLowerBound || prevProps.dateUpperBound !== this.props.dateUpperBound)) {\n        this.infiniteLoaderRef.scrollToRow(0);\n      }\n    }\n  }, {\n    key: \"_handleLoadMoreRows\",\n    value: function _handleLoadMoreRows() {\n      var _this2 = this;\n\n      if (!this.loadingMore) {\n        this.loadingMore = true;\n        return this.props.loadMoreRows().then(function (result) {\n          if (!result.data.getStatusUpdateHistory.edges.length) {\n            _this2.props.setReceivedAllStatusUpdates();\n          }\n\n          _this2.loadingMore = false;\n          return result;\n        });\n      }\n    }\n  }, {\n    key: \"_isRowLoaded\",\n    value: function _isRowLoaded(_ref) {\n      var index = _ref.index;\n      return !!this.virtualizingList[index];\n    }\n  }, {\n    key: \"_rowRenderer\",\n    value: function _rowRenderer(_ref2) {\n      var key = _ref2.key,\n          index = _ref2.index,\n          style = _ref2.style,\n          parent = _ref2.parent;\n      var _this$props = this.props,\n          showNames = _this$props.showNames,\n          cqParams = _this$props.cqParams;\n      var statusUpdate;\n\n      if (index < this.virtualizingList.length) {\n        statusUpdate = this.virtualizingList[index].node;\n      } else {\n        return React.createElement(\"div\", {\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, \"Loading.....\");\n      } // Otherwise we sometimes get this TypeError: Cannot assign to read only property 'left' of object '#<Object>'\n\n\n      var modifiedStyle = Object.assign({}, style);\n      modifiedStyle.left = \"50%\";\n      return React.createElement(CellMeasurer, {\n        cache: this.cache,\n        columnIndex: 0,\n        key: key,\n        parent: parent,\n        rowIndex: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, function (_ref3) {\n        var measure = _ref3.measure;\n        return React.createElement(\"div\", {\n          className: \"CrossingStatusHistory__list-wrapper\",\n          style: modifiedStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          style: {\n            position: \"relative\",\n            left: \"-50%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, React.createElement(CrossingStatusHistoryItem, {\n          measure: measure,\n          key: key,\n          update: statusUpdate,\n          showNames: showNames,\n          cqParams: cqParams,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        })));\n      });\n    }\n  }, {\n    key: \"_noRowsRenderer\",\n    value: function _noRowsRenderer() {\n      return React.createElement(\"h1\", {\n        style: {\n          \"textAlign\": \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"No results found.\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props2 = this.props,\n          maxRows = _this$props2.maxRows,\n          receivedAllStatusUpdates = _this$props2.receivedAllStatusUpdates,\n          getStatusUpdateHistory = _this$props2.getStatusUpdateHistory;\n\n      if (!getStatusUpdateHistory) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, \"Loading\");\n      }\n\n      this.virtualizingList = getStatusUpdateHistory.edges;\n      var rowCount;\n\n      if (this.virtualizingList.length < batchSize || receivedAllStatusUpdates || !maxRows) {\n        rowCount = this.virtualizingList.length;\n      } else {\n        rowCount = maxRows;\n      }\n\n      return React.createElement(\"div\", {\n        style: {\n          height: 'calc(100vh - 140px)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(InfiniteLoader, {\n        isRowLoaded: this._isRowLoaded,\n        loadMoreRows: this._handleLoadMoreRows,\n        rowCount: rowCount,\n        threshold: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, function (_ref4) {\n        var onRowsRendered = _ref4.onRowsRendered,\n            registerChild = _ref4.registerChild;\n        return React.createElement(AutoSizer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, function (_ref5) {\n          var height = _ref5.height,\n              width = _ref5.width;\n          return React.createElement(List, {\n            ref: function ref(_ref6) {\n              return registerChild = _this3.infiniteLoaderRef = _ref6;\n            },\n            className: \"List\",\n            height: height,\n            deferredMeasurementCache: _this3.cache,\n            rowHeight: _this3.cache.rowHeight,\n            width: width,\n            onRowsRendered: onRowsRendered,\n            rowCount: rowCount,\n            rowRenderer: _this3._rowRenderer,\n            noRowsRenderer: _this3._noRowsRenderer,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 144\n            },\n            __self: this\n          });\n        });\n      }));\n    }\n  }]);\n\n  return InfiniteCrossingStatusHistoryList;\n}(React.Component);\n\nInfiniteCrossingStatusHistoryList.propTypes = {\n  showNames: PropTypes.bool\n};\nInfiniteCrossingStatusHistoryList.defaultProps = {\n  showNames: false\n};\nexport default graphql(StatusHistoryQuery, {\n  options: function options(ownProps) {\n    return {\n      variables: {\n        communityId: ownProps.communityId,\n        crossingId: ownProps.crossingId,\n        dateLowerBound: dateToTimestampWithTimezone(ownProps.dateLowerBound),\n        dateUpperBound: dateToTimestampWithTimezone(ownProps.dateUpperBound),\n        idUpperBound: null,\n        rowLimit: batchSize\n      }\n    };\n  },\n  props: function props(_ref7) {\n    var ownProps = _ref7.ownProps,\n        data = _ref7.data;\n    var loading = data.loading,\n        getStatusUpdateHistory = data.getStatusUpdateHistory,\n        fetchMore = data.fetchMore;\n\n    var loadMoreRows = function loadMoreRows() {\n      var lastId = getStatusUpdateHistory.edges[getStatusUpdateHistory.edges.length - 1].node.statusUpdateId;\n      return fetchMore({\n        variables: {\n          idUpperBound: lastId\n        },\n        updateQuery: function updateQuery(previousResult, _ref8) {\n          var fetchMoreResult = _ref8.fetchMoreResult;\n          var newEdges = fetchMoreResult.getStatusUpdateHistory.edges;\n          if (!fetchMoreResult) return previousResult;\n          return {\n            getStatusUpdateHistory: {\n              __typename: \"StatusUpdateHistoriesConnection\",\n              edges: _toConsumableArray(previousResult.getStatusUpdateHistory.edges).concat(_toConsumableArray(newEdges))\n            }\n          };\n        }\n      });\n    };\n\n    return {\n      loading: loading,\n      getStatusUpdateHistory: getStatusUpdateHistory,\n      loadMoreRows: loadMoreRows\n    };\n  }\n})(InfiniteCrossingStatusHistoryList);","map":{"version":3,"sources":["/Users/carlvlewis/floodsight/src/components/Dashboard/CrossingStatusHistory/InfiniteCrossingStatusHistoryList.js"],"names":["React","PropTypes","graphql","InfiniteLoader","AutoSizer","List","CellMeasurer","CellMeasurerCache","dateToTimestampWithTimezone","StatusHistoryQuery","CrossingStatusHistoryItem","batchSize","InfiniteCrossingStatusHistoryList","props","cache","defaultHeight","fixedWidth","loadingMore","virtualizingList","_handleLoadMoreRows","bind","_isRowLoaded","_rowRenderer","_noRowsRenderer","prevProps","infiniteLoaderRef","communityId","crossingId","dateLowerBound","dateUpperBound","scrollToRow","loadMoreRows","then","result","data","getStatusUpdateHistory","edges","length","setReceivedAllStatusUpdates","index","key","style","parent","showNames","cqParams","statusUpdate","node","modifiedStyle","Object","assign","left","measure","position","maxRows","receivedAllStatusUpdates","rowCount","height","onRowsRendered","registerChild","width","ref","rowHeight","Component","propTypes","bool","defaultProps","options","ownProps","variables","idUpperBound","rowLimit","loading","fetchMore","lastId","statusUpdateId","updateQuery","previousResult","fetchMoreResult","newEdges","__typename"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'react-apollo';\nimport {\n  InfiniteLoader,\n  AutoSizer,\n  List,\n  CellMeasurer,\n  CellMeasurerCache,\n} from 'react-virtualized';\n\nimport { dateToTimestampWithTimezone } from 'components/../services/dateHelpers';\nimport StatusHistoryQuery from 'components/Dashboard/CrossingListPage/queries/statusHistoryQuery';\nimport CrossingStatusHistoryItem from 'components/Dashboard/CrossingStatusHistory/CrossingStatusHistoryItem';\nimport 'components/Dashboard/CrossingListPage/CrossingListPage.css';\n\nconst batchSize = 30;\n\nclass InfiniteCrossingStatusHistoryList extends React.Component {\n  static propTypes = {\n    showNames: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    showNames: false,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.cache = new CellMeasurerCache({\n      defaultHeight: 400,\n      fixedWidth: true,\n    });\n    this.loadingMore = false;\n    this.virtualizingList = [];\n    this._handleLoadMoreRows = this._handleLoadMoreRows.bind(this);\n    this._isRowLoaded = this._isRowLoaded.bind(this);\n    this._rowRenderer = this._rowRenderer.bind(this);\n    this._noRowsRenderer = this._noRowsRenderer.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    // Scroll to top of list when applying new filter\n    if (this.infiniteLoaderRef && (\n      prevProps.communityId !== this.props.communityId ||\n      prevProps.crossingId !== this.props.crossingId ||\n      prevProps.dateLowerBound !== this.props.dateLowerBound ||\n      prevProps.dateUpperBound !== this.props.dateUpperBound\n    )) {\n      this.infiniteLoaderRef.scrollToRow(0);\n    }\n  }\n\n  _handleLoadMoreRows() {\n    if (!this.loadingMore) {\n      this.loadingMore = true;\n      return this.props.loadMoreRows()\n      .then((result) => {\n        if (!result.data.getStatusUpdateHistory.edges.length) {\n          this.props.setReceivedAllStatusUpdates();\n        }\n        this.loadingMore = false;\n        return result;\n      })\n    }\n  }\n\n  _isRowLoaded({ index }) {\n    return !!this.virtualizingList[index];\n  }\n\n  _rowRenderer({ key, index, style, parent }) {\n    const { showNames, cqParams } = this.props;\n    let statusUpdate;\n\n    if (index < this.virtualizingList.length) {\n      statusUpdate = this.virtualizingList[index].node;\n    } else {\n      return <div key={key}>Loading.....</div>;\n    }\n\n    // Otherwise we sometimes get this TypeError: Cannot assign to read only property 'left' of object '#<Object>'\n    const modifiedStyle = Object.assign({}, style);\n    modifiedStyle.left = \"50%\";\n\n    return (\n      <CellMeasurer\n        cache={this.cache}\n        columnIndex={0}\n        key={key}\n        parent={parent}\n        rowIndex={index}\n      >\n        {({ measure }) => (\n          <div\n            className=\"CrossingStatusHistory__list-wrapper\"\n            style={modifiedStyle}\n          >\n            <div style={{position: \"relative\", left: \"-50%\"}}>\n              <CrossingStatusHistoryItem\n                measure={measure}\n                key={key}\n                update={statusUpdate}\n                showNames={showNames}\n                cqParams={cqParams}\n              />\n            </div>\n          </div>\n        )}\n      </CellMeasurer>\n    );\n  }\n\n  _noRowsRenderer() {\n    return <h1 style={{\"textAlign\": \"center\"}}>No results found.</h1>;\n  }\n\n  render() {\n    const { maxRows, receivedAllStatusUpdates, getStatusUpdateHistory } = this.props;\n    if (!getStatusUpdateHistory) {\n      return <div>Loading</div>;\n    }\n\n    this.virtualizingList = getStatusUpdateHistory.edges;\n    let rowCount;\n    if ((this.virtualizingList.length < batchSize) || receivedAllStatusUpdates || !maxRows) {\n      rowCount = this.virtualizingList.length\n    } else {\n      rowCount = maxRows\n    }\n\n    return (\n      <div style={{ height: 'calc(100vh - 140px)' }}>\n        <InfiniteLoader\n          isRowLoaded={this._isRowLoaded}\n          loadMoreRows={this._handleLoadMoreRows}\n          rowCount={rowCount}\n          threshold={10}\n        >\n          {({ onRowsRendered, registerChild }) => (\n            <AutoSizer>\n              {({ height, width }) => (\n                <List\n                  ref={ref => (registerChild = this.infiniteLoaderRef = ref)}\n                  className=\"List\"\n                  height={height}\n                  deferredMeasurementCache={this.cache}\n                  rowHeight={this.cache.rowHeight}\n                  width={width}\n                  onRowsRendered={onRowsRendered}\n                  rowCount={rowCount}\n                  rowRenderer={this._rowRenderer}\n                  noRowsRenderer={this._noRowsRenderer}\n                />\n              )}\n            </AutoSizer>\n          )}\n        </InfiniteLoader>\n      </div>\n    );\n  }\n}\n\nexport default graphql(StatusHistoryQuery, {\n  options: ownProps => {\n    return {\n      variables: {\n        communityId: ownProps.communityId,\n        crossingId: ownProps.crossingId,\n        dateLowerBound: dateToTimestampWithTimezone(ownProps.dateLowerBound),\n        dateUpperBound: dateToTimestampWithTimezone(ownProps.dateUpperBound),\n        idUpperBound: null,\n        rowLimit: batchSize\n      }\n    }\n  },\n  props: ({ ownProps, data }) => {\n    const { loading, getStatusUpdateHistory, fetchMore } = data;\n    const loadMoreRows = () => {\n      const lastId = getStatusUpdateHistory.edges[getStatusUpdateHistory.edges.length-1].node.statusUpdateId;\n      return fetchMore({\n        variables: {\n          idUpperBound: lastId,\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          const newEdges = fetchMoreResult.getStatusUpdateHistory.edges;\n          if (!fetchMoreResult) return previousResult\n          return {\n            getStatusUpdateHistory: {\n              __typename: \"StatusUpdateHistoriesConnection\",\n              edges: [...previousResult.getStatusUpdateHistory.edges, ...newEdges]\n            },\n          };\n        },\n      });\n    }\n    return {\n      loading,\n      getStatusUpdateHistory,\n      loadMoreRows\n    }\n  }\n})(InfiniteCrossingStatusHistoryList);\n"]},"metadata":{},"sourceType":"module"}