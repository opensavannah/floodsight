{"ast":null,"code":"import _classCallCheck from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _toConsumableArray from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/carlvlewis/floodsight/src/components/Shared/CrossingMapPage/CrossingMapPage.js\";\nimport React, { Component } from 'react';\nimport { ContainerQuery } from 'react-container-query';\nimport Fullscreen from 'react-full-screen';\nimport FontAwesome from 'react-fontawesome';\nimport _ from 'lodash';\nimport CrossingMap from 'components/Shared/Map/CrossingMap';\nimport CrossingMapSidebar from 'components/Shared/CrossingMapPage/CrossingMapSidebar';\nimport CrossingMapSearchBar from 'components/Shared/CrossingMapPage/CrossingMapSearchBar';\nimport FilterCheckbox from 'components/Shared/FilterCheckbox';\nimport 'components/Shared/CrossingMapPage/CrossingMapPage.css';\nimport { LARGE_ITEM_MIN_WIDTH } from 'constants/containerQueryConstants';\nimport * as selectors from 'components/Shared/CrossingMapPage/selectors';\nvar containerQuery = {\n  fullsize: {\n    minWidth: LARGE_ITEM_MIN_WIDTH\n  }\n};\n\nvar getViewportAndCenter = function getViewportAndCenter(viewportgeojson) {\n  if (!viewportgeojson) {\n    viewportgeojson = \"{\\\"type\\\":\\\"Polygon\\\",\\\"coordinates\\\":[[[-98.086914,30.148464],[-98.086914,30.433285],[-97.615974,30.433285],[-97.615974,30.148464],[-98.086914,30.148464]]]}\";\n  }\n\n  var envelope = JSON.parse(viewportgeojson);\n  var viewport, center;\n\n  if (envelope.type === 'Point') {\n    viewport = [[envelope.coordinates[0] - 0.1, envelope.coordinates[1] - 0.1], [envelope.coordinates[0] + 0.1, envelope.coordinates[1] + 0.1]];\n    center = {\n      lng: envelope.coordinates[0],\n      lat: envelope.coordinates[1]\n    };\n  } else {\n    viewport = [[Math.min.apply(Math, _toConsumableArray(envelope.coordinates[0].map(function (arr) {\n      return arr[0];\n    }))) - 0.1, Math.min.apply(Math, _toConsumableArray(envelope.coordinates[0].map(function (arr) {\n      return arr[1];\n    }))) - 0.1], [Math.max.apply(Math, _toConsumableArray(envelope.coordinates[0].map(function (arr) {\n      return arr[0];\n    }))) + 0.1, Math.max.apply(Math, _toConsumableArray(envelope.coordinates[0].map(function (arr) {\n      return arr[1];\n    }))) + 0.1]];\n    center = {\n      lng: (viewport[0][0] + viewport[1][0]) / 2,\n      lat: (viewport[0][1] + viewport[1][1]) / 2\n    };\n  }\n\n  return {\n    viewport: viewport,\n    center: center\n  };\n};\n\nvar CrossingMapPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CrossingMapPage, _Component);\n\n  function CrossingMapPage(props) {\n    var _this;\n\n    _classCallCheck(this, CrossingMapPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CrossingMapPage).call(this, props)); // If we have a current user, we're on the dashboard, we should get their viewport\n\n    _this.registerMapResizeCallback = function (cb) {\n      _this.mapResizeCallback = cb;\n    };\n\n    _this.triggerMapResize = function () {\n      if (_this.mapResizeCallback) {\n        _this.mapResizeCallback();\n      }\n    };\n\n    _this.toggleFullscreen = function () {\n      _this.setState({\n        fullscreen: !_this.state.fullscreen\n      });\n    };\n\n    _this.toggleShowOpen = function () {\n      _this.setState({\n        showOpen: !_this.state.showOpen\n      });\n    };\n\n    _this.toggleShowClosed = function () {\n      _this.setState({\n        showClosed: !_this.state.showClosed\n      });\n    };\n\n    _this.toggleShowCaution = function () {\n      _this.setState({\n        showCaution: !_this.state.showCaution\n      });\n    };\n\n    _this.toggleShowLongterm = function () {\n      _this.setState({\n        showLongterm: !_this.state.showLongterm\n      });\n    };\n\n    _this.setCenter = function (center) {\n      _this.setState({\n        center: center\n      });\n    };\n\n    _this.setSelectedFeature = function (feature) {\n      var stateObject = {\n        selectedFeature: feature\n      };\n\n      if (feature) {\n        stateObject.center = {\n          lng: feature.data.coordinates[0],\n          lat: feature.data.coordinates[1]\n        };\n      }\n\n      _this.setState(stateObject);\n    };\n\n    _this.setMapLoaded = function () {\n      // Initialize selectedFeature if data is passed as params\n      var selectedCrossing = selectors.getSelectedCrossing(_this.props);\n      var selectedCamera = selectors.getSelectedCamera(_this.props);\n\n      if (selectedCrossing) {\n        _this.setState({\n          selectedFeature: {\n            type: \"Crossing\",\n            data: selectedCrossing\n          },\n          center: {\n            lng: selectedCrossing.coordinates[0],\n            lat: selectedCrossing.coordinates[1]\n          },\n          mapLoaded: true\n        });\n      } else if (selectedCamera) {\n        _this.setState({\n          selectedFeature: {\n            type: \"Camera\",\n            data: selectedCamera\n          },\n          center: {\n            lng: selectedCamera.coordinates[0],\n            lat: selectedCamera.coordinates[1]\n          },\n          mapLoaded: true\n        });\n      } else {\n        _this.setState({\n          mapLoaded: true\n        });\n      }\n    };\n\n    _this.toggleSearchFocus = function (focused) {\n      _this.setState({\n        searchFocused: focused\n      }, function () {\n        _this.triggerMapResize();\n      });\n    };\n\n    var viewportgeojson = _this.props.currentUser && _this.props.currentUser.communityByCommunityId.viewportgeojson;\n    var viewportAndCenter = getViewportAndCenter(viewportgeojson);\n    _this.state = {\n      fullscreen: false,\n      searchQuery: '',\n      formattedSearchQuery: '%%',\n      showOpen: props.onDash,\n      showClosed: true,\n      showCaution: true,\n      showLongterm: true,\n      selectedFeature: null,\n      viewport: viewportAndCenter.viewport,\n      center: viewportAndCenter.center,\n      mapLoaded: false,\n      searchFocused: false\n    };\n    return _this;\n  } // Better than using componentDidUpdate because it doesn't trigger an extra re-render.\n  // However, as a static method, it can't access \"this\" context\n\n\n  _createClass(CrossingMapPage, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          viewport = _this$state.viewport,\n          center = _this$state.center,\n          searchQuery = _this$state.searchQuery,\n          formattedSearchQuery = _this$state.formattedSearchQuery,\n          selectedFeature = _this$state.selectedFeature;\n      var _this$props = this.props,\n          currentUser = _this$props.currentUser,\n          onDash = _this$props.onDash;\n      var allCommunities = selectors.getAllCommunities(this.props);\n      var openCrossings = selectors.getOpenCrossings(this.props);\n      var closedCrossings = selectors.getClosedCrossings(this.props);\n      var cautionCrossings = selectors.getCautionCrossings(this.props);\n      var longtermCrossings = selectors.getLongtermCrossings(this.props);\n      var allCameras = selectors.getAllCameras(this.props);\n      var isDataLoaded = this.props.isDataLoaded;\n      var selectedCommunityId = selectors.getSelectedCommunityId(this.props);\n      var selectedCrossingId = selectors.getSelectedCrossingId(this.props);\n      var selectedCameraId = selectors.getSelectedCameraId(this.props);\n      var cameraOrCrossingSelected = !!selectedCrossingId || !!selectedCameraId;\n      return React.createElement(ContainerQuery, {\n        query: containerQuery,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, function (params) {\n        return React.createElement(\"div\", {\n          className: \"CrossingMapPage__page-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276\n          },\n          __self: this\n        }, React.createElement(Fullscreen, {\n          enabled: _this2.state.fullscreen,\n          onChange: function onChange(fullscreen) {\n            return _this2.setState({\n              fullscreen: fullscreen\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 277\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"CrossingMapPage\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 281\n          },\n          __self: this\n        }, !params.fullsize && React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 283\n          },\n          __self: this\n        }, React.createElement(CrossingMapSearchBar, {\n          cameraOrCrossingSelected: cameraOrCrossingSelected,\n          searchQuery: searchQuery,\n          searchQueryUpdated: _this2.searchQueryUpdated,\n          toggleSearchFocus: _this2.toggleSearchFocus,\n          communities: allCommunities,\n          center: center,\n          setSelectedFeature: _this2.setSelectedFeature,\n          mobile: true,\n          onDash: onDash,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284\n          },\n          __self: this\n        }), !_this2.state.searchFocused && React.createElement(\"div\", {\n          className: \"CrossingMapPage__mobile-status-filters\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 296\n          },\n          __self: this\n        }, React.createElement(FilterCheckbox, {\n          isChecked: _this2.state.showOpen,\n          onClick: _this2.toggleShowOpen,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 297\n          },\n          __self: this\n        }, \"Open\"), React.createElement(FilterCheckbox, {\n          isChecked: _this2.state.showClosed,\n          onClick: _this2.toggleShowClosed,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 303\n          },\n          __self: this\n        }, \"Closed\"), React.createElement(FilterCheckbox, {\n          isChecked: _this2.state.showCaution,\n          onClick: _this2.toggleShowCaution,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 309\n          },\n          __self: this\n        }, \"Caution\"), React.createElement(FilterCheckbox, {\n          isChecked: _this2.state.showLongterm,\n          onClick: _this2.toggleShowLongterm,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 315\n          },\n          __self: this\n        }, \"Long-Term\"))), params.fullsize && React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 326\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"CrossingMapPage__fullscreen-toggle-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 327\n          },\n          __self: this\n        }, React.createElement(FontAwesome, {\n          name: \"arrows-alt\",\n          size: \"2x\",\n          onClick: _this2.toggleFullscreen,\n          className: \"CrossingMapPage__fullscreen-toggle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 328\n          },\n          __self: this\n        })), React.createElement(CrossingMapSidebar, {\n          selectedCrossingId: selectedCrossingId,\n          selectedFeature: selectedFeature,\n          currentUser: currentUser,\n          searchQuery: searchQuery,\n          searchQueryUpdated: _this2.searchQueryUpdated,\n          showOpen: _this2.state.showOpen,\n          toggleShowOpen: _this2.toggleShowOpen,\n          showClosed: _this2.state.showClosed,\n          toggleShowClosed: _this2.toggleShowClosed,\n          showCaution: _this2.state.showCaution,\n          toggleShowCaution: _this2.toggleShowCaution,\n          showLongterm: _this2.state.showLongterm,\n          toggleShowLongterm: _this2.toggleShowLongterm,\n          allCommunities: allCommunities,\n          openCrossings: openCrossings,\n          closedCrossings: closedCrossings,\n          longtermCrossings: longtermCrossings,\n          cautionCrossings: cautionCrossings,\n          center: center,\n          setSelectedFeature: _this2.setSelectedFeature,\n          triggerMapResize: _this2.triggerMapResize,\n          onDash: onDash,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 335\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"CrossingMapPage__map-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 361\n          },\n          __self: this\n        }, React.createElement(CrossingMap, {\n          mapHeight: \"100%\",\n          mapWidth: \"100%\",\n          viewport: viewport,\n          setCenter: _this2.setCenter,\n          currentUser: currentUser,\n          searchQuery: formattedSearchQuery,\n          showOpen: _this2.state.showOpen,\n          showClosed: _this2.state.showClosed,\n          showCaution: _this2.state.showCaution,\n          showLongterm: _this2.state.showLongterm,\n          openCrossings: openCrossings,\n          closedCrossings: closedCrossings,\n          longtermCrossings: longtermCrossings,\n          cautionCrossings: cautionCrossings,\n          selectedCommunityId: selectedCommunityId,\n          registerMapResizeCallback: _this2.registerMapResizeCallback,\n          mobile: !params.fullsize,\n          setMapLoaded: _this2.setMapLoaded,\n          autoGeoLocate: !selectedCommunityId && !selectedCrossingId && !selectedCameraId,\n          allCameras: allCameras,\n          selectedFeature: selectedFeature,\n          center: center,\n          showCameras: true,\n          isDataLoaded: isDataLoaded,\n          setSelectedFeature: _this2.setSelectedFeature,\n          onDash: onDash,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 362\n          },\n          __self: this\n        })))));\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (state.mapLoaded && props.isDataLoaded) {\n        var selectedCrossingId = selectors.getSelectedCrossingId(props);\n        var selectedCameraId = selectors.getSelectedCameraId(props);\n        var selectedCommunityId = selectors.getSelectedCommunityId(props);\n        var prevSelectedCrossingId, prevSelectedCameraId, prevSelectedCommunityId;\n        var prevSelectedFeature = state.selectedFeature;\n\n        if (prevSelectedFeature) {\n          if (prevSelectedFeature.type === \"Crossing\") {\n            prevSelectedCrossingId = prevSelectedFeature.data.id;\n          } else if (prevSelectedFeature.type === \"Camera\") {\n            prevSelectedCameraId = prevSelectedFeature.data.id;\n          } else if (prevSelectedFeature.type === \"Community\") {\n            prevSelectedCommunityId = prevSelectedFeature.data.id;\n          }\n        } // Handle Emptying of Params\n\n\n        if (_.isEmpty(props.match.params) && prevSelectedFeature) {\n          return {\n            selectedFeature: null // Handle New Crossing param\n\n          };\n        } else if (selectedCrossingId && selectedCrossingId !== prevSelectedCrossingId) {\n          var selectedCrossing = selectors.getSelectedCrossing(props);\n          return {\n            selectedFeature: {\n              type: \"Crossing\",\n              data: selectedCrossing\n            },\n            center: {\n              lng: selectedCrossing.coordinates[0],\n              lat: selectedCrossing.coordinates[1]\n            } // Handle new Camera param\n\n          };\n        } else if (selectedCameraId && selectedCameraId !== prevSelectedCameraId) {\n          var selectedCamera = selectors.getSelectedCamera(props);\n          return {\n            selectedFeature: {\n              type: \"Camera\",\n              data: selectedCamera\n            },\n            center: {\n              lng: selectedCamera.coordinates[0],\n              lat: selectedCamera.coordinates[1]\n            } // Handle new Community param\n\n          };\n        } else if (selectedCommunityId && selectedCommunityId !== prevSelectedCommunityId) {\n          var selectedCommunity = selectors.getSelectedCommunity(props);\n          var viewportAndCenter = getViewportAndCenter(selectedCommunity.viewportgeojson);\n          return {\n            selectedFeature: {\n              type: \"Community\",\n              data: selectedCommunity\n            },\n            viewport: viewportAndCenter.viewport,\n            center: viewportAndCenter.center\n          };\n        } else return null;\n      } else return null;\n    }\n  }]);\n\n  return CrossingMapPage;\n}(Component);\n\nexport { CrossingMapPage as default };","map":{"version":3,"sources":["/Users/carlvlewis/floodsight/src/components/Shared/CrossingMapPage/CrossingMapPage.js"],"names":["React","Component","ContainerQuery","Fullscreen","FontAwesome","_","CrossingMap","CrossingMapSidebar","CrossingMapSearchBar","FilterCheckbox","LARGE_ITEM_MIN_WIDTH","selectors","containerQuery","fullsize","minWidth","getViewportAndCenter","viewportgeojson","envelope","JSON","parse","viewport","center","type","coordinates","lng","lat","Math","min","map","arr","max","CrossingMapPage","props","registerMapResizeCallback","cb","mapResizeCallback","triggerMapResize","toggleFullscreen","setState","fullscreen","state","toggleShowOpen","showOpen","toggleShowClosed","showClosed","toggleShowCaution","showCaution","toggleShowLongterm","showLongterm","setCenter","setSelectedFeature","feature","stateObject","selectedFeature","data","setMapLoaded","selectedCrossing","getSelectedCrossing","selectedCamera","getSelectedCamera","mapLoaded","toggleSearchFocus","focused","searchFocused","currentUser","communityByCommunityId","viewportAndCenter","searchQuery","formattedSearchQuery","onDash","allCommunities","getAllCommunities","openCrossings","getOpenCrossings","closedCrossings","getClosedCrossings","cautionCrossings","getCautionCrossings","longtermCrossings","getLongtermCrossings","allCameras","getAllCameras","isDataLoaded","selectedCommunityId","getSelectedCommunityId","selectedCrossingId","getSelectedCrossingId","selectedCameraId","getSelectedCameraId","cameraOrCrossingSelected","params","searchQueryUpdated","prevSelectedCrossingId","prevSelectedCameraId","prevSelectedCommunityId","prevSelectedFeature","id","isEmpty","match","selectedCommunity","getSelectedCommunity"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { ContainerQuery } from 'react-container-query';\nimport Fullscreen from 'react-full-screen';\nimport FontAwesome from 'react-fontawesome';\nimport _ from 'lodash';\n\nimport CrossingMap from 'components/Shared/Map/CrossingMap';\nimport CrossingMapSidebar from 'components/Shared/CrossingMapPage/CrossingMapSidebar';\nimport CrossingMapSearchBar from 'components/Shared/CrossingMapPage/CrossingMapSearchBar';\nimport FilterCheckbox from 'components/Shared/FilterCheckbox';\n\nimport 'components/Shared/CrossingMapPage/CrossingMapPage.css';\nimport { LARGE_ITEM_MIN_WIDTH } from 'constants/containerQueryConstants';\nimport * as selectors from 'components/Shared/CrossingMapPage/selectors';\n\nconst containerQuery = {\n  fullsize: {\n    minWidth: LARGE_ITEM_MIN_WIDTH,\n  },\n};\n\nconst getViewportAndCenter = (viewportgeojson) => {\n  if (!viewportgeojson) {\n    viewportgeojson = `{\"type\":\"Polygon\",\"coordinates\":[[[-98.086914,30.148464],[-98.086914,30.433285],[-97.615974,30.433285],[-97.615974,30.148464],[-98.086914,30.148464]]]}`\n  }\n  const envelope = JSON.parse(viewportgeojson);\n  let viewport, center;\n\n  if (envelope.type === 'Point') {\n    viewport = [\n      [\n        envelope.coordinates[0] - 0.1,\n        envelope.coordinates[1] - 0.1\n      ],\n      [\n        envelope.coordinates[0] + 0.1,\n        envelope.coordinates[1] + 0.1\n      ]\n    ];\n\n    center = {\n      lng: envelope.coordinates[0],\n      lat: envelope.coordinates[1]\n    }\n  } else {\n    viewport = [\n      [\n        Math.min(...envelope.coordinates[0].map(arr => arr[0])) - 0.1,\n        Math.min(...envelope.coordinates[0].map(arr => arr[1])) - 0.1,\n      ],\n      [\n        Math.max(...envelope.coordinates[0].map(arr => arr[0])) + 0.1,\n        Math.max(...envelope.coordinates[0].map(arr => arr[1])) + 0.1,\n      ],\n    ];\n\n    center = {\n      lng: (viewport[0][0] + viewport[1][0]) / 2,\n      lat: (viewport[0][1] + viewport[1][1]) / 2,\n    };\n  }\n\n  return {\n    viewport: viewport,\n    center: center,\n  }\n};\n\nexport default class CrossingMapPage extends Component {\n  constructor(props) {\n    super(props);\n\n    // If we have a current user, we're on the dashboard, we should get their viewport\n    const viewportgeojson = (this.props.currentUser && this.props.currentUser.communityByCommunityId.viewportgeojson);\n    const viewportAndCenter = getViewportAndCenter(viewportgeojson);\n\n    this.state = {\n      fullscreen: false,\n      searchQuery: '',\n      formattedSearchQuery: '%%',\n      showOpen: props.onDash,\n      showClosed: true,\n      showCaution: true,\n      showLongterm: true,\n      selectedFeature: null,\n      viewport: viewportAndCenter.viewport,\n      center: viewportAndCenter.center,\n      mapLoaded: false,\n      searchFocused: false,\n    };\n  }\n\n  // Better than using componentDidUpdate because it doesn't trigger an extra re-render.\n  // However, as a static method, it can't access \"this\" context\n  static getDerivedStateFromProps(props, state) {\n    if (state.mapLoaded && props.isDataLoaded) {\n      const selectedCrossingId = selectors.getSelectedCrossingId(props);\n      const selectedCameraId = selectors.getSelectedCameraId(props);\n      const selectedCommunityId = selectors.getSelectedCommunityId(props);\n      let prevSelectedCrossingId, prevSelectedCameraId, prevSelectedCommunityId;\n      const prevSelectedFeature = state.selectedFeature;\n      if (prevSelectedFeature) {\n        if (prevSelectedFeature.type === \"Crossing\") {\n          prevSelectedCrossingId = prevSelectedFeature.data.id;\n        } else if (prevSelectedFeature.type === \"Camera\") {\n          prevSelectedCameraId = prevSelectedFeature.data.id;\n        } else if (prevSelectedFeature.type === \"Community\") {\n          prevSelectedCommunityId = prevSelectedFeature.data.id;\n        }\n      }\n\n      // Handle Emptying of Params\n      if (_.isEmpty(props.match.params) && prevSelectedFeature) {\n        return {\n          selectedFeature: null\n        }\n      // Handle New Crossing param\n      } else if (selectedCrossingId && (selectedCrossingId !== prevSelectedCrossingId)) {\n        const selectedCrossing = selectors.getSelectedCrossing(props);\n        return {\n          selectedFeature: {\n            type: \"Crossing\",\n            data: selectedCrossing\n          },\n          center: {\n            lng: selectedCrossing.coordinates[0],\n            lat: selectedCrossing.coordinates[1]\n          }\n        }\n      // Handle new Camera param\n      } else if (selectedCameraId && (selectedCameraId !== prevSelectedCameraId)) {\n        const selectedCamera = selectors.getSelectedCamera(props);\n        return {\n          selectedFeature: {\n            type: \"Camera\",\n            data: selectedCamera\n          },\n          center: {\n            lng: selectedCamera.coordinates[0],\n            lat: selectedCamera.coordinates[1]\n          }\n        }\n      // Handle new Community param\n      } else if (selectedCommunityId && (selectedCommunityId !== prevSelectedCommunityId)) {\n        const selectedCommunity = selectors.getSelectedCommunity(props)\n        const viewportAndCenter = getViewportAndCenter(\n          selectedCommunity.viewportgeojson,\n        );\n        return {\n          selectedFeature: {\n            type: \"Community\",\n            data: selectedCommunity\n          },\n          viewport: viewportAndCenter.viewport,\n          center: viewportAndCenter.center,\n        }\n      } else return null\n    } else return null\n  }\n\n  registerMapResizeCallback = cb => {\n    this.mapResizeCallback = cb;\n  };\n\n  triggerMapResize = () => {\n    if (this.mapResizeCallback) {\n      this.mapResizeCallback();\n    }\n  };\n\n  toggleFullscreen = () => {\n    this.setState({ fullscreen: !this.state.fullscreen });\n  };\n\n  toggleShowOpen = () => {\n    this.setState({ showOpen: !this.state.showOpen });\n  };\n  toggleShowClosed = () => {\n    this.setState({ showClosed: !this.state.showClosed });\n  };\n  toggleShowCaution = () => {\n    this.setState({ showCaution: !this.state.showCaution });\n  };\n  toggleShowLongterm = () => {\n    this.setState({ showLongterm: !this.state.showLongterm });\n  };\n\n  setCenter = center => {\n    this.setState({ center: center });\n  };\n\n  setSelectedFeature = feature => {\n    const stateObject = {\n      selectedFeature: feature\n    }\n    if (feature) {\n      stateObject.center = {\n        lng: feature.data.coordinates[0],\n        lat: feature.data.coordinates[1]\n      }\n    }\n    this.setState(stateObject);\n  }\n\n  setMapLoaded = () => {\n    // Initialize selectedFeature if data is passed as params\n    const selectedCrossing = selectors.getSelectedCrossing(this.props);\n    const selectedCamera = selectors.getSelectedCamera(this.props);\n\n    if (selectedCrossing) {\n      this.setState({\n        selectedFeature: {\n          type: \"Crossing\",\n          data: selectedCrossing\n        },\n        center: {\n          lng: selectedCrossing.coordinates[0],\n          lat: selectedCrossing.coordinates[1]\n        },\n        mapLoaded: true\n      });\n    } else if (selectedCamera) {\n      this.setState({\n        selectedFeature: {\n          type: \"Camera\",\n          data: selectedCamera\n        },\n        center: {\n          lng: selectedCamera.coordinates[0],\n          lat: selectedCamera.coordinates[1]\n        },\n        mapLoaded: true\n      })\n    } else {\n      this.setState({\n        mapLoaded: true\n      });\n    }\n  };\n\n  toggleSearchFocus = focused => {\n    this.setState({ searchFocused: focused }, () => {\n      this.triggerMapResize();\n    });\n  };\n\n  render() {\n    const {\n      viewport,\n      center,\n      searchQuery,\n      formattedSearchQuery,\n      selectedFeature,\n    } = this.state;\n    const {\n      currentUser,\n      onDash,\n     } = this.props;\n\n    const allCommunities = selectors.getAllCommunities(this.props);\n    const openCrossings = selectors.getOpenCrossings(this.props);\n    const closedCrossings = selectors.getClosedCrossings(this.props);\n    const cautionCrossings = selectors.getCautionCrossings(this.props);\n    const longtermCrossings = selectors.getLongtermCrossings(this.props);\n    const allCameras = selectors.getAllCameras(this.props);\n    const isDataLoaded = this.props.isDataLoaded;\n\n    const selectedCommunityId = selectors.getSelectedCommunityId(this.props);\n    const selectedCrossingId = selectors.getSelectedCrossingId(this.props);\n    const selectedCameraId = selectors.getSelectedCameraId(this.props);\n    const cameraOrCrossingSelected = !!selectedCrossingId || !!selectedCameraId;\n\n    return (\n      <ContainerQuery query={containerQuery}>\n        {params => (\n          <div className=\"CrossingMapPage__page-container\">\n            <Fullscreen\n              enabled={this.state.fullscreen}\n              onChange={fullscreen => this.setState({ fullscreen })}\n            >\n              <div className=\"CrossingMapPage\">\n                {!params.fullsize && (\n                  <React.Fragment>\n                    <CrossingMapSearchBar\n                      cameraOrCrossingSelected={cameraOrCrossingSelected}\n                      searchQuery={searchQuery}\n                      searchQueryUpdated={this.searchQueryUpdated}\n                      toggleSearchFocus={this.toggleSearchFocus}\n                      communities={allCommunities}\n                      center={center}\n                      setSelectedFeature={this.setSelectedFeature}\n                      mobile={true}\n                      onDash={onDash}\n                    />\n                    {!this.state.searchFocused && (\n                      <div className=\"CrossingMapPage__mobile-status-filters\">\n                        <FilterCheckbox\n                          isChecked={this.state.showOpen}\n                          onClick={this.toggleShowOpen}\n                        >\n                          Open\n                        </FilterCheckbox>\n                        <FilterCheckbox\n                          isChecked={this.state.showClosed}\n                          onClick={this.toggleShowClosed}\n                        >\n                          Closed\n                        </FilterCheckbox>\n                        <FilterCheckbox\n                          isChecked={this.state.showCaution}\n                          onClick={this.toggleShowCaution}\n                        >\n                          Caution\n                        </FilterCheckbox>\n                        <FilterCheckbox\n                          isChecked={this.state.showLongterm}\n                          onClick={this.toggleShowLongterm}\n                        >\n                          Long-Term\n                        </FilterCheckbox>\n                      </div>\n                    )}\n                  </React.Fragment>\n                )}\n                {params.fullsize && (\n                  <React.Fragment>\n                    <div className=\"CrossingMapPage__fullscreen-toggle-container\">\n                      <FontAwesome\n                        name=\"arrows-alt\"\n                        size=\"2x\"\n                        onClick={this.toggleFullscreen}\n                        className=\"CrossingMapPage__fullscreen-toggle\"\n                      />\n                    </div>\n                    <CrossingMapSidebar\n                      selectedCrossingId={selectedCrossingId}\n                      selectedFeature={selectedFeature}\n                      currentUser={currentUser}\n                      searchQuery={searchQuery}\n                      searchQueryUpdated={this.searchQueryUpdated}\n                      showOpen={this.state.showOpen}\n                      toggleShowOpen={this.toggleShowOpen}\n                      showClosed={this.state.showClosed}\n                      toggleShowClosed={this.toggleShowClosed}\n                      showCaution={this.state.showCaution}\n                      toggleShowCaution={this.toggleShowCaution}\n                      showLongterm={this.state.showLongterm}\n                      toggleShowLongterm={this.toggleShowLongterm}\n                      allCommunities={allCommunities}\n                      openCrossings={openCrossings}\n                      closedCrossings={closedCrossings}\n                      longtermCrossings={longtermCrossings}\n                      cautionCrossings={cautionCrossings}\n                      center={center}\n                      setSelectedFeature={this.setSelectedFeature}\n                      triggerMapResize={this.triggerMapResize}\n                      onDash={onDash}\n                    />\n                  </React.Fragment>\n                )}\n                <div className=\"CrossingMapPage__map-container\">\n                  <CrossingMap\n                    mapHeight=\"100%\"\n                    mapWidth=\"100%\"\n                    viewport={viewport}\n                    setCenter={this.setCenter}\n                    currentUser={currentUser}\n                    searchQuery={formattedSearchQuery}\n                    showOpen={this.state.showOpen}\n                    showClosed={this.state.showClosed}\n                    showCaution={this.state.showCaution}\n                    showLongterm={this.state.showLongterm}\n                    openCrossings={openCrossings}\n                    closedCrossings={closedCrossings}\n                    longtermCrossings={longtermCrossings}\n                    cautionCrossings={cautionCrossings}\n                    selectedCommunityId={selectedCommunityId}\n                    registerMapResizeCallback={this.registerMapResizeCallback}\n                    mobile={!params.fullsize}\n                    setMapLoaded={this.setMapLoaded}\n                    autoGeoLocate={\n                      !selectedCommunityId &&\n                      !selectedCrossingId &&\n                      !selectedCameraId\n                    }\n                    allCameras={allCameras}\n                    selectedFeature={selectedFeature}\n                    center={center}\n                    showCameras={true}\n                    isDataLoaded={isDataLoaded}\n                    setSelectedFeature={this.setSelectedFeature}\n                    onDash={onDash}\n                  />\n                </div>\n              </div>\n            </Fullscreen>\n          </div>\n        )}\n      </ContainerQuery>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}