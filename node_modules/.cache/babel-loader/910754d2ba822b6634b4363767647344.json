{"ast":null,"code":"import _classCallCheck from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/carlvlewis/floodsight/src/components/Dashboard/CrossingListPage/DashboardCrossingListItem/DashboardCrossingListItem.js\";\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { ContainerQuery } from 'react-container-query';\nimport classnames from 'classnames';\nimport moment from 'moment';\nimport { logError } from 'services/logger';\nimport Date from 'components/Shared/DateTime/Date';\nimport Hour from 'components/Shared/DateTime/Hour';\nimport Location from 'components/Shared/CrossingListItem/Location';\nimport User from 'components/Shared/CrossingListItem/User';\nimport CrossingCommunityList from 'components/Shared/CrossingListItem/CrossingCommunityList';\nimport StatusToggle from 'components/Dashboard/CrossingListPage/DashboardCrossingListItem/StatusToggle';\nimport DashboardCrossingListItemControl from 'components/Dashboard/CrossingListPage/DashboardCrossingListItem/DashboardCrossingListItemControl';\nimport Dropdown from 'components/Shared/Form/Dropdown';\nimport DurationSelection from 'components/Dashboard/CrossingListPage/DashboardCrossingListItem/DurationSelection';\nimport SingleOptionDropdown from 'components/Shared/Form/Dropdown/SingleOptionDropdown';\nimport ButtonSecondary from 'components/Shared/Button/ButtonSecondary';\nimport ButtonPrimary from 'components/Shared/Button/ButtonPrimary';\nimport newStatusUpdateMutation from 'components/Dashboard/CrossingListPage/queries/newStatusUpdateMutation';\nimport crossingsQuery from 'components/Dashboard/CrossingListPage/queries/crossingsQuery';\nimport allCrossings from 'components/Shared/Map/queries/allCrossingsQuery';\nimport statusCountsQuery from 'components/Dashboard/CrossingListPage/queries/statusCountsQuery';\nimport statusUpdateFragment from 'components/Dashboard/CrossingListPage/queries/statusUpdateFragment';\nimport * as statusConstants from 'constants/StatusConstants';\nimport { LARGE_ITEM_MIN_WIDTH } from 'constants/containerQueryConstants';\nimport 'components/Dashboard/CrossingListPage/DashboardCrossingListItem/DashboardCrossingListItem.css';\nvar containerQuery = {\n  'DashboardCrossingListItem--lg': {\n    minWidth: LARGE_ITEM_MIN_WIDTH\n  }\n};\n\nvar DashboardCrossingListItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DashboardCrossingListItem, _React$Component);\n\n  function DashboardCrossingListItem(props) {\n    var _this;\n\n    _classCallCheck(this, DashboardCrossingListItem);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DashboardCrossingListItem).call(this, props));\n\n    _this.newStatusUpdate = function (e) {\n      var updateData = {\n        id: Math.round(Math.random() * -1000000),\n        crossingId: _this.props.crossing.id,\n        name: _this.props.crossing.name,\n        geojson: _this.props.crossing.geojson,\n        communityIds: _this.props.crossing.communityIds,\n        statusId: _this.state.selectedStatus,\n        reasonId: _this.state.selectedReason,\n        reopenDate: _this.state.selectedReopenDate,\n        indefiniteClosure: _this.state.selectedIndefiniteClosure,\n        notes: _this.state.notes,\n        user: _this.props.currentUser\n      };\n      var _this$props = _this.props,\n          refreshList = _this$props.refreshList,\n          clearMeasurerCache = _this$props.clearMeasurerCache;\n      var queriesToRefetch = _this.props.listOrMap === 'map' ? [{\n        query: statusCountsQuery\n      }, {\n        query: crossingsQuery,\n        variables: {\n          orderAsc: false,\n          pageCursor: null,\n          search: '%%',\n          showCaution: true,\n          showClosed: true,\n          showLongterm: true,\n          showOpen: true\n        }\n      }] : [{\n        query: statusCountsQuery\n      }, {\n        query: allCrossings,\n        variables: {\n          statusId: 1\n        }\n      }, {\n        query: allCrossings,\n        variables: {\n          statusId: 2\n        }\n      }, {\n        query: allCrossings,\n        variables: {\n          statusId: 3\n        }\n      }, {\n        query: allCrossings,\n        variables: {\n          statusId: 4\n        }\n      }];\n\n      _this.props.newStatusUpdateMutation({\n        variables: {\n          crossingId: updateData.crossingId,\n          statusId: updateData.statusId,\n          reasonId: updateData.reasonId,\n          reopenDate: updateData.reopenDate,\n          indefiniteClosure: updateData.indefiniteClosure,\n          notes: updateData.notes\n        },\n        optimisticResponse: {\n          newStatusUpdate: {\n            statusUpdate: {\n              crossingId: updateData.crossingId,\n              crossingByCrossingId: {\n                id: updateData.crossingId,\n                geojson: updateData.geojson,\n                latestStatusId: updateData.statusId,\n                communityIds: updateData.communityIds,\n                latestStatusUpdateId: updateData.id,\n                latestStatusCreatedAt: moment().format(),\n                name: updateData.name,\n                statusUpdateByLatestStatusUpdateId: {\n                  id: updateData.id,\n                  crossingId: updateData.crossingId,\n                  statusId: updateData.statusId,\n                  statusReasonId: updateData.reasonId,\n                  reopenDate: updateData.reopenDate,\n                  indefiniteClosure: updateData.indefiniteClosure,\n                  createdAt: moment().format(),\n                  notes: updateData.notes,\n                  userByCreatorId: {\n                    firstName: updateData.user.firstName,\n                    lastName: updateData.user.lastName,\n                    __typename: 'User'\n                  },\n                  __typename: 'StatusUpdate'\n                },\n                __typename: 'Crossing'\n              },\n              __typename: 'StatusUpdate'\n            },\n            __typename: 'NewStatusUpdatePayload'\n          }\n        },\n        update: function update(store, _ref) {\n          var newStatusUpdate = _ref.data.newStatusUpdate;\n          // Get the updated crossing from the status update mutation\n          var updatedCrossing = newStatusUpdate.statusUpdate.crossingByCrossingId; // Write the updated crossing to the cache\n\n          store.writeFragment({\n            id: \"Crossing:\".concat(updatedCrossing.id),\n            fragment: statusUpdateFragment,\n            data: updatedCrossing\n          }); // If we're in a list view, fix the sort order\n          // Map queries must also be updated, even if change took place on list page.\n\n          if (_this.props.listOrMap === 'list') {\n            _this.fixSort(store, updatedCrossing);\n\n            _this.updateMap(store, updatedCrossing);\n          } // If we're on the map, update the map queries\n\n\n          if (_this.props.listOrMap === 'map') {\n            _this.updateMap(store, updatedCrossing);\n          }\n        },\n        refetchQueries: queriesToRefetch\n      }).then(function (_ref2) {\n        var data = _ref2.data;\n        var update = data.newStatusUpdate.statusUpdate.crossingByCrossingId.statusUpdateByLatestStatusUpdateId;\n\n        _this.setState({\n          selectedStatus: update.statusId,\n          selectedReason: update.statusReasonId,\n          selectedReopenDate: update.reopenDate,\n          selectedIndefiniteClosure: update.indefiniteClosure,\n          notes: update.notes\n        });\n\n        if (clearMeasurerCache) {\n          clearMeasurerCache(true);\n          refreshList();\n        }\n      }).catch(function (error) {\n        logError(error);\n      });\n    };\n\n    _this.activateOpenToggle = function () {\n      _this.setState({\n        selectedStatus: statusConstants.OPEN,\n        notes: '',\n        selectedReason: null,\n        selectedReopenDate: null,\n        selectedIndefiniteClosure: false\n      });\n\n      if (_this.props.clearMeasurerCache) {\n        _this.props.clearMeasurerCache();\n      }\n    };\n\n    _this.activateCautionToggle = function () {\n      _this.setState({\n        selectedStatus: statusConstants.CAUTION,\n        notes: '',\n        selectedReason: _this.props.reasons.find(function (reason) {\n          return reason.statusId === statusConstants.CAUTION;\n        }).id,\n        selectedReopenDate: null,\n        selectedIndefiniteClosure: false\n      });\n\n      if (_this.props.clearMeasurerCache) {\n        _this.props.clearMeasurerCache();\n      }\n    };\n\n    _this.activateClosedToggle = function () {\n      _this.setState({\n        selectedStatus: statusConstants.CLOSED,\n        notes: '',\n        selectedReason: _this.props.reasons.find(function (reason) {\n          return reason.statusId === statusConstants.CLOSED;\n        }).id,\n        selectedReopenDate: null,\n        selectedIndefiniteClosure: false\n      });\n\n      if (_this.props.clearMeasurerCache) {\n        _this.props.clearMeasurerCache();\n      }\n    };\n\n    _this.activateLongtermToggle = function () {\n      _this.setState({\n        selectedStatus: statusConstants.LONGTERM,\n        notes: '',\n        selectedReason: _this.props.reasons.find(function (reason) {\n          return reason.statusId === statusConstants.LONGTERM;\n        }).id,\n        selectedReopenDate: _this.props.crossing.statusUpdateByLatestStatusUpdateId.reopenDate,\n        selectedIndefiniteClosure: _this.props.crossing.statusUpdateByLatestStatusUpdateId.indefiniteClosure\n      });\n\n      if (_this.props.clearMeasurerCache) {\n        _this.props.clearMeasurerCache();\n      }\n    };\n\n    _this.reasonChanged = function (e) {\n      _this.setState({\n        selectedReason: e.target.value\n      });\n\n      if (_this.props.clearMeasurerCache) {\n        _this.props.clearMeasurerCache();\n      }\n    };\n\n    _this.durationChanged = function (_ref3) {\n      var indefiniteClosure = _ref3.indefiniteClosure,\n          reopenDate = _ref3.reopenDate;\n\n      _this.setState({\n        selectedReopenDate: reopenDate\n      });\n\n      _this.setState({\n        selectedIndefiniteClosure: indefiniteClosure\n      });\n\n      if (_this.props.clearMeasurerCache) {\n        _this.props.clearMeasurerCache();\n      }\n    };\n\n    _this.notesChanged = function (e) {\n      _this.setState({\n        notes: e.target.value\n      });\n\n      if (_this.props.clearMeasurerCache) {\n        _this.props.clearMeasurerCache();\n      }\n    };\n\n    _this.cancelClicked = function () {\n      _this.setState({\n        selectedStatus: _this.props.crossing.statusUpdateByLatestStatusUpdateId.statusId,\n        selectedReason: _this.props.crossing.statusUpdateByLatestStatusUpdateId.statusReasonId,\n        selectedReopenDate: _this.props.crossing.statusUpdateByLatestStatusUpdateId.reopenDate,\n        selectedIndefiniteClosure: _this.props.crossing.statusUpdateByLatestStatusUpdateId.indefiniteClosure,\n        notes: _this.props.crossing.statusUpdateByLatestStatusUpdateId.notes\n      });\n\n      if (_this.props.clearMeasurerCache) {\n        _this.props.clearMeasurerCache();\n      }\n    };\n\n    _this.state = {\n      selectedStatus: props.crossing.statusUpdateByLatestStatusUpdateId.statusId,\n      selectedReason: props.crossing.statusUpdateByLatestStatusUpdateId.statusReasonId,\n      selectedReopenDate: props.crossing.statusUpdateByLatestStatusUpdateId.reopenDate,\n      selectedIndefiniteClosure: props.crossing.statusUpdateByLatestStatusUpdateId.indefiniteClosure,\n      notes: props.crossing.statusUpdateByLatestStatusUpdateId.notes\n    };\n    return _this;\n  }\n\n  _createClass(DashboardCrossingListItem, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function UNSAFE_componentWillMount() {\n      var _this$props2 = this.props,\n          restoreDirtyState = _this$props2.restoreDirtyState,\n          crossing = _this$props2.crossing;\n\n      if (restoreDirtyState) {\n        var savedState = restoreDirtyState(crossing.id);\n\n        if (savedState) {\n          this.setState({\n            selectedStatus: savedState.selectedStatus\n          });\n          this.setState({\n            selectedReason: savedState.selectedReason\n          });\n          this.setState({\n            selectedReopenDate: savedState.selectedReopenDate\n          });\n          this.setState({\n            selectedIndefiniteClosure: savedState.selectedIndefiniteClosure\n          });\n          this.setState({\n            notes: savedState.notes\n          });\n          this.props.clearMeasurerCache();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var saveDirtyState = this.props.saveDirtyState;\n      var stateToSave = {\n        crossingId: this.props.crossing.id,\n        selectedStatus: this.state.selectedStatus,\n        selectedReason: this.state.selectedReason,\n        selectedReopenDate: this.state.selectedReopenDate,\n        selectedIndefiniteClosure: this.state.selectedIndefiniteClosure,\n        notes: this.state.notes\n      };\n\n      if (this.isDirty() && this.saveDirtyState) {\n        saveDirtyState(stateToSave);\n      }\n    }\n  }, {\n    key: \"fixSort\",\n    value: function fixSort(store, updatedCrossing) {\n      // Get the edge from the current query\n      var crossingQueryVariables = this.props.crossingQueryVariables;\n      var data = store.readQuery({\n        query: crossingsQuery,\n        variables: crossingQueryVariables\n      });\n      var edge = data.searchCrossings.edges.find(function (edge) {\n        return edge.node.id === updatedCrossing.id;\n      }); // Get all the query variable combinations we have cached\n\n      var queryVariables = Object.keys(store.data.data).filter(function (query) {\n        return query.includes('searchCrossings') && query.endsWith(')');\n      }).map(function (q) {\n        return JSON.parse(q.replace(/(^\\$\\w*\\.\\w*\\()|(\\)$)/g, ''));\n      }); // Update the sorting accordingly\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = queryVariables[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var qv = _step.value;\n          // Hacky fix for status counts\n          if (qv.orderAsc === undefined) continue;\n          var qvars = {\n            orderAsc: qv.orderAsc,\n            pageCursor: null,\n            search: qv.search,\n            showCaution: qv.showCaution,\n            showClosed: qv.showClosed,\n            showLongterm: qv.showLongterm,\n            showOpen: qv.showOpen,\n            communityId: qv.communityId\n          };\n          this.doASortFix(store, updatedCrossing, qvars, edge);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"doASortFix\",\n    value: function doASortFix(store, updatedCrossing, queryVariables, edge) {\n      // Get the index of the updated crossing\n      var index = -1;\n      var data;\n\n      try {\n        data = store.readQuery({\n          query: crossingsQuery,\n          variables: queryVariables\n        });\n        index = data.searchCrossings.edges.findIndex(function (edge) {\n          return edge.node.id === updatedCrossing.id;\n        });\n      } catch (err) {\n        logError(err);\n        return;\n      } // Remove it if it's on a list already\n\n\n      if (index !== -1) {\n        data.searchCrossings.edges.splice(index, 1);\n      } // Add it to a list if appropriate\n\n\n      if (queryVariables.showOpen && updatedCrossing.latestStatusId === statusConstants.OPEN || queryVariables.showCaution && updatedCrossing.latestStatusId === statusConstants.CAUTION || queryVariables.showClosed && updatedCrossing.latestStatusId === statusConstants.CLOSED || queryVariables.showLongterm && updatedCrossing.latestStatusId === statusConstants.LONGTERM) {\n        if (queryVariables.orderAsc) {\n          data.searchCrossings.edges.splice(-1, 0, edge);\n        } else {\n          data.searchCrossings.edges.splice(0, 0, edge);\n        }\n      } // write it to the apollo cache\n\n\n      store.writeQuery({\n        query: crossingsQuery,\n        variables: queryVariables,\n        data: data\n      });\n    }\n  }, {\n    key: \"updateMap\",\n    value: function updateMap(store, updatedCrossing) {\n      // Get all the query variable combinations we have cached\n      var queryVariables = Object.keys(store.data.data).filter(function (query) {\n        return query.includes('searchCrossings') && query.endsWith(')');\n      }).map(function (q) {\n        return JSON.parse(q.replace(/(^\\$\\w*\\.\\w*\\()|(\\)$)/g, ''));\n      }); // Update the sorting accordingly\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = queryVariables[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var qv = _step2.value;\n          // Hacky fix for status counts\n          if (qv.orderAsc !== undefined) continue;\n          var qvars = {\n            search: qv.search,\n            showCaution: qv.showCaution,\n            showClosed: qv.showClosed,\n            showLongterm: qv.showLongterm,\n            showOpen: qv.showOpen,\n            communityId: qv.communityId\n          };\n          this.doAMapFix(store, updatedCrossing, qvars);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      if (this.props.listOrMap === 'map') {\n        this.props.setSelectedFeature({\n          type: \"Crossing\",\n          data: {\n            communityIds: updatedCrossing.communityIds,\n            coordinates: JSON.parse(updatedCrossing.geojson).coordinates,\n            geojson: updatedCrossing.geojson,\n            id: updatedCrossing.id,\n            latestStatusCreatedAt: updatedCrossing.latestStatusCreatedAt,\n            latestStatusId: updatedCrossing.latestStatusId,\n            name: updatedCrossing.name\n          }\n        });\n      }\n    }\n  }, {\n    key: \"doAMapFix\",\n    value: function doAMapFix(store, updatedCrossing, qvars) {\n      // Get the index of the updated crossing\n      var index = -1;\n      var data;\n\n      try {\n        data = store.readQuery({\n          query: allCrossings,\n          variables: qvars\n        });\n        index = data.searchCrossings.nodes.findIndex(function (node) {\n          return node.id === updatedCrossing.id;\n        });\n      } catch (err) {\n        logError(err);\n        return;\n      } // Remove it if it's on a layer already\n\n\n      if (index !== -1) {\n        data.searchCrossings.nodes.splice(index, 1);\n      } // Add it to a layer if appropriate\n\n\n      if (qvars.showOpen && updatedCrossing.latestStatusId === statusConstants.OPEN || qvars.showCaution && updatedCrossing.latestStatusId === statusConstants.CAUTION || qvars.showClosed && updatedCrossing.latestStatusId === statusConstants.CLOSED || qvars.showLongterm && updatedCrossing.latestStatusId === statusConstants.LONGTERM) {\n        data.searchCrossings.nodes.push({\n          id: updatedCrossing.id,\n          geojson: updatedCrossing.geojson,\n          latestStatusId: updatedCrossing.latestStatusId,\n          communityIds: updatedCrossing.communityIds,\n          name: updatedCrossing.name,\n          latestStatusCreatedAt: updatedCrossing.latestStatusCreatedAt,\n          __typename: 'Crossing'\n        });\n      } // write it to the apollo cache\n\n\n      store.writeQuery({\n        query: allCrossings,\n        variables: qvars,\n        data: data\n      });\n    }\n  }, {\n    key: \"isDirty\",\n    value: function isDirty() {\n      // Temporary fix for storybook\n      if (this.props.dirty) return true;\n      var savedStatus = this.props.crossing.statusUpdateByLatestStatusUpdateId.statusId;\n      var savedReason = this.props.crossing.statusUpdateByLatestStatusUpdateId.statusReasonId;\n      var savedOpenDate = this.props.crossing.statusUpdateByLatestStatusUpdateId.reopenDate;\n      var savedIndefiniteClosure = this.props.crossing.statusUpdateByLatestStatusUpdateId.indefiniteClosure;\n      var savedNotes = this.props.crossing.statusUpdateByLatestStatusUpdateId.notes;\n      return savedStatus !== this.state.selectedStatus || savedReason !== this.state.selectedReason || savedOpenDate !== this.state.selectedReopenDate || savedIndefiniteClosure !== this.state.selectedIndefiniteClosure || savedNotes !== this.state.notes;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          crossing = _this$props3.crossing,\n          allCommunities = _this$props3.allCommunities;\n      var reasons = this.props.reasons;\n      reasons = reasons.filter(function (reason) {\n        return reason.statusId === _this2.state.selectedStatus;\n      });\n      var _crossing$statusUpdat = crossing.statusUpdateByLatestStatusUpdateId,\n          createdAt = _crossing$statusUpdat.createdAt,\n          userByCreatorId = _crossing$statusUpdat.userByCreatorId;\n      var show = [];\n\n      switch (this.state.selectedStatus) {\n        case statusConstants.OPEN:\n          show = this.isDirty() ? ['cancelSave'] : [];\n          break;\n\n        case statusConstants.CAUTION:\n        case statusConstants.CLOSED:\n          show = this.isDirty() ? ['reason', 'cancelSave'] : ['reason'];\n          break;\n\n        case statusConstants.LONGTERM:\n          show = this.isDirty() ? ['reason', 'duration', 'cancelSave'] : ['reason', 'duration'];\n          break;\n\n        default:\n          break;\n      }\n\n      var CrossingListItemJSX = React.createElement(\"div\", {\n        className: \"DashboardCrossingListItem DashboardCrossingListItem--layout-\".concat(this.props.listOrMap),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 554\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"DashboardCrossingListItem__overview\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 559\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"DashboardCrossingListItem__crossing-name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"/dashboard/crossing/\".concat(crossing.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 561\n        },\n        __self: this\n      }, crossing.name)), React.createElement(\"div\", {\n        className: \"DashboardCrossingListItem__overview-details\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 563\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"DashboardCrossingListItem__overview-location\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 564\n        },\n        __self: this\n      }, React.createElement(Location, {\n        crossing: crossing,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 565\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"DashboardCrossingListItem__community-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 566\n        },\n        __self: this\n      }, React.createElement(CrossingCommunityList, {\n        crossing: crossing,\n        allCommunities: allCommunities,\n        onDash: this.props.onDash,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 567\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"DashboardCrossingListItem__overview-meta\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 574\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575\n        },\n        __self: this\n      }, React.createElement(Date, {\n        date: createdAt,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 576\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 578\n        },\n        __self: this\n      }, React.createElement(Hour, {\n        date: createdAt,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 579\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"DashboardCrossingListItem__user\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 581\n        },\n        __self: this\n      }, React.createElement(User, {\n        user: userByCreatorId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 582\n        },\n        __self: this\n      }))))), React.createElement(\"div\", {\n        className: \"DashboardCrossingListItem__controls\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 587\n        },\n        __self: this\n      }, React.createElement(DashboardCrossingListItemControl, {\n        label: React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 590\n          },\n          __self: this\n        }, \"Status: \", statusConstants.statusNames[this.state.selectedStatus]),\n        className: \"DashboardCrossingListItem__control--status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 588\n        },\n        __self: this\n      }, React.createElement(StatusToggle, {\n        activeStatus: this.state.selectedStatus,\n        activateOpenToggle: this.activateOpenToggle,\n        activateCautionToggle: this.activateCautionToggle,\n        activateClosedToggle: this.activateClosedToggle,\n        activateLongtermToggle: this.activateLongtermToggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 596\n        },\n        __self: this\n      })), show.includes('reason') && React.createElement(DashboardCrossingListItemControl, {\n        label: \"Reason\",\n        isRequired: this.isDirty(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 606\n        },\n        __self: this\n      }, reasons.length > 1 ? React.createElement(Dropdown, {\n        options: reasons,\n        selected: this.state.selectedReason,\n        onChange: this.reasonChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 611\n        },\n        __self: this\n      }) : React.createElement(SingleOptionDropdown, {\n        option: reasons[0].name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 617\n        },\n        __self: this\n      })), React.createElement(DashboardCrossingListItemControl, {\n        label: \"Notes to the public\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 623\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"DashboardCrossingListItem__notes-text-box\",\n        type: \"text\",\n        value: this.state.notes,\n        onChange: this.notesChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 624\n        },\n        __self: this\n      })), show.includes('duration') && React.createElement(DashboardCrossingListItemControl, {\n        label: \"Duration\",\n        isRequired: this.isDirty(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 632\n        },\n        __self: this\n      }, React.createElement(DurationSelection, {\n        reopenDate: this.state.selectedReopenDate,\n        indefiniteClosure: this.state.selectedIndefiniteClosure,\n        onChange: this.durationChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 636\n        },\n        __self: this\n      }))), show.includes('cancelSave') && React.createElement(\"div\", {\n        className: \"DashboardCrossingListItem__button-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 645\n        },\n        __self: this\n      }, React.createElement(ButtonSecondary, {\n        className: \"DashboardCrossingListItem__cancel-button\",\n        onClick: this.cancelClicked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 646\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(ButtonPrimary, {\n        className: \"DashboardCrossingListItem__save-button\",\n        onClick: this.newStatusUpdate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 652\n        },\n        __self: this\n      }, \"Submit\")));\n\n      if (!this.props.cqClassName) {\n        return React.createElement(ContainerQuery, {\n          query: containerQuery,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 665\n          },\n          __self: this\n        }, function (params) {\n          return React.createElement(\"div\", {\n            className: classnames(params, {\n              'DashboardCrossingListItem--dirty': _this2.isDirty()\n            }),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 667\n            },\n            __self: this\n          }, CrossingListItemJSX);\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: classnames(this.props.cqClassName, {\n          'DashboardCrossingListItem--dirty': this.isDirty()\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 680\n        },\n        __self: this\n      }, CrossingListItemJSX);\n    }\n  }]);\n\n  return DashboardCrossingListItem;\n}(React.Component);\n\nexport default graphql(newStatusUpdateMutation, {\n  name: 'newStatusUpdateMutation'\n})(DashboardCrossingListItem);","map":{"version":3,"sources":["/Users/carlvlewis/floodsight/src/components/Dashboard/CrossingListPage/DashboardCrossingListItem/DashboardCrossingListItem.js"],"names":["React","graphql","ContainerQuery","classnames","moment","logError","Date","Hour","Location","User","CrossingCommunityList","StatusToggle","DashboardCrossingListItemControl","Dropdown","DurationSelection","SingleOptionDropdown","ButtonSecondary","ButtonPrimary","newStatusUpdateMutation","crossingsQuery","allCrossings","statusCountsQuery","statusUpdateFragment","statusConstants","LARGE_ITEM_MIN_WIDTH","containerQuery","minWidth","DashboardCrossingListItem","props","newStatusUpdate","e","updateData","id","Math","round","random","crossingId","crossing","name","geojson","communityIds","statusId","state","selectedStatus","reasonId","selectedReason","reopenDate","selectedReopenDate","indefiniteClosure","selectedIndefiniteClosure","notes","user","currentUser","refreshList","clearMeasurerCache","queriesToRefetch","listOrMap","query","variables","orderAsc","pageCursor","search","showCaution","showClosed","showLongterm","showOpen","optimisticResponse","statusUpdate","crossingByCrossingId","latestStatusId","latestStatusUpdateId","latestStatusCreatedAt","format","statusUpdateByLatestStatusUpdateId","statusReasonId","createdAt","userByCreatorId","firstName","lastName","__typename","update","store","data","updatedCrossing","writeFragment","fragment","fixSort","updateMap","refetchQueries","then","setState","catch","error","activateOpenToggle","OPEN","activateCautionToggle","CAUTION","reasons","find","reason","activateClosedToggle","CLOSED","activateLongtermToggle","LONGTERM","reasonChanged","target","value","durationChanged","notesChanged","cancelClicked","restoreDirtyState","savedState","saveDirtyState","stateToSave","isDirty","crossingQueryVariables","readQuery","edge","searchCrossings","edges","node","queryVariables","Object","keys","filter","includes","endsWith","map","q","JSON","parse","replace","qv","undefined","qvars","communityId","doASortFix","index","findIndex","err","splice","writeQuery","doAMapFix","setSelectedFeature","type","coordinates","nodes","push","dirty","savedStatus","savedReason","savedOpenDate","savedIndefiniteClosure","savedNotes","allCommunities","show","CrossingListItemJSX","onDash","statusNames","length","cqClassName","params","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAEA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,OAAOC,QAAP,MAAqB,6CAArB;AACA,OAAOC,IAAP,MAAiB,yCAAjB;AACA,OAAOC,qBAAP,MAAkC,0DAAlC;AACA,OAAOC,YAAP,MAAyB,8EAAzB;AACA,OAAOC,gCAAP,MAA6C,kGAA7C;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,iBAAP,MAA8B,mFAA9B;AACA,OAAOC,oBAAP,MAAgC,sDAAhC;AACA,OAAOC,eAAP,MAA4B,0CAA5B;AACA,OAAOC,aAAP,MAA0B,wCAA1B;AAEA,OAAOC,uBAAP,MAAoC,uEAApC;AACA,OAAOC,cAAP,MAA2B,8DAA3B;AACA,OAAOC,YAAP,MAAyB,iDAAzB;AACA,OAAOC,iBAAP,MAA8B,iEAA9B;AACA,OAAOC,oBAAP,MAAiC,oEAAjC;AAEA,OAAO,KAAKC,eAAZ,MAAiC,2BAAjC;AACA,SAASC,oBAAT,QAAqC,mCAArC;AAEA,OAAO,+FAAP;AAEA,IAAMC,cAAc,GAAG;AACrB,mCAAiC;AAC/BC,IAAAA,QAAQ,EAAEF;AADqB;AADZ,CAAvB;;IAMMG,yB;;;;;AACJ,qCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,mGAAMA,KAAN;;AADiB,UA2NnBC,eA3NmB,GA2ND,UAAAC,CAAC,EAAI;AACrB,UAAMC,UAAU,GAAG;AACjBC,QAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAAC,OAA5B,CADa;AAEjBC,QAAAA,UAAU,EAAE,MAAKR,KAAL,CAAWS,QAAX,CAAoBL,EAFf;AAGjBM,QAAAA,IAAI,EAAE,MAAKV,KAAL,CAAWS,QAAX,CAAoBC,IAHT;AAIjBC,QAAAA,OAAO,EAAE,MAAKX,KAAL,CAAWS,QAAX,CAAoBE,OAJZ;AAKjBC,QAAAA,YAAY,EAAE,MAAKZ,KAAL,CAAWS,QAAX,CAAoBG,YALjB;AAMjBC,QAAAA,QAAQ,EAAE,MAAKC,KAAL,CAAWC,cANJ;AAOjBC,QAAAA,QAAQ,EAAE,MAAKF,KAAL,CAAWG,cAPJ;AAQjBC,QAAAA,UAAU,EAAE,MAAKJ,KAAL,CAAWK,kBARN;AASjBC,QAAAA,iBAAiB,EAAE,MAAKN,KAAL,CAAWO,yBATb;AAUjBC,QAAAA,KAAK,EAAE,MAAKR,KAAL,CAAWQ,KAVD;AAWjBC,QAAAA,IAAI,EAAE,MAAKvB,KAAL,CAAWwB;AAXA,OAAnB;AADqB,wBAcuB,MAAKxB,KAd5B;AAAA,UAcbyB,WAda,eAcbA,WAda;AAAA,UAcAC,kBAdA,eAcAA,kBAdA;AAgBrB,UAAMC,gBAAgB,GACpB,MAAK3B,KAAL,CAAW4B,SAAX,KAAyB,KAAzB,GACI,CACE;AAAEC,QAAAA,KAAK,EAAEpC;AAAT,OADF,EAEE;AACEoC,QAAAA,KAAK,EAAEtC,cADT;AAEEuC,QAAAA,SAAS,EAAE;AACTC,UAAAA,QAAQ,EAAE,KADD;AAETC,UAAAA,UAAU,EAAE,IAFH;AAGTC,UAAAA,MAAM,EAAE,IAHC;AAITC,UAAAA,WAAW,EAAE,IAJJ;AAKTC,UAAAA,UAAU,EAAE,IALH;AAMTC,UAAAA,YAAY,EAAE,IANL;AAOTC,UAAAA,QAAQ,EAAE;AAPD;AAFb,OAFF,CADJ,GAgBI,CACE;AAAER,QAAAA,KAAK,EAAEpC;AAAT,OADF,EAEE;AAAEoC,QAAAA,KAAK,EAAErC,YAAT;AAAuBsC,QAAAA,SAAS,EAAE;AAAEjB,UAAAA,QAAQ,EAAE;AAAZ;AAAlC,OAFF,EAGE;AAAEgB,QAAAA,KAAK,EAAErC,YAAT;AAAuBsC,QAAAA,SAAS,EAAE;AAAEjB,UAAAA,QAAQ,EAAE;AAAZ;AAAlC,OAHF,EAIE;AAAEgB,QAAAA,KAAK,EAAErC,YAAT;AAAuBsC,QAAAA,SAAS,EAAE;AAAEjB,UAAAA,QAAQ,EAAE;AAAZ;AAAlC,OAJF,EAKE;AAAEgB,QAAAA,KAAK,EAAErC,YAAT;AAAuBsC,QAAAA,SAAS,EAAE;AAAEjB,UAAAA,QAAQ,EAAE;AAAZ;AAAlC,OALF,CAjBN;;AAyBA,YAAKb,KAAL,CACGV,uBADH,CAC2B;AACvBwC,QAAAA,SAAS,EAAE;AACTtB,UAAAA,UAAU,EAAEL,UAAU,CAACK,UADd;AAETK,UAAAA,QAAQ,EAAEV,UAAU,CAACU,QAFZ;AAGTG,UAAAA,QAAQ,EAAEb,UAAU,CAACa,QAHZ;AAITE,UAAAA,UAAU,EAAEf,UAAU,CAACe,UAJd;AAKTE,UAAAA,iBAAiB,EAAEjB,UAAU,CAACiB,iBALrB;AAMTE,UAAAA,KAAK,EAAEnB,UAAU,CAACmB;AANT,SADY;AASvBgB,QAAAA,kBAAkB,EAAE;AAClBrC,UAAAA,eAAe,EAAE;AACfsC,YAAAA,YAAY,EAAE;AACZ/B,cAAAA,UAAU,EAAEL,UAAU,CAACK,UADX;AAEZgC,cAAAA,oBAAoB,EAAE;AACpBpC,gBAAAA,EAAE,EAAED,UAAU,CAACK,UADK;AAEpBG,gBAAAA,OAAO,EAAER,UAAU,CAACQ,OAFA;AAGpB8B,gBAAAA,cAAc,EAAEtC,UAAU,CAACU,QAHP;AAIpBD,gBAAAA,YAAY,EAAET,UAAU,CAACS,YAJL;AAKpB8B,gBAAAA,oBAAoB,EAAEvC,UAAU,CAACC,EALb;AAMpBuC,gBAAAA,qBAAqB,EAAEnE,MAAM,GAAGoE,MAAT,EANH;AAOpBlC,gBAAAA,IAAI,EAAEP,UAAU,CAACO,IAPG;AAQpBmC,gBAAAA,kCAAkC,EAAE;AAClCzC,kBAAAA,EAAE,EAAED,UAAU,CAACC,EADmB;AAElCI,kBAAAA,UAAU,EAAEL,UAAU,CAACK,UAFW;AAGlCK,kBAAAA,QAAQ,EAAEV,UAAU,CAACU,QAHa;AAIlCiC,kBAAAA,cAAc,EAAE3C,UAAU,CAACa,QAJO;AAKlCE,kBAAAA,UAAU,EAAEf,UAAU,CAACe,UALW;AAMlCE,kBAAAA,iBAAiB,EAAEjB,UAAU,CAACiB,iBANI;AAOlC2B,kBAAAA,SAAS,EAAEvE,MAAM,GAAGoE,MAAT,EAPuB;AAQlCtB,kBAAAA,KAAK,EAAEnB,UAAU,CAACmB,KARgB;AASlC0B,kBAAAA,eAAe,EAAE;AACfC,oBAAAA,SAAS,EAAE9C,UAAU,CAACoB,IAAX,CAAgB0B,SADZ;AAEfC,oBAAAA,QAAQ,EAAE/C,UAAU,CAACoB,IAAX,CAAgB2B,QAFX;AAGfC,oBAAAA,UAAU,EAAE;AAHG,mBATiB;AAclCA,kBAAAA,UAAU,EAAE;AAdsB,iBARhB;AAwBpBA,gBAAAA,UAAU,EAAE;AAxBQ,eAFV;AA4BZA,cAAAA,UAAU,EAAE;AA5BA,aADC;AA+BfA,YAAAA,UAAU,EAAE;AA/BG;AADC,SATG;AA4CvBC,QAAAA,MAAM,EAAE,gBAACC,KAAD,QAA0C;AAAA,cAAxBpD,eAAwB,QAAhCqD,IAAgC,CAAxBrD,eAAwB;AAChD;AACA,cAAMsD,eAAe,GACnBtD,eAAe,CAACsC,YAAhB,CAA6BC,oBAD/B,CAFgD,CAKhD;;AACAa,UAAAA,KAAK,CAACG,aAAN,CAAoB;AAClBpD,YAAAA,EAAE,qBAAcmD,eAAe,CAACnD,EAA9B,CADgB;AAElBqD,YAAAA,QAAQ,EAAE/D,oBAFQ;AAGlB4D,YAAAA,IAAI,EAAEC;AAHY,WAApB,EANgD,CAYhD;AACA;;AACA,cAAI,MAAKvD,KAAL,CAAW4B,SAAX,KAAyB,MAA7B,EAAqC;AACnC,kBAAK8B,OAAL,CAAaL,KAAb,EAAoBE,eAApB;;AACA,kBAAKI,SAAL,CAAeN,KAAf,EAAsBE,eAAtB;AACD,WAjB+C,CAmBhD;;;AACA,cAAI,MAAKvD,KAAL,CAAW4B,SAAX,KAAyB,KAA7B,EAAoC;AAClC,kBAAK+B,SAAL,CAAeN,KAAf,EAAsBE,eAAtB;AACD;AACF,SAnEsB;AAoEvBK,QAAAA,cAAc,EAAEjC;AApEO,OAD3B,EAuEGkC,IAvEH,CAuEQ,iBAAc;AAAA,YAAXP,IAAW,SAAXA,IAAW;AAClB,YAAMF,MAAM,GACVE,IAAI,CAACrD,eAAL,CAAqBsC,YAArB,CAAkCC,oBAAlC,CACGK,kCAFL;;AAIA,cAAKiB,QAAL,CAAc;AACZ/C,UAAAA,cAAc,EAAEqC,MAAM,CAACvC,QADX;AAEZI,UAAAA,cAAc,EAAEmC,MAAM,CAACN,cAFX;AAGZ3B,UAAAA,kBAAkB,EAAEiC,MAAM,CAAClC,UAHf;AAIZG,UAAAA,yBAAyB,EAAE+B,MAAM,CAAChC,iBAJtB;AAKZE,UAAAA,KAAK,EAAE8B,MAAM,CAAC9B;AALF,SAAd;;AAOA,YAAII,kBAAJ,EAAwB;AACtBA,UAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAD,UAAAA,WAAW;AACZ;AACF,OAvFH,EAwFGsC,KAxFH,CAwFS,UAAAC,KAAK,EAAI;AACdvF,QAAAA,QAAQ,CAACuF,KAAD,CAAR;AACD,OA1FH;AA2FD,KA/VkB;;AAAA,UAiWnBC,kBAjWmB,GAiWE,YAAM;AACzB,YAAKH,QAAL,CAAc;AACZ/C,QAAAA,cAAc,EAAEpB,eAAe,CAACuE,IADpB;AAEZ5C,QAAAA,KAAK,EAAE,EAFK;AAGZL,QAAAA,cAAc,EAAE,IAHJ;AAIZE,QAAAA,kBAAkB,EAAE,IAJR;AAKZE,QAAAA,yBAAyB,EAAE;AALf,OAAd;;AAOA,UAAI,MAAKrB,KAAL,CAAW0B,kBAAf,EAAmC;AACjC,cAAK1B,KAAL,CAAW0B,kBAAX;AACD;AACF,KA5WkB;;AAAA,UA8WnByC,qBA9WmB,GA8WK,YAAM;AAC5B,YAAKL,QAAL,CAAc;AACZ/C,QAAAA,cAAc,EAAEpB,eAAe,CAACyE,OADpB;AAEZ9C,QAAAA,KAAK,EAAE,EAFK;AAGZL,QAAAA,cAAc,EAAE,MAAKjB,KAAL,CAAWqE,OAAX,CAAmBC,IAAnB,CACd,UAAAC,MAAM;AAAA,iBAAIA,MAAM,CAAC1D,QAAP,KAAoBlB,eAAe,CAACyE,OAAxC;AAAA,SADQ,EAEdhE,EALU;AAMZe,QAAAA,kBAAkB,EAAE,IANR;AAOZE,QAAAA,yBAAyB,EAAE;AAPf,OAAd;;AAUA,UAAI,MAAKrB,KAAL,CAAW0B,kBAAf,EAAmC;AACjC,cAAK1B,KAAL,CAAW0B,kBAAX;AACD;AACF,KA5XkB;;AAAA,UA8XnB8C,oBA9XmB,GA8XI,YAAM;AAC3B,YAAKV,QAAL,CAAc;AACZ/C,QAAAA,cAAc,EAAEpB,eAAe,CAAC8E,MADpB;AAEZnD,QAAAA,KAAK,EAAE,EAFK;AAGZL,QAAAA,cAAc,EAAE,MAAKjB,KAAL,CAAWqE,OAAX,CAAmBC,IAAnB,CACd,UAAAC,MAAM;AAAA,iBAAIA,MAAM,CAAC1D,QAAP,KAAoBlB,eAAe,CAAC8E,MAAxC;AAAA,SADQ,EAEdrE,EALU;AAMZe,QAAAA,kBAAkB,EAAE,IANR;AAOZE,QAAAA,yBAAyB,EAAE;AAPf,OAAd;;AAUA,UAAI,MAAKrB,KAAL,CAAW0B,kBAAf,EAAmC;AACjC,cAAK1B,KAAL,CAAW0B,kBAAX;AACD;AACF,KA5YkB;;AAAA,UA8YnBgD,sBA9YmB,GA8YM,YAAM;AAC7B,YAAKZ,QAAL,CAAc;AACZ/C,QAAAA,cAAc,EAAEpB,eAAe,CAACgF,QADpB;AAEZrD,QAAAA,KAAK,EAAE,EAFK;AAGZL,QAAAA,cAAc,EAAE,MAAKjB,KAAL,CAAWqE,OAAX,CAAmBC,IAAnB,CACd,UAAAC,MAAM;AAAA,iBAAIA,MAAM,CAAC1D,QAAP,KAAoBlB,eAAe,CAACgF,QAAxC;AAAA,SADQ,EAEdvE,EALU;AAMZe,QAAAA,kBAAkB,EAAE,MAAKnB,KAAL,CAAWS,QAAX,CAAoBoC,kCAApB,CACjB3B,UAPS;AAQZG,QAAAA,yBAAyB,EAAE,MAAKrB,KAAL,CAAWS,QAAX,CAAoBoC,kCAApB,CACxBzB;AATS,OAAd;;AAYA,UAAI,MAAKpB,KAAL,CAAW0B,kBAAf,EAAmC;AACjC,cAAK1B,KAAL,CAAW0B,kBAAX;AACD;AACF,KA9ZkB;;AAAA,UAganBkD,aAhamB,GAgaH,UAAA1E,CAAC,EAAI;AACnB,YAAK4D,QAAL,CAAc;AAAE7C,QAAAA,cAAc,EAAEf,CAAC,CAAC2E,MAAF,CAASC;AAA3B,OAAd;;AAEA,UAAI,MAAK9E,KAAL,CAAW0B,kBAAf,EAAmC;AACjC,cAAK1B,KAAL,CAAW0B,kBAAX;AACD;AACF,KAtakB;;AAAA,UAwanBqD,eAxamB,GAwaD,iBAAqC;AAAA,UAAnC3D,iBAAmC,SAAnCA,iBAAmC;AAAA,UAAhBF,UAAgB,SAAhBA,UAAgB;;AACrD,YAAK4C,QAAL,CAAc;AAAE3C,QAAAA,kBAAkB,EAAED;AAAtB,OAAd;;AACA,YAAK4C,QAAL,CAAc;AAAEzC,QAAAA,yBAAyB,EAAED;AAA7B,OAAd;;AAEA,UAAI,MAAKpB,KAAL,CAAW0B,kBAAf,EAAmC;AACjC,cAAK1B,KAAL,CAAW0B,kBAAX;AACD;AACF,KA/akB;;AAAA,UAibnBsD,YAjbmB,GAibJ,UAAA9E,CAAC,EAAI;AAClB,YAAK4D,QAAL,CAAc;AAAExC,QAAAA,KAAK,EAAEpB,CAAC,CAAC2E,MAAF,CAASC;AAAlB,OAAd;;AAEA,UAAI,MAAK9E,KAAL,CAAW0B,kBAAf,EAAmC;AACjC,cAAK1B,KAAL,CAAW0B,kBAAX;AACD;AACF,KAvbkB;;AAAA,UAybnBuD,aAzbmB,GAybH,YAAM;AACpB,YAAKnB,QAAL,CAAc;AACZ/C,QAAAA,cAAc,EAAE,MAAKf,KAAL,CAAWS,QAAX,CAAoBoC,kCAApB,CACbhC,QAFS;AAGZI,QAAAA,cAAc,EAAE,MAAKjB,KAAL,CAAWS,QAAX,CAAoBoC,kCAApB,CACbC,cAJS;AAKZ3B,QAAAA,kBAAkB,EAAE,MAAKnB,KAAL,CAAWS,QAAX,CAAoBoC,kCAApB,CACjB3B,UANS;AAOZG,QAAAA,yBAAyB,EAAG,MAAKrB,KAAL,CAAWS,QAAX,CAAoBoC,kCAApB,CACzBzB,iBARS;AASZE,QAAAA,KAAK,EAAE,MAAKtB,KAAL,CAAWS,QAAX,CAAoBoC,kCAApB,CAAuDvB;AATlD,OAAd;;AAYA,UAAI,MAAKtB,KAAL,CAAW0B,kBAAf,EAAmC;AACjC,cAAK1B,KAAL,CAAW0B,kBAAX;AACD;AACF,KAzckB;;AAEjB,UAAKZ,KAAL,GAAa;AACXC,MAAAA,cAAc,EACZf,KAAK,CAACS,QAAN,CAAeoC,kCAAf,CAAkDhC,QAFzC;AAGXI,MAAAA,cAAc,EACZjB,KAAK,CAACS,QAAN,CAAeoC,kCAAf,CAAkDC,cAJzC;AAKX3B,MAAAA,kBAAkB,EAChBnB,KAAK,CAACS,QAAN,CAAeoC,kCAAf,CAAkD3B,UANzC;AAOXG,MAAAA,yBAAyB,EACvBrB,KAAK,CAACS,QAAN,CAAeoC,kCAAf,CAAkDzB,iBARzC;AASXE,MAAAA,KAAK,EAAEtB,KAAK,CAACS,QAAN,CAAeoC,kCAAf,CAAkDvB;AAT9C,KAAb;AAFiB;AAalB;;;;gDAE2B;AAAA,yBACc,KAAKtB,KADnB;AAAA,UAClBkF,iBADkB,gBAClBA,iBADkB;AAAA,UACCzE,QADD,gBACCA,QADD;;AAE1B,UAAIyE,iBAAJ,EAAuB;AACrB,YAAMC,UAAU,GAAGD,iBAAiB,CAACzE,QAAQ,CAACL,EAAV,CAApC;;AACA,YAAI+E,UAAJ,EAAgB;AACd,eAAKrB,QAAL,CAAc;AAAE/C,YAAAA,cAAc,EAAEoE,UAAU,CAACpE;AAA7B,WAAd;AACA,eAAK+C,QAAL,CAAc;AAAE7C,YAAAA,cAAc,EAAEkE,UAAU,CAAClE;AAA7B,WAAd;AACA,eAAK6C,QAAL,CAAc;AAAE3C,YAAAA,kBAAkB,EAAEgE,UAAU,CAAChE;AAAjC,WAAd;AACA,eAAK2C,QAAL,CAAc;AAAEzC,YAAAA,yBAAyB,EAAE8D,UAAU,CAAC9D;AAAxC,WAAd;AACA,eAAKyC,QAAL,CAAc;AAAExC,YAAAA,KAAK,EAAE6D,UAAU,CAAC7D;AAApB,WAAd;AACA,eAAKtB,KAAL,CAAW0B,kBAAX;AACD;AACF;AACF;;;2CAEsB;AAAA,UACb0D,cADa,GACM,KAAKpF,KADX,CACboF,cADa;AAGrB,UAAMC,WAAW,GAAG;AAClB7E,QAAAA,UAAU,EAAE,KAAKR,KAAL,CAAWS,QAAX,CAAoBL,EADd;AAElBW,QAAAA,cAAc,EAAE,KAAKD,KAAL,CAAWC,cAFT;AAGlBE,QAAAA,cAAc,EAAE,KAAKH,KAAL,CAAWG,cAHT;AAIlBE,QAAAA,kBAAkB,EAAE,KAAKL,KAAL,CAAWK,kBAJb;AAKlBE,QAAAA,yBAAyB,EAAE,KAAKP,KAAL,CAAWO,yBALpB;AAMlBC,QAAAA,KAAK,EAAE,KAAKR,KAAL,CAAWQ;AANA,OAApB;;AASA,UAAI,KAAKgE,OAAL,MAAkB,KAAKF,cAA3B,EAA2C;AACzCA,QAAAA,cAAc,CAACC,WAAD,CAAd;AACD;AACF;;;4BAEOhC,K,EAAOE,e,EAAiB;AAC9B;AAD8B,UAEtBgC,sBAFsB,GAEK,KAAKvF,KAFV,CAEtBuF,sBAFsB;AAG9B,UAAMjC,IAAI,GAAGD,KAAK,CAACmC,SAAN,CAAgB;AAC3B3D,QAAAA,KAAK,EAAEtC,cADoB;AAE3BuC,QAAAA,SAAS,EAAEyD;AAFgB,OAAhB,CAAb;AAIA,UAAME,IAAI,GAAGnC,IAAI,CAACoC,eAAL,CAAqBC,KAArB,CAA2BrB,IAA3B,CACX,UAAAmB,IAAI;AAAA,eAAIA,IAAI,CAACG,IAAL,CAAUxF,EAAV,KAAiBmD,eAAe,CAACnD,EAArC;AAAA,OADO,CAAb,CAP8B,CAW9B;;AACA,UAAMyF,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAY1C,KAAK,CAACC,IAAN,CAAWA,IAAvB,EACpB0C,MADoB,CACb,UAAAnE,KAAK;AAAA,eAAIA,KAAK,CAACoE,QAAN,CAAe,iBAAf,KAAqCpE,KAAK,CAACqE,QAAN,CAAe,GAAf,CAAzC;AAAA,OADQ,EAEpBC,GAFoB,CAEhB,UAAAC,CAAC;AAAA,eAAIC,IAAI,CAACC,KAAL,CAAWF,CAAC,CAACG,OAAF,CAAU,wBAAV,EAAoC,EAApC,CAAX,CAAJ;AAAA,OAFe,CAAvB,CAZ8B,CAgB9B;;AAhB8B;AAAA;AAAA;;AAAA;AAiB9B,6BAAeV,cAAf,8HAA+B;AAAA,cAAtBW,EAAsB;AAC7B;AACA,cAAIA,EAAE,CAACzE,QAAH,KAAgB0E,SAApB,EAA+B;AAE/B,cAAMC,KAAK,GAAG;AACZ3E,YAAAA,QAAQ,EAAEyE,EAAE,CAACzE,QADD;AAEZC,YAAAA,UAAU,EAAE,IAFA;AAGZC,YAAAA,MAAM,EAAEuE,EAAE,CAACvE,MAHC;AAIZC,YAAAA,WAAW,EAAEsE,EAAE,CAACtE,WAJJ;AAKZC,YAAAA,UAAU,EAAEqE,EAAE,CAACrE,UALH;AAMZC,YAAAA,YAAY,EAAEoE,EAAE,CAACpE,YANL;AAOZC,YAAAA,QAAQ,EAAEmE,EAAE,CAACnE,QAPD;AAQZsE,YAAAA,WAAW,EAAEH,EAAE,CAACG;AARJ,WAAd;AAWA,eAAKC,UAAL,CAAgBvD,KAAhB,EAAuBE,eAAvB,EAAwCmD,KAAxC,EAA+CjB,IAA/C;AACD;AAjC6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkC/B;;;+BAEUpC,K,EAAOE,e,EAAiBsC,c,EAAgBJ,I,EAAM;AACvD;AACA,UAAIoB,KAAK,GAAG,CAAC,CAAb;AACA,UAAIvD,IAAJ;;AACA,UAAI;AACFA,QAAAA,IAAI,GAAGD,KAAK,CAACmC,SAAN,CAAgB;AACrB3D,UAAAA,KAAK,EAAEtC,cADc;AAErBuC,UAAAA,SAAS,EAAE+D;AAFU,SAAhB,CAAP;AAIAgB,QAAAA,KAAK,GAAGvD,IAAI,CAACoC,eAAL,CAAqBC,KAArB,CAA2BmB,SAA3B,CACN,UAAArB,IAAI;AAAA,iBAAIA,IAAI,CAACG,IAAL,CAAUxF,EAAV,KAAiBmD,eAAe,CAACnD,EAArC;AAAA,SADE,CAAR;AAGD,OARD,CAQE,OAAO2G,GAAP,EAAY;AACZtI,QAAAA,QAAQ,CAACsI,GAAD,CAAR;AACA;AACD,OAfsD,CAiBvD;;;AACA,UAAIF,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBvD,QAAAA,IAAI,CAACoC,eAAL,CAAqBC,KAArB,CAA2BqB,MAA3B,CAAkCH,KAAlC,EAAyC,CAAzC;AACD,OApBsD,CAsBvD;;;AACA,UACGhB,cAAc,CAACxD,QAAf,IACCkB,eAAe,CAACd,cAAhB,KAAmC9C,eAAe,CAACuE,IADrD,IAEC2B,cAAc,CAAC3D,WAAf,IACCqB,eAAe,CAACd,cAAhB,KAAmC9C,eAAe,CAACyE,OAHrD,IAICyB,cAAc,CAAC1D,UAAf,IACCoB,eAAe,CAACd,cAAhB,KAAmC9C,eAAe,CAAC8E,MALrD,IAMCoB,cAAc,CAACzD,YAAf,IACCmB,eAAe,CAACd,cAAhB,KAAmC9C,eAAe,CAACgF,QARvD,EASE;AACA,YAAIkB,cAAc,CAAC9D,QAAnB,EAA6B;AAC3BuB,UAAAA,IAAI,CAACoC,eAAL,CAAqBC,KAArB,CAA2BqB,MAA3B,CAAkC,CAAC,CAAnC,EAAsC,CAAtC,EAAyCvB,IAAzC;AACD,SAFD,MAEO;AACLnC,UAAAA,IAAI,CAACoC,eAAL,CAAqBC,KAArB,CAA2BqB,MAA3B,CAAkC,CAAlC,EAAqC,CAArC,EAAwCvB,IAAxC;AACD;AACF,OAtCsD,CAwCvD;;;AACApC,MAAAA,KAAK,CAAC4D,UAAN,CAAiB;AACfpF,QAAAA,KAAK,EAAEtC,cADQ;AAEfuC,QAAAA,SAAS,EAAE+D,cAFI;AAGfvC,QAAAA,IAAI,EAAJA;AAHe,OAAjB;AAKD;;;8BAESD,K,EAAOE,e,EAAiB;AAChC;AACA,UAAMsC,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAY1C,KAAK,CAACC,IAAN,CAAWA,IAAvB,EACpB0C,MADoB,CACb,UAAAnE,KAAK;AAAA,eAAIA,KAAK,CAACoE,QAAN,CAAe,iBAAf,KAAqCpE,KAAK,CAACqE,QAAN,CAAe,GAAf,CAAzC;AAAA,OADQ,EAEpBC,GAFoB,CAEhB,UAAAC,CAAC;AAAA,eAAIC,IAAI,CAACC,KAAL,CAAWF,CAAC,CAACG,OAAF,CAAU,wBAAV,EAAoC,EAApC,CAAX,CAAJ;AAAA,OAFe,CAAvB,CAFgC,CAMhC;;AANgC;AAAA;AAAA;;AAAA;AAOhC,8BAAeV,cAAf,mIAA+B;AAAA,cAAtBW,EAAsB;AAC7B;AACA,cAAIA,EAAE,CAACzE,QAAH,KAAgB0E,SAApB,EAA+B;AAE/B,cAAMC,KAAK,GAAG;AACZzE,YAAAA,MAAM,EAAEuE,EAAE,CAACvE,MADC;AAEZC,YAAAA,WAAW,EAAEsE,EAAE,CAACtE,WAFJ;AAGZC,YAAAA,UAAU,EAAEqE,EAAE,CAACrE,UAHH;AAIZC,YAAAA,YAAY,EAAEoE,EAAE,CAACpE,YAJL;AAKZC,YAAAA,QAAQ,EAAEmE,EAAE,CAACnE,QALD;AAMZsE,YAAAA,WAAW,EAAEH,EAAE,CAACG;AANJ,WAAd;AASA,eAAKO,SAAL,CAAe7D,KAAf,EAAsBE,eAAtB,EAAuCmD,KAAvC;AACD;AArB+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBhC,UAAI,KAAK1G,KAAL,CAAW4B,SAAX,KAAyB,KAA7B,EAAoC;AAClC,aAAK5B,KAAL,CAAWmH,kBAAX,CAA8B;AAC5BC,UAAAA,IAAI,EAAE,UADsB;AAE5B9D,UAAAA,IAAI,EAAE;AACJ1C,YAAAA,YAAY,EAAE2C,eAAe,CAAC3C,YAD1B;AAEJyG,YAAAA,WAAW,EAAEhB,IAAI,CAACC,KAAL,CAAW/C,eAAe,CAAC5C,OAA3B,EAAoC0G,WAF7C;AAGJ1G,YAAAA,OAAO,EAAE4C,eAAe,CAAC5C,OAHrB;AAIJP,YAAAA,EAAE,EAAEmD,eAAe,CAACnD,EAJhB;AAKJuC,YAAAA,qBAAqB,EAAEY,eAAe,CAACZ,qBALnC;AAMJF,YAAAA,cAAc,EAAEc,eAAe,CAACd,cAN5B;AAOJ/B,YAAAA,IAAI,EAAE6C,eAAe,CAAC7C;AAPlB;AAFsB,SAA9B;AAYD;AACF;;;8BAES2C,K,EAAOE,e,EAAiBmD,K,EAAO;AACvC;AACA,UAAIG,KAAK,GAAG,CAAC,CAAb;AACA,UAAIvD,IAAJ;;AACA,UAAI;AACFA,QAAAA,IAAI,GAAGD,KAAK,CAACmC,SAAN,CAAgB;AAAE3D,UAAAA,KAAK,EAAErC,YAAT;AAAuBsC,UAAAA,SAAS,EAAE4E;AAAlC,SAAhB,CAAP;AACAG,QAAAA,KAAK,GAAGvD,IAAI,CAACoC,eAAL,CAAqB4B,KAArB,CAA2BR,SAA3B,CACN,UAAAlB,IAAI;AAAA,iBAAIA,IAAI,CAACxF,EAAL,KAAYmD,eAAe,CAACnD,EAAhC;AAAA,SADE,CAAR;AAGD,OALD,CAKE,OAAO2G,GAAP,EAAY;AACZtI,QAAAA,QAAQ,CAACsI,GAAD,CAAR;AACA;AACD,OAZsC,CAcvC;;;AACA,UAAIF,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBvD,QAAAA,IAAI,CAACoC,eAAL,CAAqB4B,KAArB,CAA2BN,MAA3B,CAAkCH,KAAlC,EAAyC,CAAzC;AACD,OAjBsC,CAmBvC;;;AACA,UACGH,KAAK,CAACrE,QAAN,IACCkB,eAAe,CAACd,cAAhB,KAAmC9C,eAAe,CAACuE,IADrD,IAECwC,KAAK,CAACxE,WAAN,IACCqB,eAAe,CAACd,cAAhB,KAAmC9C,eAAe,CAACyE,OAHrD,IAICsC,KAAK,CAACvE,UAAN,IACCoB,eAAe,CAACd,cAAhB,KAAmC9C,eAAe,CAAC8E,MALrD,IAMCiC,KAAK,CAACtE,YAAN,IACCmB,eAAe,CAACd,cAAhB,KAAmC9C,eAAe,CAACgF,QARvD,EASE;AACArB,QAAAA,IAAI,CAACoC,eAAL,CAAqB4B,KAArB,CAA2BC,IAA3B,CAAgC;AAC9BnH,UAAAA,EAAE,EAAEmD,eAAe,CAACnD,EADU;AAE9BO,UAAAA,OAAO,EAAE4C,eAAe,CAAC5C,OAFK;AAG9B8B,UAAAA,cAAc,EAAEc,eAAe,CAACd,cAHF;AAI9B7B,UAAAA,YAAY,EAAE2C,eAAe,CAAC3C,YAJA;AAK9BF,UAAAA,IAAI,EAAE6C,eAAe,CAAC7C,IALQ;AAM9BiC,UAAAA,qBAAqB,EAAEY,eAAe,CAACZ,qBANT;AAO9BQ,UAAAA,UAAU,EAAE;AAPkB,SAAhC;AASD,OAvCsC,CAyCvC;;;AACAE,MAAAA,KAAK,CAAC4D,UAAN,CAAiB;AACfpF,QAAAA,KAAK,EAAErC,YADQ;AAEfsC,QAAAA,SAAS,EAAE4E,KAFI;AAGfpD,QAAAA,IAAI,EAAJA;AAHe,OAAjB;AAKD;;;8BAkPS;AACR;AACA,UAAI,KAAKtD,KAAL,CAAWwH,KAAf,EAAsB,OAAO,IAAP;AAEtB,UAAMC,WAAW,GAAG,KAAKzH,KAAL,CAAWS,QAAX,CAAoBoC,kCAApB,CACjBhC,QADH;AAEA,UAAM6G,WAAW,GAAG,KAAK1H,KAAL,CAAWS,QAAX,CAAoBoC,kCAApB,CACjBC,cADH;AAEA,UAAM6E,aAAa,GAAG,KAAK3H,KAAL,CAAWS,QAAX,CAAoBoC,kCAApB,CACnB3B,UADH;AAEA,UAAM0G,sBAAsB,GAAG,KAAK5H,KAAL,CAAWS,QAAX,CAAoBoC,kCAApB,CAC5BzB,iBADH;AAEA,UAAMyG,UAAU,GAAG,KAAK7H,KAAL,CAAWS,QAAX,CAAoBoC,kCAApB,CAChBvB,KADH;AAGA,aACEmG,WAAW,KAAK,KAAK3G,KAAL,CAAWC,cAA3B,IACA2G,WAAW,KAAK,KAAK5G,KAAL,CAAWG,cAD3B,IAEA0G,aAAa,KAAK,KAAK7G,KAAL,CAAWK,kBAF7B,IAGAyG,sBAAsB,KAAK,KAAK9G,KAAL,CAAWO,yBAHtC,IAIAwG,UAAU,KAAK,KAAK/G,KAAL,CAAWQ,KAL5B;AAOD;;;6BAEQ;AAAA;;AAAA,yBAC8B,KAAKtB,KADnC;AAAA,UACCS,QADD,gBACCA,QADD;AAAA,UACWqH,cADX,gBACWA,cADX;AAAA,UAGFzD,OAHE,GAGS,KAAKrE,KAHd,CAGFqE,OAHE;AAIPA,MAAAA,OAAO,GAAGA,OAAO,CAAC2B,MAAR,CACR,UAAAzB,MAAM;AAAA,eAAIA,MAAM,CAAC1D,QAAP,KAAoB,MAAI,CAACC,KAAL,CAAWC,cAAnC;AAAA,OADE,CAAV;AAJO,kCAWHN,QAAQ,CAACoC,kCAXN;AAAA,UASLE,SATK,yBASLA,SATK;AAAA,UAULC,eAVK,yBAULA,eAVK;AAaP,UAAI+E,IAAI,GAAG,EAAX;;AACA,cAAQ,KAAKjH,KAAL,CAAWC,cAAnB;AACE,aAAKpB,eAAe,CAACuE,IAArB;AACE6D,UAAAA,IAAI,GAAG,KAAKzC,OAAL,KAAiB,CAAC,YAAD,CAAjB,GAAkC,EAAzC;AACA;;AACF,aAAK3F,eAAe,CAACyE,OAArB;AACA,aAAKzE,eAAe,CAAC8E,MAArB;AACEsD,UAAAA,IAAI,GAAG,KAAKzC,OAAL,KAAiB,CAAC,QAAD,EAAW,YAAX,CAAjB,GAA4C,CAAC,QAAD,CAAnD;AACA;;AACF,aAAK3F,eAAe,CAACgF,QAArB;AACEoD,UAAAA,IAAI,GAAG,KAAKzC,OAAL,KACH,CAAC,QAAD,EAAW,UAAX,EAAuB,YAAvB,CADG,GAEH,CAAC,QAAD,EAAW,UAAX,CAFJ;AAGA;;AACF;AACE;AAdJ;;AAiBA,UAAM0C,mBAAmB,GACvB;AACE,QAAA,SAAS,wEACP,KAAKhI,KAAL,CAAW4B,SADJ,CADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE;AAAK,QAAA,SAAS,EAAC,qCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,0CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,IAAI,gCAAyBnB,QAAQ,CAACL,EAAlC,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgDK,QAAQ,CAACC,IAAzD,CADF,CADF,EAIE;AAAK,QAAA,SAAS,EAAC,6CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,8CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AAAU,QAAA,QAAQ,EAAED,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAK,QAAA,SAAS,EAAC,2CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,qBAAD;AACE,QAAA,QAAQ,EAAEA,QADZ;AAEE,QAAA,cAAc,EAAEqH,cAFlB;AAGE,QAAA,MAAM,EAAE,KAAK9H,KAAL,CAAWiI,MAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAFF,CADF,EAWE;AAAK,QAAA,SAAS,EAAC,0CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAElF,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAEA,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAJF,EAOE;AAAK,QAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAEC,eAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAPF,CAXF,CAJF,CALF,EAiCE;AAAK,QAAA,SAAS,EAAC,qCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,gCAAD;AACE,QAAA,KAAK,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACWrD,eAAe,CAACuI,WAAhB,CAA4B,KAAKpH,KAAL,CAAWC,cAAvC,CADX,CAFJ;AAME,QAAA,SAAS,EAAC,4CANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQE,oBAAC,YAAD;AACE,QAAA,YAAY,EAAE,KAAKD,KAAL,CAAWC,cAD3B;AAEE,QAAA,kBAAkB,EAAE,KAAKkD,kBAF3B;AAGE,QAAA,qBAAqB,EAAE,KAAKE,qBAH9B;AAIE,QAAA,oBAAoB,EAAE,KAAKK,oBAJ7B;AAKE,QAAA,sBAAsB,EAAE,KAAKE,sBAL/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARF,CADF,EAkBGqD,IAAI,CAAC9B,QAAL,CAAc,QAAd,KACC,oBAAC,gCAAD;AACE,QAAA,KAAK,EAAC,QADR;AAEE,QAAA,UAAU,EAAE,KAAKX,OAAL,EAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIEjB,OAAO,CAAC8D,MAAR,GAAiB,CAAlB,GACC,oBAAC,QAAD;AACE,QAAA,OAAO,EAAE9D,OADX;AAEE,QAAA,QAAQ,EAAE,KAAKvD,KAAL,CAAWG,cAFvB;AAGE,QAAA,QAAQ,EAAE,KAAK2D,aAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,GAOC,oBAAC,oBAAD;AACE,QAAA,MAAM,EAAEP,OAAO,CAAC,CAAD,CAAP,CAAW3D,IADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXF,CAnBJ,EAoCE,oBAAC,gCAAD;AAAkC,QAAA,KAAK,EAAC,qBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,SAAS,EAAC,2CADZ;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,KAAK,EAAE,KAAKI,KAAL,CAAWQ,KAHpB;AAIE,QAAA,QAAQ,EAAE,KAAK0D,YAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CApCF,EA4CG+C,IAAI,CAAC9B,QAAL,CAAc,UAAd,KACC,oBAAC,gCAAD;AACE,QAAA,KAAK,EAAC,UADR;AAEE,QAAA,UAAU,EAAE,KAAKX,OAAL,EAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE,oBAAC,iBAAD;AACE,QAAA,UAAU,EAAE,KAAKxE,KAAL,CAAWK,kBADzB;AAEE,QAAA,iBAAiB,EAAE,KAAKL,KAAL,CAAWO,yBAFhC;AAGE,QAAA,QAAQ,EAAE,KAAK0D,eAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,CA7CJ,CAjCF,EA0FGgD,IAAI,CAAC9B,QAAL,CAAc,YAAd,KACC;AAAK,QAAA,SAAS,EAAC,6CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,eAAD;AACE,QAAA,SAAS,EAAC,0CADZ;AAEE,QAAA,OAAO,EAAE,KAAKhB,aAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAOE,oBAAC,aAAD;AACE,QAAA,SAAS,EAAC,wCADZ;AAEE,QAAA,OAAO,EAAE,KAAKhF,eAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF,CA3FJ,CADF;;AA8GA,UAAI,CAAC,KAAKD,KAAL,CAAWoI,WAAhB,EAA6B;AAC3B,eACE,oBAAC,cAAD;AAAgB,UAAA,KAAK,EAAEvI,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,UAAAwI,MAAM;AAAA,iBACL;AACE,YAAA,SAAS,EAAE9J,UAAU,CAAC8J,MAAD,EAAS;AAC5B,kDAAoC,MAAI,CAAC/C,OAAL;AADR,aAAT,CADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAKG0C,mBALH,CADK;AAAA,SADT,CADF;AAaD;;AAED,aACE;AACE,QAAA,SAAS,EAAEzJ,UAAU,CAAC,KAAKyB,KAAL,CAAWoI,WAAZ,EAAyB;AAC5C,8CAAoC,KAAK9C,OAAL;AADQ,SAAzB,CADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKG0C,mBALH,CADF;AASD;;;;EA1oBqC5J,KAAK,CAACkK,S;;AA6oB9C,eAAejK,OAAO,CAACiB,uBAAD,EAA0B;AAC9CoB,EAAAA,IAAI,EAAE;AADwC,CAA1B,CAAP,CAEZX,yBAFY,CAAf","sourcesContent":["import React from 'react';\nimport { graphql } from 'react-apollo';\nimport { ContainerQuery } from 'react-container-query';\nimport classnames from 'classnames';\nimport moment from 'moment';\nimport { logError } from 'services/logger';\n\nimport Date from 'components/Shared/DateTime/Date';\nimport Hour from 'components/Shared/DateTime/Hour';\nimport Location from 'components/Shared/CrossingListItem/Location';\nimport User from 'components/Shared/CrossingListItem/User';\nimport CrossingCommunityList from 'components/Shared/CrossingListItem/CrossingCommunityList';\nimport StatusToggle from 'components/Dashboard/CrossingListPage/DashboardCrossingListItem/StatusToggle';\nimport DashboardCrossingListItemControl from 'components/Dashboard/CrossingListPage/DashboardCrossingListItem/DashboardCrossingListItemControl';\nimport Dropdown from 'components/Shared/Form/Dropdown';\nimport DurationSelection from 'components/Dashboard/CrossingListPage/DashboardCrossingListItem/DurationSelection';\nimport SingleOptionDropdown from'components/Shared/Form/Dropdown/SingleOptionDropdown';\nimport ButtonSecondary from 'components/Shared/Button/ButtonSecondary';\nimport ButtonPrimary from 'components/Shared/Button/ButtonPrimary';\n\nimport newStatusUpdateMutation from 'components/Dashboard/CrossingListPage/queries/newStatusUpdateMutation';\nimport crossingsQuery from 'components/Dashboard/CrossingListPage/queries/crossingsQuery';\nimport allCrossings from 'components/Shared/Map/queries/allCrossingsQuery';\nimport statusCountsQuery from 'components/Dashboard/CrossingListPage/queries/statusCountsQuery';\nimport statusUpdateFragment from 'components/Dashboard/CrossingListPage/queries/statusUpdateFragment';\n\nimport * as statusConstants from 'constants/StatusConstants';\nimport { LARGE_ITEM_MIN_WIDTH } from 'constants/containerQueryConstants';\n\nimport 'components/Dashboard/CrossingListPage/DashboardCrossingListItem/DashboardCrossingListItem.css';\n\nconst containerQuery = {\n  'DashboardCrossingListItem--lg': {\n    minWidth: LARGE_ITEM_MIN_WIDTH,\n  },\n};\n\nclass DashboardCrossingListItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedStatus:\n        props.crossing.statusUpdateByLatestStatusUpdateId.statusId,\n      selectedReason:\n        props.crossing.statusUpdateByLatestStatusUpdateId.statusReasonId,\n      selectedReopenDate:\n        props.crossing.statusUpdateByLatestStatusUpdateId.reopenDate,\n      selectedIndefiniteClosure:\n        props.crossing.statusUpdateByLatestStatusUpdateId.indefiniteClosure,\n      notes: props.crossing.statusUpdateByLatestStatusUpdateId.notes,\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    const { restoreDirtyState, crossing } = this.props;\n    if (restoreDirtyState) {\n      const savedState = restoreDirtyState(crossing.id);\n      if (savedState) {\n        this.setState({ selectedStatus: savedState.selectedStatus });\n        this.setState({ selectedReason: savedState.selectedReason });\n        this.setState({ selectedReopenDate: savedState.selectedReopenDate });\n        this.setState({ selectedIndefiniteClosure: savedState.selectedIndefiniteClosure });\n        this.setState({ notes: savedState.notes });\n        this.props.clearMeasurerCache();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    const { saveDirtyState } = this.props;\n\n    const stateToSave = {\n      crossingId: this.props.crossing.id,\n      selectedStatus: this.state.selectedStatus,\n      selectedReason: this.state.selectedReason,\n      selectedReopenDate: this.state.selectedReopenDate,\n      selectedIndefiniteClosure: this.state.selectedIndefiniteClosure,\n      notes: this.state.notes,\n    };\n\n    if (this.isDirty() && this.saveDirtyState) {\n      saveDirtyState(stateToSave);\n    }\n  }\n\n  fixSort(store, updatedCrossing) {\n    // Get the edge from the current query\n    const { crossingQueryVariables } = this.props;\n    const data = store.readQuery({\n      query: crossingsQuery,\n      variables: crossingQueryVariables,\n    });\n    const edge = data.searchCrossings.edges.find(\n      edge => edge.node.id === updatedCrossing.id,\n    );\n\n    // Get all the query variable combinations we have cached\n    const queryVariables = Object.keys(store.data.data)\n      .filter(query => query.includes('searchCrossings') && query.endsWith(')'))\n      .map(q => JSON.parse(q.replace(/(^\\$\\w*\\.\\w*\\()|(\\)$)/g, '')));\n\n    // Update the sorting accordingly\n    for (var qv of queryVariables) {\n      // Hacky fix for status counts\n      if (qv.orderAsc === undefined) continue;\n\n      const qvars = {\n        orderAsc: qv.orderAsc,\n        pageCursor: null,\n        search: qv.search,\n        showCaution: qv.showCaution,\n        showClosed: qv.showClosed,\n        showLongterm: qv.showLongterm,\n        showOpen: qv.showOpen,\n        communityId: qv.communityId,\n      };\n\n      this.doASortFix(store, updatedCrossing, qvars, edge);\n    }\n  }\n\n  doASortFix(store, updatedCrossing, queryVariables, edge) {\n    // Get the index of the updated crossing\n    let index = -1;\n    let data;\n    try {\n      data = store.readQuery({\n        query: crossingsQuery,\n        variables: queryVariables,\n      });\n      index = data.searchCrossings.edges.findIndex(\n        edge => edge.node.id === updatedCrossing.id,\n      );\n    } catch (err) {\n      logError(err);\n      return;\n    }\n\n    // Remove it if it's on a list already\n    if (index !== -1) {\n      data.searchCrossings.edges.splice(index, 1);\n    }\n\n    // Add it to a list if appropriate\n    if (\n      (queryVariables.showOpen &&\n        updatedCrossing.latestStatusId === statusConstants.OPEN) ||\n      (queryVariables.showCaution &&\n        updatedCrossing.latestStatusId === statusConstants.CAUTION) ||\n      (queryVariables.showClosed &&\n        updatedCrossing.latestStatusId === statusConstants.CLOSED) ||\n      (queryVariables.showLongterm &&\n        updatedCrossing.latestStatusId === statusConstants.LONGTERM)\n    ) {\n      if (queryVariables.orderAsc) {\n        data.searchCrossings.edges.splice(-1, 0, edge);\n      } else {\n        data.searchCrossings.edges.splice(0, 0, edge);\n      }\n    }\n\n    // write it to the apollo cache\n    store.writeQuery({\n      query: crossingsQuery,\n      variables: queryVariables,\n      data,\n    });\n  }\n\n  updateMap(store, updatedCrossing) {\n    // Get all the query variable combinations we have cached\n    const queryVariables = Object.keys(store.data.data)\n      .filter(query => query.includes('searchCrossings') && query.endsWith(')'))\n      .map(q => JSON.parse(q.replace(/(^\\$\\w*\\.\\w*\\()|(\\)$)/g, '')));\n\n    // Update the sorting accordingly\n    for (var qv of queryVariables) {\n      // Hacky fix for status counts\n      if (qv.orderAsc !== undefined) continue;\n\n      const qvars = {\n        search: qv.search,\n        showCaution: qv.showCaution,\n        showClosed: qv.showClosed,\n        showLongterm: qv.showLongterm,\n        showOpen: qv.showOpen,\n        communityId: qv.communityId,\n      };\n\n      this.doAMapFix(store, updatedCrossing, qvars);\n    }\n\n    if (this.props.listOrMap === 'map') {\n      this.props.setSelectedFeature({\n        type: \"Crossing\",\n        data: {\n          communityIds: updatedCrossing.communityIds,\n          coordinates: JSON.parse(updatedCrossing.geojson).coordinates,\n          geojson: updatedCrossing.geojson,\n          id: updatedCrossing.id,\n          latestStatusCreatedAt: updatedCrossing.latestStatusCreatedAt,\n          latestStatusId: updatedCrossing.latestStatusId,\n          name: updatedCrossing.name,\n        }\n      })\n    }\n  }\n\n  doAMapFix(store, updatedCrossing, qvars) {\n    // Get the index of the updated crossing\n    let index = -1;\n    let data;\n    try {\n      data = store.readQuery({ query: allCrossings, variables: qvars });\n      index = data.searchCrossings.nodes.findIndex(\n        node => node.id === updatedCrossing.id,\n      );\n    } catch (err) {\n      logError(err);\n      return;\n    }\n\n    // Remove it if it's on a layer already\n    if (index !== -1) {\n      data.searchCrossings.nodes.splice(index, 1);\n    }\n\n    // Add it to a layer if appropriate\n    if (\n      (qvars.showOpen &&\n        updatedCrossing.latestStatusId === statusConstants.OPEN) ||\n      (qvars.showCaution &&\n        updatedCrossing.latestStatusId === statusConstants.CAUTION) ||\n      (qvars.showClosed &&\n        updatedCrossing.latestStatusId === statusConstants.CLOSED) ||\n      (qvars.showLongterm &&\n        updatedCrossing.latestStatusId === statusConstants.LONGTERM)\n    ) {\n      data.searchCrossings.nodes.push({\n        id: updatedCrossing.id,\n        geojson: updatedCrossing.geojson,\n        latestStatusId: updatedCrossing.latestStatusId,\n        communityIds: updatedCrossing.communityIds,\n        name: updatedCrossing.name,\n        latestStatusCreatedAt: updatedCrossing.latestStatusCreatedAt,\n        __typename: 'Crossing',\n      });\n    }\n\n    // write it to the apollo cache\n    store.writeQuery({\n      query: allCrossings,\n      variables: qvars,\n      data,\n    });\n  }\n\n  newStatusUpdate = e => {\n    const updateData = {\n      id: Math.round(Math.random() * -1000000),\n      crossingId: this.props.crossing.id,\n      name: this.props.crossing.name,\n      geojson: this.props.crossing.geojson,\n      communityIds: this.props.crossing.communityIds,\n      statusId: this.state.selectedStatus,\n      reasonId: this.state.selectedReason,\n      reopenDate: this.state.selectedReopenDate,\n      indefiniteClosure: this.state.selectedIndefiniteClosure,\n      notes: this.state.notes,\n      user: this.props.currentUser,\n    };\n    const { refreshList, clearMeasurerCache } = this.props;\n\n    const queriesToRefetch =\n      this.props.listOrMap === 'map'\n        ? [\n            { query: statusCountsQuery },\n            {\n              query: crossingsQuery,\n              variables: {\n                orderAsc: false,\n                pageCursor: null,\n                search: '%%',\n                showCaution: true,\n                showClosed: true,\n                showLongterm: true,\n                showOpen: true,\n              },\n            },\n          ]\n        : [\n            { query: statusCountsQuery },\n            { query: allCrossings, variables: { statusId: 1 } },\n            { query: allCrossings, variables: { statusId: 2 } },\n            { query: allCrossings, variables: { statusId: 3 } },\n            { query: allCrossings, variables: { statusId: 4 } },\n          ];\n\n    this.props\n      .newStatusUpdateMutation({\n        variables: {\n          crossingId: updateData.crossingId,\n          statusId: updateData.statusId,\n          reasonId: updateData.reasonId,\n          reopenDate: updateData.reopenDate,\n          indefiniteClosure: updateData.indefiniteClosure,\n          notes: updateData.notes,\n        },\n        optimisticResponse: {\n          newStatusUpdate: {\n            statusUpdate: {\n              crossingId: updateData.crossingId,\n              crossingByCrossingId: {\n                id: updateData.crossingId,\n                geojson: updateData.geojson,\n                latestStatusId: updateData.statusId,\n                communityIds: updateData.communityIds,\n                latestStatusUpdateId: updateData.id,\n                latestStatusCreatedAt: moment().format(),\n                name: updateData.name,\n                statusUpdateByLatestStatusUpdateId: {\n                  id: updateData.id,\n                  crossingId: updateData.crossingId,\n                  statusId: updateData.statusId,\n                  statusReasonId: updateData.reasonId,\n                  reopenDate: updateData.reopenDate,\n                  indefiniteClosure: updateData.indefiniteClosure,\n                  createdAt: moment().format(),\n                  notes: updateData.notes,\n                  userByCreatorId: {\n                    firstName: updateData.user.firstName,\n                    lastName: updateData.user.lastName,\n                    __typename: 'User',\n                  },\n                  __typename: 'StatusUpdate',\n                },\n                __typename: 'Crossing',\n              },\n              __typename: 'StatusUpdate',\n            },\n            __typename: 'NewStatusUpdatePayload',\n          },\n        },\n        update: (store, { data: { newStatusUpdate } }) => {\n          // Get the updated crossing from the status update mutation\n          const updatedCrossing =\n            newStatusUpdate.statusUpdate.crossingByCrossingId;\n\n          // Write the updated crossing to the cache\n          store.writeFragment({\n            id: `Crossing:${updatedCrossing.id}`,\n            fragment: statusUpdateFragment,\n            data: updatedCrossing,\n          });\n\n          // If we're in a list view, fix the sort order\n          // Map queries must also be updated, even if change took place on list page.\n          if (this.props.listOrMap === 'list') {\n            this.fixSort(store, updatedCrossing);\n            this.updateMap(store, updatedCrossing);\n          }\n\n          // If we're on the map, update the map queries\n          if (this.props.listOrMap === 'map') {\n            this.updateMap(store, updatedCrossing);\n          }\n        },\n        refetchQueries: queriesToRefetch,\n      })\n      .then(({ data }) => {\n        const update =\n          data.newStatusUpdate.statusUpdate.crossingByCrossingId\n            .statusUpdateByLatestStatusUpdateId;\n\n        this.setState({\n          selectedStatus: update.statusId,\n          selectedReason: update.statusReasonId,\n          selectedReopenDate: update.reopenDate,\n          selectedIndefiniteClosure: update.indefiniteClosure,\n          notes: update.notes,\n        });\n        if (clearMeasurerCache) {\n          clearMeasurerCache(true);\n          refreshList();\n        }\n      })\n      .catch(error => {\n        logError(error);\n      });\n  };\n\n  activateOpenToggle = () => {\n    this.setState({\n      selectedStatus: statusConstants.OPEN,\n      notes: '',\n      selectedReason: null,\n      selectedReopenDate: null,\n      selectedIndefiniteClosure: false,\n    });\n    if (this.props.clearMeasurerCache) {\n      this.props.clearMeasurerCache();\n    }\n  };\n\n  activateCautionToggle = () => {\n    this.setState({\n      selectedStatus: statusConstants.CAUTION,\n      notes: '',\n      selectedReason: this.props.reasons.find(\n        reason => reason.statusId === statusConstants.CAUTION,\n      ).id,\n      selectedReopenDate: null,\n      selectedIndefiniteClosure: false,\n    });\n\n    if (this.props.clearMeasurerCache) {\n      this.props.clearMeasurerCache();\n    }\n  };\n\n  activateClosedToggle = () => {\n    this.setState({\n      selectedStatus: statusConstants.CLOSED,\n      notes: '',\n      selectedReason: this.props.reasons.find(\n        reason => reason.statusId === statusConstants.CLOSED,\n      ).id,\n      selectedReopenDate: null,\n      selectedIndefiniteClosure: false,\n    });\n\n    if (this.props.clearMeasurerCache) {\n      this.props.clearMeasurerCache();\n    }\n  };\n\n  activateLongtermToggle = () => {\n    this.setState({\n      selectedStatus: statusConstants.LONGTERM,\n      notes: '',\n      selectedReason: this.props.reasons.find(\n        reason => reason.statusId === statusConstants.LONGTERM,\n      ).id,\n      selectedReopenDate: this.props.crossing.statusUpdateByLatestStatusUpdateId\n        .reopenDate,\n      selectedIndefiniteClosure: this.props.crossing.statusUpdateByLatestStatusUpdateId\n        .indefiniteClosure,\n    });\n\n    if (this.props.clearMeasurerCache) {\n      this.props.clearMeasurerCache();\n    }\n  };\n\n  reasonChanged = e => {\n    this.setState({ selectedReason: e.target.value });\n\n    if (this.props.clearMeasurerCache) {\n      this.props.clearMeasurerCache();\n    }\n  };\n\n  durationChanged = ({indefiniteClosure, reopenDate}) => {\n    this.setState({ selectedReopenDate: reopenDate });\n    this.setState({ selectedIndefiniteClosure: indefiniteClosure });\n\n    if (this.props.clearMeasurerCache) {\n      this.props.clearMeasurerCache();\n    }\n  };\n\n  notesChanged = e => {\n    this.setState({ notes: e.target.value });\n\n    if (this.props.clearMeasurerCache) {\n      this.props.clearMeasurerCache();\n    }\n  };\n\n  cancelClicked = () => {\n    this.setState({\n      selectedStatus: this.props.crossing.statusUpdateByLatestStatusUpdateId\n        .statusId,\n      selectedReason: this.props.crossing.statusUpdateByLatestStatusUpdateId\n        .statusReasonId,\n      selectedReopenDate: this.props.crossing.statusUpdateByLatestStatusUpdateId\n        .reopenDate,\n      selectedIndefiniteClosure : this.props.crossing.statusUpdateByLatestStatusUpdateId\n        .indefiniteClosure,\n      notes: this.props.crossing.statusUpdateByLatestStatusUpdateId.notes,\n    });\n\n    if (this.props.clearMeasurerCache) {\n      this.props.clearMeasurerCache();\n    }\n  };\n\n  isDirty() {\n    // Temporary fix for storybook\n    if (this.props.dirty) return true;\n\n    const savedStatus = this.props.crossing.statusUpdateByLatestStatusUpdateId\n      .statusId;\n    const savedReason = this.props.crossing.statusUpdateByLatestStatusUpdateId\n      .statusReasonId;\n    const savedOpenDate = this.props.crossing.statusUpdateByLatestStatusUpdateId\n      .reopenDate;\n    const savedIndefiniteClosure = this.props.crossing.statusUpdateByLatestStatusUpdateId\n      .indefiniteClosure;\n    const savedNotes = this.props.crossing.statusUpdateByLatestStatusUpdateId\n      .notes;\n\n    return (\n      savedStatus !== this.state.selectedStatus ||\n      savedReason !== this.state.selectedReason ||\n      savedOpenDate !== this.state.selectedReopenDate ||\n      savedIndefiniteClosure !== this.state.selectedIndefiniteClosure ||\n      savedNotes !== this.state.notes\n    );\n  }\n\n  render() {\n    const { crossing, allCommunities } = this.props;\n\n    let {reasons} = this.props;\n    reasons = reasons.filter(\n      reason => reason.statusId === this.state.selectedStatus\n    )\n\n    const {\n      createdAt,\n      userByCreatorId,\n    } = crossing.statusUpdateByLatestStatusUpdateId;\n\n    var show = [];\n    switch (this.state.selectedStatus) {\n      case statusConstants.OPEN:\n        show = this.isDirty() ? ['cancelSave'] : [];\n        break;\n      case statusConstants.CAUTION:\n      case statusConstants.CLOSED:\n        show = this.isDirty() ? ['reason', 'cancelSave'] : ['reason'];\n        break;\n      case statusConstants.LONGTERM:\n        show = this.isDirty()\n          ? ['reason', 'duration', 'cancelSave']\n          : ['reason', 'duration'];\n        break;\n      default:\n        break;\n    }\n\n    const CrossingListItemJSX = (\n      <div\n        className={`DashboardCrossingListItem DashboardCrossingListItem--layout-${\n          this.props.listOrMap\n        }`}\n      >\n        <div className=\"DashboardCrossingListItem__overview\">\n          <div className=\"DashboardCrossingListItem__crossing-name\">\n            <a href={`/dashboard/crossing/${crossing.id}`}>{crossing.name}</a>\n          </div>\n          <div className=\"DashboardCrossingListItem__overview-details\">\n            <div className=\"DashboardCrossingListItem__overview-location\">\n              <Location crossing={crossing} />\n              <div className=\"DashboardCrossingListItem__community-list\">\n                <CrossingCommunityList\n                  crossing={crossing}\n                  allCommunities={allCommunities}\n                  onDash={this.props.onDash}\n                />\n              </div>\n            </div>\n            <div className=\"DashboardCrossingListItem__overview-meta\">\n              <div>\n                <Date date={createdAt} />\n              </div>\n              <div>\n                <Hour date={createdAt} />\n              </div>\n              <div className=\"DashboardCrossingListItem__user\">\n                <User user={userByCreatorId} />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"DashboardCrossingListItem__controls\">\n          <DashboardCrossingListItemControl\n            label={\n              <div>\n                Status: {statusConstants.statusNames[this.state.selectedStatus]}\n              </div>\n            }\n            className=\"DashboardCrossingListItem__control--status\"\n          >\n            <StatusToggle\n              activeStatus={this.state.selectedStatus}\n              activateOpenToggle={this.activateOpenToggle}\n              activateCautionToggle={this.activateCautionToggle}\n              activateClosedToggle={this.activateClosedToggle}\n              activateLongtermToggle={this.activateLongtermToggle}\n            />\n          </DashboardCrossingListItemControl>\n\n          {show.includes('reason') && (\n            <DashboardCrossingListItemControl\n              label=\"Reason\"\n              isRequired={this.isDirty()}\n            >\n            {(reasons.length > 1) ? (\n              <Dropdown\n                options={reasons}\n                selected={this.state.selectedReason}\n                onChange={this.reasonChanged}\n              />\n            ) : (\n              <SingleOptionDropdown\n                option={reasons[0].name}\n              />\n            )}\n            </DashboardCrossingListItemControl>\n          )}\n          <DashboardCrossingListItemControl label=\"Notes to the public\">\n            <input\n              className=\"DashboardCrossingListItem__notes-text-box\"\n              type=\"text\"\n              value={this.state.notes}\n              onChange={this.notesChanged}\n            />\n          </DashboardCrossingListItemControl>\n          {show.includes('duration') && (\n            <DashboardCrossingListItemControl\n              label=\"Duration\"\n              isRequired={this.isDirty()}\n            >\n              <DurationSelection\n                reopenDate={this.state.selectedReopenDate}\n                indefiniteClosure={this.state.selectedIndefiniteClosure}\n                onChange={this.durationChanged}\n              />\n            </DashboardCrossingListItemControl>\n          )}\n        </div>\n        {show.includes('cancelSave') && (\n          <div className=\"DashboardCrossingListItem__button-container\">\n            <ButtonSecondary\n              className=\"DashboardCrossingListItem__cancel-button\"\n              onClick={this.cancelClicked}\n            >\n              Cancel\n            </ButtonSecondary>\n            <ButtonPrimary\n              className=\"DashboardCrossingListItem__save-button\"\n              onClick={this.newStatusUpdate}\n            >\n              Submit\n            </ButtonPrimary>\n          </div>\n        )}\n      </div>\n    );\n\n    if (!this.props.cqClassName) {\n      return (\n        <ContainerQuery query={containerQuery}>\n          {params => (\n            <div\n              className={classnames(params, {\n                'DashboardCrossingListItem--dirty': this.isDirty(),\n              })}\n            >\n              {CrossingListItemJSX}\n            </div>\n          )}\n        </ContainerQuery>\n      );\n    }\n\n    return (\n      <div\n        className={classnames(this.props.cqClassName, {\n          'DashboardCrossingListItem--dirty': this.isDirty(),\n        })}\n      >\n        {CrossingListItemJSX}\n      </div>\n    );\n  }\n}\n\nexport default graphql(newStatusUpdateMutation, {\n  name: 'newStatusUpdateMutation',\n})(DashboardCrossingListItem);\n"]},"metadata":{},"sourceType":"module"}