{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.offsetToPosition = offsetToPosition;\nexports.locToRange = locToRange;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n *  Copyright (c) Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  \n */\n\n\nvar Range = exports.Range = function () {\n  function Range(start, end) {\n    var _this = this;\n\n    _classCallCheck(this, Range);\n\n    this.containsPosition = function (position) {\n      if (_this.start.line === position.line) {\n        return _this.start.character <= position.character;\n      } else if (_this.end.line === position.line) {\n        return _this.end.character >= position.character;\n      } else {\n        return _this.start.line <= position.line && _this.end.line >= position.line;\n      }\n    };\n\n    this.start = start;\n    this.end = end;\n  }\n\n  Range.prototype.setStart = function setStart(line, character) {\n    this.start = new Position(line, character);\n  };\n\n  Range.prototype.setEnd = function setEnd(line, character) {\n    this.end = new Position(line, character);\n  };\n\n  return Range;\n}();\n\nvar Position = exports.Position = function () {\n  function Position(line, character) {\n    var _this2 = this;\n\n    _classCallCheck(this, Position);\n\n    this.lessThanOrEqualTo = function (position) {\n      return _this2.line < position.line || _this2.line === position.line && _this2.character <= position.character;\n    };\n\n    this.line = line;\n    this.character = character;\n  }\n\n  Position.prototype.setLine = function setLine(line) {\n    this.line = line;\n  };\n\n  Position.prototype.setCharacter = function setCharacter(character) {\n    this.character = character;\n  };\n\n  return Position;\n}();\n\nfunction offsetToPosition(text, loc) {\n  var EOL = '\\n';\n  var buf = text.slice(0, loc);\n  var lines = buf.split(EOL).length - 1;\n  var lastLineIndex = buf.lastIndexOf(EOL);\n  return new Position(lines, loc - lastLineIndex - 1);\n}\n\nfunction locToRange(text, loc) {\n  var start = offsetToPosition(text, loc.start);\n  var end = offsetToPosition(text, loc.end);\n  return new Range(start, end);\n}","map":null,"metadata":{},"sourceType":"script"}