{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/carlvlewis/floodsight/src/components/Dashboard/CrossingDetailPage/CrossingDetailPage.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query crossingById($crossingId: Int!) {\\n    crossingById(id: $crossingId) {\\n      ...crossingInfo\\n      statusByLatestStatusId {\\n        id\\n        name\\n      }\\n    }\\n  }\\n  \", \"\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport CrossingStaticMap from 'components/Shared/Map/CrossingStaticMap';\nimport CrossingDetails from 'components/Dashboard/CrossingDetailPage/CrossingDetails';\nimport CrossingStatusHistory from 'components/Dashboard/CrossingStatusHistory/CrossingStatusHistory';\nimport AllCommunitiesQuery from 'components/Shared/queries/AllCommunitiesQuery';\nimport 'components/Dashboard/CrossingDetailPage/CrossingDetailPage.css';\nimport crossingFragment from 'components/Dashboard/CrossingListPage/queries/crossingFragment';\n\nvar CrossingDetailPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CrossingDetailPage, _Component);\n\n  function CrossingDetailPage() {\n    _classCallCheck(this, CrossingDetailPage);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CrossingDetailPage).apply(this, arguments));\n  }\n\n  _createClass(CrossingDetailPage, [{\n    key: \"render\",\n    value: function render() {\n      var isLoading = !this.props.CrossingByIdQuery || this.props.CrossingByIdQuery.loading;\n\n      if (isLoading) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18\n          },\n          __self: this\n        }, \"Loading\");\n      }\n\n      var crossing = this.props.CrossingByIdQuery.crossingById;\n      var coordinates = JSON.parse(crossing.geojson).coordinates;\n      var crossingForCrossingDetails = {\n        name: crossing.name,\n        description: crossing.description,\n        humanAddress: crossing.humanAddress,\n        id: crossing.id,\n        lat: coordinates[1],\n        lng: coordinates[0],\n        active: crossing.active\n      };\n      var allCommunities = this.props.AllCommunitiesQuery.allCommunities.nodes;\n      var crossingCommunities = crossing.communities.nodes;\n      var currentUser = this.props.currentUser;\n      return React.createElement(\"div\", {\n        className: \"CrossingDetailPage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"CrossingDetails__container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(CrossingStaticMap, {\n        crossing: crossing,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }), React.createElement(CrossingDetails, {\n        crossing: crossingForCrossingDetails,\n        crossingCommunities: crossingCommunities,\n        allCommunities: allCommunities,\n        currentUser: currentUser,\n        addMode: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      })), React.createElement(CrossingStatusHistory, {\n        crossingId: crossing.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return CrossingDetailPage;\n}(Component);\n\nvar CrossingByIdQuery = gql(_templateObject(), crossingFragment);\nexport default compose(graphql(CrossingByIdQuery, {\n  name: 'CrossingByIdQuery',\n  options: function options(ownProps) {\n    return {\n      variables: {\n        crossingId: Number(ownProps.match.params.id)\n      }\n    };\n  }\n}), graphql(AllCommunitiesQuery, {\n  name: 'AllCommunitiesQuery'\n}))(CrossingDetailPage);","map":{"version":3,"sources":["/Users/carlvlewis/floodsight/src/components/Dashboard/CrossingDetailPage/CrossingDetailPage.js"],"names":["React","Component","graphql","compose","gql","CrossingStaticMap","CrossingDetails","CrossingStatusHistory","AllCommunitiesQuery","crossingFragment","CrossingDetailPage","isLoading","props","CrossingByIdQuery","loading","crossing","crossingById","coordinates","JSON","parse","geojson","crossingForCrossingDetails","name","description","humanAddress","id","lat","lng","active","allCommunities","nodes","crossingCommunities","communities","currentUser","options","ownProps","variables","crossingId","Number","match","params"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport CrossingStaticMap from 'components/Shared/Map/CrossingStaticMap';\nimport CrossingDetails from 'components/Dashboard/CrossingDetailPage/CrossingDetails';\nimport CrossingStatusHistory from 'components/Dashboard/CrossingStatusHistory/CrossingStatusHistory';\nimport AllCommunitiesQuery from 'components/Shared/queries/AllCommunitiesQuery';\nimport 'components/Dashboard/CrossingDetailPage/CrossingDetailPage.css';\nimport crossingFragment from 'components/Dashboard/CrossingListPage/queries/crossingFragment';\n\nclass CrossingDetailPage extends Component {\n  render() {\n    const isLoading =\n      !this.props.CrossingByIdQuery ||\n      this.props.CrossingByIdQuery.loading\n\n    if (isLoading) {\n      return <div>Loading</div>;\n    }\n\n    const crossing = this.props.CrossingByIdQuery.crossingById;\n    const coordinates = JSON.parse(crossing.geojson).coordinates;\n    const crossingForCrossingDetails = {\n      name: crossing.name,\n      description: crossing.description,\n      humanAddress: crossing.humanAddress,\n      id: crossing.id,\n      lat: coordinates[1],\n      lng: coordinates[0],\n      active: crossing.active,\n    }\n    const allCommunities = this.props.AllCommunitiesQuery.allCommunities.nodes;\n    const crossingCommunities = crossing.communities.nodes;\n    const { currentUser } = this.props;\n\n    return (\n      <div className=\"CrossingDetailPage\">\n        <div className=\"CrossingDetails__container\">\n          <CrossingStaticMap crossing={crossing} />\n          <CrossingDetails\n            crossing={crossingForCrossingDetails}\n            crossingCommunities={crossingCommunities}\n            allCommunities={allCommunities}\n            currentUser={currentUser}\n            addMode={false}\n          />\n        </div>\n        <CrossingStatusHistory crossingId={crossing.id}/>\n      </div>\n    );\n  }\n}\n\nconst CrossingByIdQuery = gql`\n  query crossingById($crossingId: Int!) {\n    crossingById(id: $crossingId) {\n      ...crossingInfo\n      statusByLatestStatusId {\n        id\n        name\n      }\n    }\n  }\n  ${crossingFragment}\n`;\n\nexport default compose(\n  graphql(CrossingByIdQuery, {\n    name: 'CrossingByIdQuery',\n    options: ownProps => ({\n      variables: {\n        crossingId: Number(ownProps.match.params.id),\n      },\n    }),\n  }),\n  graphql(AllCommunitiesQuery, {\n    name: 'AllCommunitiesQuery',\n  }),\n)(CrossingDetailPage);\n"]},"metadata":{},"sourceType":"module"}