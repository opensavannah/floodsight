{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/carlvlewis/floodsight/src/components/Dashboard/CrossingDetailPage/CrossingDetails.js\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation addCrossingToCommunityMutation(\\n    $crossingId: Int!\\n    $communityId: Int!\\n  ) {\\n    addCrossingToCommunity(\\n      input: { crossingId: $crossingId, communityId: $communityId }\\n    ) {\\n      crossing {\\n        id\\n        communityIds\\n        communities {\\n          nodes {\\n            id\\n            name\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation addCrossing(\\n    $name: String!\\n    $humanAddress: String!\\n    $description: String!\\n    $communityId: Int!\\n    $longitude: BigFloat!\\n    $latitude: BigFloat!\\n  ) {\\n    newCrossing(\\n      input: {\\n        name: $name\\n        humanAddress: $humanAddress\\n        description: $description\\n        communityId: $communityId\\n        longitude: $longitude\\n        latitude: $latitude\\n      }\\n    ) {\\n      crossing {\\n        id\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation editCrossing(\\n    $crossingId: Int!\\n    $name: String!\\n    $description: String!\\n  ) {\\n    editCrossing(\\n      input: { crossingId: $crossingId, name: $name, description: $description }\\n    ) {\\n      crossing {\\n        id\\n        name\\n        description\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { graphql, compose } from 'react-apollo';\nimport { Redirect } from 'react-router';\nimport _ from 'lodash';\nimport FontAwesome from 'react-fontawesome';\nimport { logError } from 'services/logger';\nimport ButtonSecondary from 'components/Shared/Button/ButtonSecondary';\nimport ButtonPrimary from 'components/Shared/Button/ButtonPrimary';\nimport TextInput from 'components/Shared/Form/TextInput';\nimport LatLngInput from 'components/Dashboard/CrossingDetailPage/LatLngInput';\nimport InputDescription from 'components/Shared/Form/InputDescription';\nimport Label from 'components/Shared/Form/Label';\nimport updateCrossingFragment from 'components/Dashboard/CrossingListPage/queries/updateCrossingFragment';\nimport addCrossingToCommunityFragment from 'components/Dashboard/CrossingListPage/queries/addCrossingToCommunityFragment';\nimport Dropdown from 'components/Shared/Form/Dropdown';\nimport CommunityTag from './CommunityTag';\nimport CommunityTagAddButton from './CommunityTagAddButton';\nimport DeleteCrossingButton from './DeleteCrossingButton';\nimport 'components/Dashboard/CrossingDetailPage/CrossingDetails.css';\n\nvar CrossingDetails =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CrossingDetails, _Component);\n\n  function CrossingDetails(props) {\n    var _this;\n\n    _classCallCheck(this, CrossingDetails);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CrossingDetails).call(this, props));\n\n    _this.updateCrossing = function (e) {\n      _this.props.updateCrossingMutation({\n        variables: {\n          crossingId: _this.props.crossing.id,\n          name: _this.state.name,\n          description: _this.state.description\n        },\n        update: function update(store, _ref) {\n          var editCrossing = _ref.data.editCrossing;\n          var updatedCrossing = editCrossing.crossing;\n          store.writeFragment({\n            id: 'Crossing:' + updatedCrossing.id,\n            fragment: updateCrossingFragment,\n            data: updatedCrossing\n          });\n        }\n      }).catch(function (err) {\n        // FIXME: Show error\n        logError(err);\n      });\n    };\n\n    _this.addCrossing = function (e) {\n      _this.props.addCrossingMutation({\n        variables: {\n          name: _this.state.name,\n          humanAddress: _this.state.humanAddress,\n          description: _this.state.description,\n          communityId: Number(_this.props.currentUser.communityId),\n          longitude: _this.props.crossing.lng,\n          latitude: _this.props.crossing.lat\n        }\n      }).then(function (_ref2) {\n        var data = _ref2.data;\n        var id = data.newCrossing.crossing.id;\n\n        _this.setState({\n          redirectToNewCrossingId: id\n        });\n      }).catch(function (err) {\n        // FIXME: Show error\n        logError(err);\n      });\n    };\n\n    _this.addCommunity = function (e) {\n      _this.props.addCrossingToCommunityMutation({\n        variables: {\n          crossingId: Number(_this.props.crossing.id),\n          communityId: Number(_this.state.selectedCommunityId)\n        },\n        update: function update(store, _ref3) {\n          var addCrossingToCommunity = _ref3.data.addCrossingToCommunity;\n          var updatedCrossing = addCrossingToCommunity.crossing;\n          store.writeFragment({\n            id: 'Crossing:' + updatedCrossing.id,\n            fragment: addCrossingToCommunityFragment,\n            data: updatedCrossing\n          });\n        }\n      }).then(function (_ref4) {\n        var data = _ref4.data;\n        var _this$props = _this.props,\n            allCommunities = _this$props.allCommunities,\n            crossingCommunities = _this$props.crossingCommunities;\n        var dropdownCommunities = allCommunities.slice();\n\n        _.pullAllBy(dropdownCommunities, crossingCommunities, 'id');\n\n        _this.setState({\n          addCommunity: false,\n          dropdownCommunities: dropdownCommunities,\n          selectedCommunityId: dropdownCommunities.length > 0 ? dropdownCommunities[0].id : null\n        });\n      }).catch(function (err) {\n        // FIXME: Show error\n        logError(err);\n      });\n    };\n\n    _this.onCommunityRemoved = function () {\n      var _this$props2 = _this.props,\n          allCommunities = _this$props2.allCommunities,\n          crossingCommunities = _this$props2.crossingCommunities;\n      var dropdownCommunities = allCommunities.slice();\n\n      _.pullAllBy(dropdownCommunities, crossingCommunities, 'id');\n\n      _this.setState({\n        dropdownCommunities: dropdownCommunities,\n        selectedCommunityId: dropdownCommunities.length > 0 ? dropdownCommunities[0].id : null\n      });\n    };\n\n    _this.nameChanged = function (e) {\n      _this.setState({\n        name: e.target.value\n      });\n    };\n\n    _this.descriptionChanged = function (e) {\n      _this.setState({\n        description: e.target.value\n      });\n    };\n\n    _this.humanAddressChanged = function (e) {\n      _this.setState({\n        humanAddress: e.target.value\n      });\n    };\n\n    _this.cancelClicked = function () {\n      _this.setState({\n        name: _this.props.crossing.name,\n        description: _this.props.crossing.description\n      });\n    };\n\n    _this.addCommunityClicked = function () {\n      _this.setState({\n        addCommunity: true\n      });\n    };\n\n    _this.addCommunityCancelClicked = function () {\n      _this.setState({\n        addCommunity: false\n      });\n    };\n\n    _this.selectedCommunityChanged = function (e) {\n      _this.setState({\n        selectedCommunityId: e.target.value\n      });\n    };\n\n    var crossing = props.crossing,\n        _allCommunities = props.allCommunities,\n        _crossingCommunities = props.crossingCommunities;\n\n    var _dropdownCommunities = _allCommunities.slice();\n\n    _.pullAllBy(_dropdownCommunities, _crossingCommunities, 'id');\n\n    _this.state = {\n      name: crossing.name || '',\n      description: crossing.description || '',\n      humanAddress: crossing.humanAddress || '',\n      addCommunity: false,\n      selectedCommunityId: _dropdownCommunities.length > 0 ? _dropdownCommunities[0].id : null,\n      redirectToNewCrossingId: null,\n      dropdownCommunities: _dropdownCommunities,\n      lat: crossing.lat || '',\n      lng: crossing.ln || ''\n    };\n    return _this;\n  }\n\n  _createClass(CrossingDetails, [{\n    key: \"isDirty\",\n    value: function isDirty() {\n      return this.props.crossing.name !== this.state.name || this.props.crossing.description !== this.state.description;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // If we finished adding a crossing, we should redirect to the edit page\n      if (this.state.redirectToNewCrossingId) {\n        return React.createElement(Redirect, {\n          push: true,\n          to: \"/dashboard/crossing/\".concat(this.state.redirectToNewCrossingId),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        });\n      }\n\n      var _this$props3 = this.props,\n          crossing = _this$props3.crossing,\n          crossingCommunities = _this$props3.crossingCommunities,\n          addMode = _this$props3.addMode,\n          currentUser = _this$props3.currentUser,\n          latLngInputChanged = _this$props3.latLngInputChanged,\n          latLngInputKey = _this$props3.latLngInputKey,\n          minLat = _this$props3.minLat,\n          maxLat = _this$props3.maxLat,\n          minLng = _this$props3.minLng,\n          maxLng = _this$props3.maxLng;\n      return React.createElement(\"div\", {\n        className: \"CrossingDetails\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, !crossing.active && !addMode && React.createElement(\"div\", {\n        className: \"CrossingDetails__archived\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(FontAwesome, {\n        name: \"exclamation-triangle\",\n        className: \"CrossingDetails__archived-icon\",\n        size: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }), \"Crossing has been archived.\"), React.createElement(\"div\", {\n        className: \"CrossingDetails__details-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"CrossingDetails__details\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"CrossingDetails__field-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(Label, {\n        htmlFor: \"crossingName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, \"Display Name*\"), React.createElement(TextInput, {\n        id: \"crossingName\",\n        value: this.state.name,\n        onChange: this.nameChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }), React.createElement(InputDescription, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, \"Name your crossings by intersections (ie, Onion Creek Blvd. & 5th Ave) or waypoints (5th Ave. Denny\\u2019s)\")), React.createElement(LatLngInput, {\n        addMode: addMode,\n        latLngInputChanged: latLngInputChanged,\n        key: latLngInputKey,\n        lat: crossing.lat,\n        lng: crossing.lng,\n        minLat: minLat,\n        maxLat: maxLat,\n        minLng: minLng,\n        maxLng: maxLng,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"CrossingDetails__field-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, React.createElement(Label, {\n        htmlFor: \"streetAddress\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, \"Street Address*\"), React.createElement(TextInput, {\n        id: \"streetAddress\",\n        value: this.state.humanAddress,\n        onChange: this.humanAddressChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }), React.createElement(InputDescription, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, \"The human readable address for the crossing\")), React.createElement(\"div\", {\n        className: \"CrossingDetails__field-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(Label, {\n        htmlFor: \"crossingDescription\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, \"Additional Description (Optional)\"), React.createElement(TextInput, {\n        id: \"crossingDescription\",\n        value: this.state.description,\n        onChange: this.descriptionChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }), React.createElement(InputDescription, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, \"Does the location need additional clarification? ie, \\u201CSouthbound lane only\\u201D\"))), React.createElement(\"div\", {\n        className: \"CrossingDetails__aside\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, !addMode && React.createElement(\"div\", {\n        className: \"CrossingDetails__field-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, \"ID#\"), \" \", React.createElement(TextInput, {\n        isDisabled: true,\n        value: crossing.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"CrossingDetails__communities\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, !addMode ? \"Communities\" : \"Community\"), React.createElement(\"div\", {\n        className: \"CrossingDetails__communities-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, crossingCommunities.map(function (community) {\n        return React.createElement(CommunityTag, {\n          key: community.id,\n          community: community,\n          crossing: crossing,\n          isRemovable: currentUser.role === 'floods_super_admin' && crossingCommunities.length > 1,\n          onCommunityRemoved: _this2.onCommunityRemoved,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267\n          },\n          __self: this\n        });\n      }), !this.props.addMode && !this.state.addCommunity && this.state.dropdownCommunities.length > 0 && (currentUser.role === 'floods_super_admin' || currentUser.role === 'floods_community_admin') && React.createElement(CommunityTagAddButton, {\n        onClick: this.addCommunityClicked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      })), this.state.addCommunity && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        options: this.state.dropdownCommunities,\n        selected: this.state.selectedCommunityId,\n        onChange: this.selectedCommunityChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"CrossingDetails__addCommunityButtons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }, React.createElement(ButtonPrimary, {\n        onClick: this.addCommunity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }, \"Save\"), React.createElement(ButtonSecondary, {\n        onClick: this.addCommunityCancelClicked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }, \"Cancel\")))))), !addMode && React.createElement(\"div\", {\n        className: \"CrossingDetails__buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }, React.createElement(ButtonPrimary, {\n        onClick: this.updateCrossing,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, \"Update Crossing\"), React.createElement(ButtonSecondary, {\n        onClick: this.cancelClicked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, \"Cancel\"), crossing.active && (currentUser.role === 'floods_super_admin' || currentUser.role === 'floods_community_admin') && crossingCommunities.length === 1 && React.createElement(\"div\", {\n        className: \"CrossingDetails__buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      }, React.createElement(DeleteCrossingButton, {\n        crossingId: crossing.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }))), addMode && React.createElement(\"div\", {\n        className: \"CrossingDetails__buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, React.createElement(ButtonPrimary, {\n        onClick: this.addCrossing,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }, \"Add Crossing\")));\n    }\n  }]);\n\n  return CrossingDetails;\n}(Component);\n\nvar updateCrossingMutation = gql(_templateObject());\nvar addCrossingMutation = gql(_templateObject2());\nvar addCrossingToCommunityMutation = gql(_templateObject3());\nexport default compose(graphql(updateCrossingMutation, {\n  name: 'updateCrossingMutation'\n}), graphql(addCrossingMutation, {\n  name: 'addCrossingMutation'\n}), graphql(addCrossingToCommunityMutation, {\n  name: 'addCrossingToCommunityMutation'\n}))(CrossingDetails);","map":{"version":3,"sources":["/Users/carlvlewis/floodsight/src/components/Dashboard/CrossingDetailPage/CrossingDetails.js"],"names":["React","Component","gql","graphql","compose","Redirect","_","FontAwesome","logError","ButtonSecondary","ButtonPrimary","TextInput","LatLngInput","InputDescription","Label","updateCrossingFragment","addCrossingToCommunityFragment","Dropdown","CommunityTag","CommunityTagAddButton","DeleteCrossingButton","CrossingDetails","props","updateCrossing","e","updateCrossingMutation","variables","crossingId","crossing","id","name","state","description","update","store","editCrossing","data","updatedCrossing","writeFragment","fragment","catch","err","addCrossing","addCrossingMutation","humanAddress","communityId","Number","currentUser","longitude","lng","latitude","lat","then","newCrossing","setState","redirectToNewCrossingId","addCommunity","addCrossingToCommunityMutation","selectedCommunityId","addCrossingToCommunity","allCommunities","crossingCommunities","dropdownCommunities","slice","pullAllBy","length","onCommunityRemoved","nameChanged","target","value","descriptionChanged","humanAddressChanged","cancelClicked","addCommunityClicked","addCommunityCancelClicked","selectedCommunityChanged","ln","addMode","latLngInputChanged","latLngInputKey","minLat","maxLat","minLng","maxLng","active","map","community","role"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { graphql, compose } from 'react-apollo';\nimport { Redirect } from 'react-router';\nimport _ from 'lodash';\nimport FontAwesome from 'react-fontawesome';\nimport { logError } from 'services/logger';\n\nimport ButtonSecondary from 'components/Shared/Button/ButtonSecondary';\nimport ButtonPrimary from 'components/Shared/Button/ButtonPrimary';\nimport TextInput from 'components/Shared/Form/TextInput';\nimport LatLngInput from 'components/Dashboard/CrossingDetailPage/LatLngInput';\nimport InputDescription from 'components/Shared/Form/InputDescription';\nimport Label from 'components/Shared/Form/Label';\n\nimport updateCrossingFragment from 'components/Dashboard/CrossingListPage/queries/updateCrossingFragment';\nimport addCrossingToCommunityFragment from 'components/Dashboard/CrossingListPage/queries/addCrossingToCommunityFragment';\nimport Dropdown from 'components/Shared/Form/Dropdown';\n\nimport CommunityTag from './CommunityTag';\nimport CommunityTagAddButton from './CommunityTagAddButton';\nimport DeleteCrossingButton from './DeleteCrossingButton';\n\nimport 'components/Dashboard/CrossingDetailPage/CrossingDetails.css';\n\nclass CrossingDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    const { crossing, allCommunities, crossingCommunities } = props;\n    var dropdownCommunities = allCommunities.slice();\n    _.pullAllBy(dropdownCommunities, crossingCommunities, 'id');\n\n    this.state = {\n      name: crossing.name || '',\n      description: crossing.description || '',\n      humanAddress: crossing.humanAddress || '',\n      addCommunity: false,\n      selectedCommunityId:\n        dropdownCommunities.length > 0 ? dropdownCommunities[0].id : null,\n      redirectToNewCrossingId: null,\n      dropdownCommunities: dropdownCommunities,\n      lat: crossing.lat || '',\n      lng: crossing.ln || '',\n    };\n  }\n\n  updateCrossing = e => {\n    this.props\n      .updateCrossingMutation({\n        variables: {\n          crossingId: this.props.crossing.id,\n          name: this.state.name,\n          description: this.state.description,\n        },\n        update: (store, { data: { editCrossing } }) => {\n          const updatedCrossing = editCrossing.crossing;\n          store.writeFragment({\n            id: 'Crossing:' + updatedCrossing.id,\n            fragment: updateCrossingFragment,\n            data: updatedCrossing,\n          });\n        },\n      })\n      .catch(err => {\n        // FIXME: Show error\n        logError(err);\n      });\n  };\n\n  addCrossing = e => {\n    this.props\n      .addCrossingMutation({\n        variables: {\n          name: this.state.name,\n          humanAddress: this.state.humanAddress,\n          description: this.state.description,\n          communityId: Number(this.props.currentUser.communityId),\n          longitude: this.props.crossing.lng,\n          latitude: this.props.crossing.lat,\n        },\n      })\n      .then(({ data }) => {\n        const { id } = data.newCrossing.crossing;\n        this.setState({ redirectToNewCrossingId: id });\n      })\n      .catch(err => {\n        // FIXME: Show error\n        logError(err);\n      });\n  };\n\n  addCommunity = e => {\n    this.props\n      .addCrossingToCommunityMutation({\n        variables: {\n          crossingId: Number(this.props.crossing.id),\n          communityId: Number(this.state.selectedCommunityId),\n        },\n        update: (store, { data: { addCrossingToCommunity } }) => {\n          const updatedCrossing = addCrossingToCommunity.crossing;\n          store.writeFragment({\n            id: 'Crossing:' + updatedCrossing.id,\n            fragment: addCrossingToCommunityFragment,\n            data: updatedCrossing,\n          });\n        },\n      })\n      .then(({ data }) => {\n        const { allCommunities, crossingCommunities } = this.props;\n        var dropdownCommunities = allCommunities.slice();\n        _.pullAllBy(dropdownCommunities, crossingCommunities, 'id');\n\n        this.setState({\n          addCommunity: false,\n          dropdownCommunities: dropdownCommunities,\n          selectedCommunityId:\n            dropdownCommunities.length > 0 ? dropdownCommunities[0].id : null,\n        });\n      })\n      .catch(err => {\n        // FIXME: Show error\n        logError(err);\n      });\n  };\n\n  onCommunityRemoved = () => {\n    const { allCommunities, crossingCommunities } = this.props;\n    var dropdownCommunities = allCommunities.slice();\n    _.pullAllBy(dropdownCommunities, crossingCommunities, 'id');\n\n    this.setState({\n      dropdownCommunities: dropdownCommunities,\n      selectedCommunityId:\n        dropdownCommunities.length > 0 ? dropdownCommunities[0].id : null,\n    });\n  };\n\n  nameChanged = e => {\n    this.setState({\n      name: e.target.value,\n    });\n  };\n\n  descriptionChanged = e => {\n    this.setState({\n      description: e.target.value,\n    });\n  };\n\n  humanAddressChanged = e => {\n    this.setState({\n      humanAddress: e.target.value,\n    });\n  };\n\n  cancelClicked = () => {\n    this.setState({\n      name: this.props.crossing.name,\n      description: this.props.crossing.description,\n    });\n  };\n\n  addCommunityClicked = () => {\n    this.setState({ addCommunity: true });\n  };\n\n  addCommunityCancelClicked = () => {\n    this.setState({ addCommunity: false });\n  };\n\n  selectedCommunityChanged = e => {\n    this.setState({ selectedCommunityId: e.target.value });\n  };\n\n  isDirty() {\n    return (\n      this.props.crossing.name !== this.state.name ||\n      this.props.crossing.description !== this.state.description\n    );\n  }\n\n  render() {\n    // If we finished adding a crossing, we should redirect to the edit page\n    if (this.state.redirectToNewCrossingId) {\n      return (\n        <Redirect\n          push\n          to={`/dashboard/crossing/${this.state.redirectToNewCrossingId}`}\n        />\n      );\n    }\n\n    const { crossing, crossingCommunities, addMode, currentUser, latLngInputChanged, latLngInputKey, minLat, maxLat, minLng, maxLng } = this.props;\n    return (\n      <div className=\"CrossingDetails\">\n        {!crossing.active &&\n          !addMode && (\n            <div className=\"CrossingDetails__archived\">\n              <FontAwesome\n                name=\"exclamation-triangle\"\n                className=\"CrossingDetails__archived-icon\"\n                size=\"lg\"\n              />\n              Crossing has been archived.\n            </div>\n          )}\n        <div className=\"CrossingDetails__details-container\">\n          <div className=\"CrossingDetails__details\">\n            <div className=\"CrossingDetails__field-group\">\n              <Label htmlFor=\"crossingName\">Display Name*</Label>\n              <TextInput\n                id=\"crossingName\"\n                value={this.state.name}\n                onChange={this.nameChanged}\n              />\n              <InputDescription>\n                Name your crossings by intersections (ie, Onion Creek Blvd. &\n                5th Ave) or waypoints (5th Ave. Denny’s)\n              </InputDescription>\n            </div>\n            <LatLngInput\n              addMode={addMode}\n              latLngInputChanged={latLngInputChanged}\n              key={latLngInputKey}\n              lat={crossing.lat} lng={crossing.lng}\n              minLat={minLat} maxLat={maxLat}\n              minLng={minLng} maxLng={maxLng}\n            />\n            <div className=\"CrossingDetails__field-group\">\n              <Label htmlFor=\"streetAddress\">Street Address*</Label>\n              <TextInput\n                id=\"streetAddress\"\n                value={this.state.humanAddress}\n                onChange={this.humanAddressChanged}\n              />\n              <InputDescription>\n                The human readable address for the crossing\n              </InputDescription>\n            </div>\n            <div className=\"CrossingDetails__field-group\">\n              <Label htmlFor=\"crossingDescription\">\n                Additional Description (Optional)\n              </Label>\n              <TextInput\n                id=\"crossingDescription\"\n                value={this.state.description}\n                onChange={this.descriptionChanged}\n              />\n              <InputDescription>\n                Does the location need additional clarification? ie, “Southbound\n                lane only”\n              </InputDescription>\n            </div>\n          </div>\n          <div className=\"CrossingDetails__aside\">\n            {!addMode && (\n              <div className=\"CrossingDetails__field-group\">\n                <Label>ID#</Label> <TextInput isDisabled value={crossing.id} />\n              </div>\n            )}\n            <div className=\"CrossingDetails__communities\">\n              <Label>{!addMode ? \"Communities\" : \"Community\"}</Label>\n              <div className=\"CrossingDetails__communities-list\">\n                {crossingCommunities.map(community => {\n                  return (\n                    <CommunityTag\n                      key={community.id}\n                      community={community}\n                      crossing={crossing}\n                      isRemovable={\n                        currentUser.role === 'floods_super_admin' &&\n                        crossingCommunities.length > 1\n                      }\n                      onCommunityRemoved={this.onCommunityRemoved}\n                    />\n                  );\n                })}\n                { !this.props.addMode &&\n                  !this.state.addCommunity &&\n                  this.state.dropdownCommunities.length > 0 &&\n                  (\n                    (currentUser.role === 'floods_super_admin') ||\n                    (currentUser.role === 'floods_community_admin')\n                  ) && (\n                    <CommunityTagAddButton onClick={this.addCommunityClicked} />\n                  )}\n              </div>\n\n              {this.state.addCommunity && (\n                <div>\n                  <Dropdown\n                    options={this.state.dropdownCommunities}\n                    selected={this.state.selectedCommunityId}\n                    onChange={this.selectedCommunityChanged}\n                  />\n\n                  <div className=\"CrossingDetails__addCommunityButtons\">\n                    <ButtonPrimary onClick={this.addCommunity}>\n                      Save\n                    </ButtonPrimary>\n                    <ButtonSecondary onClick={this.addCommunityCancelClicked}>\n                      Cancel\n                    </ButtonSecondary>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        {!addMode && (\n          <div className=\"CrossingDetails__buttons\">\n            <ButtonPrimary onClick={this.updateCrossing}>\n              Update Crossing\n            </ButtonPrimary>\n            <ButtonSecondary onClick={this.cancelClicked}>\n              Cancel\n            </ButtonSecondary>\n            {crossing.active &&\n              (\n                (currentUser.role === 'floods_super_admin') ||\n                (currentUser.role === 'floods_community_admin')\n              ) &&\n              crossingCommunities.length === 1 && (\n                <div className=\"CrossingDetails__buttons\">\n                  <DeleteCrossingButton crossingId={crossing.id} />\n                </div>\n              )}\n          </div>\n        )}\n        {addMode && (\n          <div className=\"CrossingDetails__buttons\">\n            <ButtonPrimary onClick={this.addCrossing}>\n              Add Crossing\n            </ButtonPrimary>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst updateCrossingMutation = gql`\n  mutation editCrossing(\n    $crossingId: Int!\n    $name: String!\n    $description: String!\n  ) {\n    editCrossing(\n      input: { crossingId: $crossingId, name: $name, description: $description }\n    ) {\n      crossing {\n        id\n        name\n        description\n      }\n    }\n  }\n`;\n\nconst addCrossingMutation = gql`\n  mutation addCrossing(\n    $name: String!\n    $humanAddress: String!\n    $description: String!\n    $communityId: Int!\n    $longitude: BigFloat!\n    $latitude: BigFloat!\n  ) {\n    newCrossing(\n      input: {\n        name: $name\n        humanAddress: $humanAddress\n        description: $description\n        communityId: $communityId\n        longitude: $longitude\n        latitude: $latitude\n      }\n    ) {\n      crossing {\n        id\n      }\n    }\n  }\n`;\n\nconst addCrossingToCommunityMutation = gql`\n  mutation addCrossingToCommunityMutation(\n    $crossingId: Int!\n    $communityId: Int!\n  ) {\n    addCrossingToCommunity(\n      input: { crossingId: $crossingId, communityId: $communityId }\n    ) {\n      crossing {\n        id\n        communityIds\n        communities {\n          nodes {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default compose(\n  graphql(updateCrossingMutation, {\n    name: 'updateCrossingMutation',\n  }),\n  graphql(addCrossingMutation, {\n    name: 'addCrossingMutation',\n  }),\n  graphql(addCrossingToCommunityMutation, {\n    name: 'addCrossingToCommunityMutation',\n  }),\n)(CrossingDetails);\n"]},"metadata":{},"sourceType":"module"}