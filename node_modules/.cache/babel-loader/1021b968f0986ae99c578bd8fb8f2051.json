{"ast":null,"code":"import _classCallCheck from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/carlvlewis/floodsight/src/components/Dashboard/CrossingListPage/InfiniteCrossingList.js\";\nimport React from 'react';\nimport DashboardCrossingListItem from 'components/Dashboard/CrossingListPage/DashboardCrossingListItem/DashboardCrossingListItem';\nimport { InfiniteLoader, AutoSizer, List, CellMeasurer, CellMeasurerCache } from 'react-virtualized';\nimport 'components/Dashboard/CrossingListPage/CrossingListPage.css';\nvar virtualizingList = [];\nvar listRef;\nvar cache = new CellMeasurerCache({\n  defaultHeight: 400,\n  fixedWidth: true\n});\n\nvar InfiniteCrossingList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(InfiniteCrossingList, _React$Component);\n\n  function InfiniteCrossingList(props) {\n    var _this;\n\n    _classCallCheck(this, InfiniteCrossingList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InfiniteCrossingList).call(this, props));\n    _this.state = {\n      dirtyCrossings: []\n    };\n    _this._isRowLoaded = _this._isRowLoaded.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this._rowRenderer = _this._rowRenderer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this._noRowsRenderer = _this._noRowsRenderer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clearMeasurerCache = _this.clearMeasurerCache.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.refreshList = _this.refreshList.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(InfiniteCrossingList, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (listRef) {\n        this.refreshList();\n        this.clearMeasurerCache();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (listRef) {\n        this.refreshList();\n        this.clearMeasurerCache();\n      }\n    }\n  }, {\n    key: \"clearMeasurerCache\",\n    value: function clearMeasurerCache(index) {\n      if (index) {\n        cache.clear(index);\n      } else {\n        cache.clearAll();\n      }\n\n      listRef.recomputeRowHeights();\n    }\n  }, {\n    key: \"saveDirtyUnmountedListItemState\",\n    value: function saveDirtyUnmountedListItemState(dirtyState) {\n      var savedDirties = this.state.dirtyCrossings;\n      savedDirties[dirtyState.crossingId] = dirtyState;\n      this.setState({\n        dirtyCrossings: savedDirties\n      });\n    }\n  }, {\n    key: \"restoreDirtyUnmountedListItemState\",\n    value: function restoreDirtyUnmountedListItemState(crossingId) {\n      var savedState = this.state.dirtyCrossings[crossingId];\n\n      if (savedState) {\n        var savedDirties = this.state.dirtyCrossings;\n        savedDirties[crossingId] = null;\n        this.setState({\n          dirtyCrossings: savedDirties\n        });\n      }\n\n      return savedState;\n    }\n  }, {\n    key: \"refreshList\",\n    value: function refreshList() {\n      listRef.forceUpdateGrid();\n    }\n  }, {\n    key: \"_isRowLoaded\",\n    value: function _isRowLoaded(_ref) {\n      var index = _ref.index;\n      return !!virtualizingList[index];\n    }\n  }, {\n    key: \"_rowRenderer\",\n    value: function _rowRenderer(_ref2) {\n      var _this2 = this;\n\n      var key = _ref2.key,\n          index = _ref2.index,\n          style = _ref2.style,\n          parent = _ref2.parent;\n      var _this$props = this.props,\n          statusReasons = _this$props.statusReasons,\n          currentUser = _this$props.currentUser,\n          crossingQueryVariables = _this$props.crossingQueryVariables,\n          cqClassName = _this$props.cqClassName,\n          allCommunities = _this$props.allCommunities;\n      var crossing;\n\n      if (index < virtualizingList.length) {\n        crossing = virtualizingList[index].node;\n      } else {\n        return React.createElement(\"div\", {\n          style: style,\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(CellMeasurer, {\n        cache: cache,\n        columnIndex: 0,\n        key: key,\n        parent: parent,\n        rowIndex: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, function (_ref3) {\n        var measure = _ref3.measure;\n        return React.createElement(\"div\", {\n          className: \"CrossingListItemMeasureContainer\",\n          style: style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, React.createElement(DashboardCrossingListItem, {\n          onDash: _this2.props.onDash,\n          onLoad: measure,\n          key: crossing.id,\n          crossing: crossing,\n          reasons: statusReasons,\n          allCommunities: allCommunities,\n          currentUser: currentUser,\n          cqClassName: cqClassName,\n          clearMeasurerCache: function clearMeasurerCache(all) {\n            return _this2.clearMeasurerCache(all ? null : index);\n          },\n          refreshList: function refreshList() {\n            return _this2.refreshList();\n          },\n          crossingQueryVariables: crossingQueryVariables,\n          saveDirtyState: function saveDirtyState(dirtyState) {\n            return _this2.saveDirtyUnmountedListItemState(dirtyState);\n          },\n          restoreDirtyState: function restoreDirtyState(crossingId) {\n            return _this2.restoreDirtyUnmountedListItemState(crossingId);\n          },\n          listOrMap: \"list\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }));\n      });\n    }\n  }, {\n    key: \"_noRowsRenderer\",\n    value: function _noRowsRenderer() {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"No Rows returned from GraphQL fetch....\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props2 = this.props,\n          loadMoreRows = _this$props2.loadMoreRows,\n          crossingsQuery = _this$props2.crossingsQuery;\n\n      if (!crossingsQuery) {\n        return '';\n      }\n\n      virtualizingList = crossingsQuery.edges;\n      return React.createElement(\"div\", {\n        style: {\n          height: 'calc(100vh - 140px)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(InfiniteLoader, {\n        isRowLoaded: this._isRowLoaded,\n        loadMoreRows: loadMoreRows,\n        rowCount: crossingsQuery.totalCount,\n        threshold: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, function (_ref4) {\n        var onRowsRendered = _ref4.onRowsRendered,\n            registerChild = _ref4.registerChild;\n        return React.createElement(AutoSizer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, function (_ref5) {\n          var height = _ref5.height,\n              width = _ref5.width;\n          return React.createElement(List, {\n            ref: function ref(_ref6) {\n              return registerChild = listRef = _ref6;\n            },\n            className: \"List\",\n            height: height,\n            width: width,\n            onRowsRendered: onRowsRendered,\n            rowCount: crossingsQuery.totalCount,\n            deferredMeasurementCache: cache,\n            rowHeight: cache.rowHeight,\n            rowRenderer: _this3._rowRenderer,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 159\n            },\n            __self: this\n          });\n        });\n      }));\n    }\n  }]);\n\n  return InfiniteCrossingList;\n}(React.Component);\n\nexport { InfiniteCrossingList as default };","map":{"version":3,"sources":["/Users/carlvlewis/floodsight/src/components/Dashboard/CrossingListPage/InfiniteCrossingList.js"],"names":["React","DashboardCrossingListItem","InfiniteLoader","AutoSizer","List","CellMeasurer","CellMeasurerCache","virtualizingList","listRef","cache","defaultHeight","fixedWidth","InfiniteCrossingList","props","state","dirtyCrossings","_isRowLoaded","bind","_rowRenderer","_noRowsRenderer","clearMeasurerCache","refreshList","index","clear","clearAll","recomputeRowHeights","dirtyState","savedDirties","crossingId","setState","savedState","forceUpdateGrid","key","style","parent","statusReasons","currentUser","crossingQueryVariables","cqClassName","allCommunities","crossing","length","node","measure","onDash","id","all","saveDirtyUnmountedListItemState","restoreDirtyUnmountedListItemState","loadMoreRows","crossingsQuery","edges","height","totalCount","onRowsRendered","registerChild","width","ref","rowHeight","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DashboardCrossingListItem from 'components/Dashboard/CrossingListPage/DashboardCrossingListItem/DashboardCrossingListItem';\nimport {\n  InfiniteLoader,\n  AutoSizer,\n  List,\n  CellMeasurer,\n  CellMeasurerCache,\n} from 'react-virtualized';\nimport 'components/Dashboard/CrossingListPage/CrossingListPage.css';\n\nlet virtualizingList = [];\nlet listRef;\n\nconst cache = new CellMeasurerCache({\n  defaultHeight: 400,\n  fixedWidth: true,\n});\n\nexport default class InfiniteCrossingList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dirtyCrossings: [],\n    };\n\n    this._isRowLoaded = this._isRowLoaded.bind(this);\n    this._rowRenderer = this._rowRenderer.bind(this);\n    this._noRowsRenderer = this._noRowsRenderer.bind(this);\n    this.clearMeasurerCache = this.clearMeasurerCache.bind(this);\n    this.refreshList = this.refreshList.bind(this);\n  }\n\n  componentDidUpdate() {\n    if (listRef) {\n      this.refreshList();\n      this.clearMeasurerCache();\n    }\n  }\n\n  componentDidMount() {\n    if (listRef) {\n      this.refreshList();\n      this.clearMeasurerCache();\n    }\n  }\n\n  clearMeasurerCache(index) {\n    if (index) {\n      cache.clear(index);\n    } else {\n      cache.clearAll();\n    }\n    listRef.recomputeRowHeights();\n  }\n\n  saveDirtyUnmountedListItemState(dirtyState) {\n    const savedDirties = this.state.dirtyCrossings;\n    savedDirties[dirtyState.crossingId] = dirtyState;\n    this.setState({ dirtyCrossings: savedDirties });\n  }\n\n  restoreDirtyUnmountedListItemState(crossingId) {\n    const savedState = this.state.dirtyCrossings[crossingId];\n    if (savedState) {\n      const savedDirties = this.state.dirtyCrossings;\n      savedDirties[crossingId] = null;\n      this.setState({ dirtyCrossings: savedDirties });\n    }\n    return savedState;\n  }\n\n  refreshList() {\n    listRef.forceUpdateGrid();\n  }\n\n  _isRowLoaded({ index }) {\n    return !!virtualizingList[index];\n  }\n\n  _rowRenderer({ key, index, style, parent }) {\n    const {\n      statusReasons,\n      currentUser,\n      crossingQueryVariables,\n      cqClassName,\n      allCommunities,\n    } = this.props;\n    let crossing;\n\n    if (index < virtualizingList.length) {\n      crossing = virtualizingList[index].node;\n    } else {\n      return <div style={style} key={key} />;\n    }\n\n    return (\n      <CellMeasurer\n        cache={cache}\n        columnIndex={0}\n        key={key}\n        parent={parent}\n        rowIndex={index}\n      >\n        {({ measure }) => (\n          <div className=\"CrossingListItemMeasureContainer\" style={style}>\n            <DashboardCrossingListItem\n              onDash={this.props.onDash}\n              onLoad={measure}\n              key={crossing.id}\n              crossing={crossing}\n              reasons={statusReasons}\n              allCommunities={allCommunities}\n              currentUser={currentUser}\n              cqClassName={cqClassName}\n              clearMeasurerCache={all =>\n                this.clearMeasurerCache(all ? null : index)\n              }\n              refreshList={() => this.refreshList()}\n              crossingQueryVariables={crossingQueryVariables}\n              saveDirtyState={dirtyState =>\n                this.saveDirtyUnmountedListItemState(dirtyState)\n              }\n              restoreDirtyState={crossingId =>\n                this.restoreDirtyUnmountedListItemState(crossingId)\n              }\n              listOrMap=\"list\"\n            />\n          </div>\n        )}\n      </CellMeasurer>\n    );\n  }\n\n  _noRowsRenderer() {\n    return <h1>No Rows returned from GraphQL fetch....</h1>;\n  }\n\n  render() {\n    const { loadMoreRows, crossingsQuery } = this.props;\n\n    if (!crossingsQuery) {\n      return '';\n    }\n\n    virtualizingList = crossingsQuery.edges;\n\n    return (\n      <div style={{ height: 'calc(100vh - 140px)' }}>\n        <InfiniteLoader\n          isRowLoaded={this._isRowLoaded}\n          loadMoreRows={loadMoreRows}\n          rowCount={crossingsQuery.totalCount}\n          threshold={10}\n        >\n          {({ onRowsRendered, registerChild }) => (\n            <AutoSizer>\n              {({ height, width }) => (\n                <List\n                  ref={ref => (registerChild = listRef = ref)}\n                  className=\"List\"\n                  height={height}\n                  width={width}\n                  onRowsRendered={onRowsRendered}\n                  rowCount={crossingsQuery.totalCount}\n                  deferredMeasurementCache={cache}\n                  rowHeight={cache.rowHeight}\n                  rowRenderer={this._rowRenderer}\n                />\n              )}\n            </AutoSizer>\n          )}\n        </InfiniteLoader>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}