{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _toConsumableArray from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/carlvlewis/floodsight/src/components/Dashboard/CrossingListPage/InfiniteCrossingPaginationContainer.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    allCommunities {\\n      nodes {\\n        ...communityInfo\\n      }\\n    }\\n  }\\n  \", \"\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport InfiniteCrossingList from 'components/Dashboard/CrossingListPage/InfiniteCrossingList';\nimport { graphql, compose } from 'react-apollo';\nimport 'react-virtualized/styles.css';\nimport crossingsQuery from 'components/Dashboard/CrossingListPage/queries/crossingsQuery';\nimport statusReasonsQuery from 'components/Dashboard/CrossingListPage/queries/statusReasonsQuery';\nimport { ContainerQuery } from 'react-container-query';\nimport classnames from 'classnames';\nimport gql from 'graphql-tag';\nimport communityFragment from 'components/Shared/Map/queries/communityFragment'; // The linter can't figure out how we're using this ref so I'm just gonna...\n// eslint-disable-next-line\n\nvar infiniteCrossingListRef;\nvar crossingQueryVariables;\nvar containerQuery = {\n  'DashboardCrossingListItem--lg': {\n    minWidth: 600\n  }\n};\nvar configObject = {\n  options: function options(props) {\n    crossingQueryVariables = {\n      search: props.searchQuery,\n      showOpen: props.showOpen,\n      showClosed: props.showClosed,\n      showCaution: props.showCaution,\n      showLongterm: props.showLongterm,\n      communityId: props.currentUser.role !== 'floods_super_admin' ? props.currentUser.communityId : null,\n      orderAsc: props.sortByUpdatedAsc,\n      pageCursor: null\n    };\n    return {\n      variables: crossingQueryVariables\n    };\n  },\n  force: true,\n  props: function props(_ref) {\n    var ownProps = _ref.ownProps,\n        data = _ref.data;\n    var loading = data.loading,\n        searchCrossings = data.searchCrossings,\n        fetchMore = data.fetchMore;\n\n    var loadMoreRows = function loadMoreRows() {\n      return fetchMore({\n        variables: {\n          pageCursor: searchCrossings.pageInfo.endCursor\n        },\n        updateQuery: function updateQuery(previousResult, _ref2) {\n          var fetchMoreResult = _ref2.fetchMoreResult;\n          var totalCount = fetchMoreResult.searchCrossings.totalCount;\n          var newEdges = fetchMoreResult.searchCrossings.edges;\n          var pageInfo = fetchMoreResult.searchCrossings.pageInfo;\n\n          if (!previousResult.searchCrossings) {\n            return;\n          }\n\n          return {\n            searchCrossings: {\n              __typename: 'SearchCrossingsConnection',\n              totalCount: totalCount,\n              edges: _toConsumableArray(previousResult.searchCrossings.edges).concat(_toConsumableArray(newEdges)),\n              pageInfo: pageInfo\n            }\n          };\n        }\n      });\n    };\n\n    return {\n      loading: loading,\n      searchCrossings: searchCrossings,\n      loadMoreRows: loadMoreRows\n    };\n  }\n};\nexport var InfiniteCrossingPaginationContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(InfiniteCrossingPaginationContainer, _Component);\n\n  function InfiniteCrossingPaginationContainer() {\n    _classCallCheck(this, InfiniteCrossingPaginationContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(InfiniteCrossingPaginationContainer).apply(this, arguments));\n  }\n\n  _createClass(InfiniteCrossingPaginationContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var isLoading = !this.props.statusReasonsQuery || this.props.statusReasonsQuery.loading || !this.props.communitiesQuery || this.props.communitiesQuery.loading || this.props.loading;\n      var _this$props = this.props,\n          searchCrossings = _this$props.searchCrossings,\n          loadMoreRows = _this$props.loadMoreRows,\n          currentUser = _this$props.currentUser,\n          sortByUpdatedAsc = _this$props.sortByUpdatedAsc,\n          onDash = _this$props.onDash;\n\n      if (isLoading) {\n        return '';\n      }\n\n      var statusReasons = this.props.statusReasonsQuery.allStatusReasons.nodes;\n      var communities = this.props.communitiesQuery.allCommunities.nodes;\n      return React.createElement(ContainerQuery, {\n        query: containerQuery,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, function (params) {\n        var cqClassName = classnames(params);\n        return React.createElement(\"div\", {\n          className: \"CrossingListPage_crossing-list-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, React.createElement(InfiniteCrossingList, Object.assign({}, _this.props, {\n          ref: function ref(_ref3) {\n            return infiniteCrossingListRef = _ref3;\n          },\n          loadMoreRows: loadMoreRows,\n          crossingsQuery: searchCrossings,\n          statusReasons: statusReasons,\n          allCommunities: communities,\n          currentUser: currentUser,\n          sortByUpdatedAsc: sortByUpdatedAsc,\n          crossingQueryVariables: crossingQueryVariables,\n          cqClassName: cqClassName,\n          onDash: onDash,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        })));\n      });\n    }\n  }]);\n\n  return InfiniteCrossingPaginationContainer;\n}(Component);\nvar communitiesQuery = gql(_templateObject(), communityFragment);\nexport default compose(graphql(crossingsQuery, configObject), graphql(statusReasonsQuery, {\n  name: 'statusReasonsQuery'\n}), graphql(communitiesQuery, {\n  name: 'communitiesQuery'\n}))(InfiniteCrossingPaginationContainer);","map":{"version":3,"sources":["/Users/carlvlewis/floodsight/src/components/Dashboard/CrossingListPage/InfiniteCrossingPaginationContainer.js"],"names":["React","Component","InfiniteCrossingList","graphql","compose","crossingsQuery","statusReasonsQuery","ContainerQuery","classnames","gql","communityFragment","infiniteCrossingListRef","crossingQueryVariables","containerQuery","minWidth","configObject","options","props","search","searchQuery","showOpen","showClosed","showCaution","showLongterm","communityId","currentUser","role","orderAsc","sortByUpdatedAsc","pageCursor","variables","force","ownProps","data","loading","searchCrossings","fetchMore","loadMoreRows","pageInfo","endCursor","updateQuery","previousResult","fetchMoreResult","totalCount","newEdges","edges","__typename","InfiniteCrossingPaginationContainer","isLoading","communitiesQuery","onDash","statusReasons","allStatusReasons","nodes","communities","allCommunities","params","cqClassName","ref","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport InfiniteCrossingList from 'components/Dashboard/CrossingListPage/InfiniteCrossingList';\nimport { graphql, compose } from 'react-apollo';\nimport 'react-virtualized/styles.css';\nimport crossingsQuery from 'components/Dashboard/CrossingListPage/queries/crossingsQuery';\nimport statusReasonsQuery from 'components/Dashboard/CrossingListPage/queries/statusReasonsQuery';\nimport { ContainerQuery } from 'react-container-query';\nimport classnames from 'classnames';\nimport gql from 'graphql-tag';\nimport communityFragment from 'components/Shared/Map/queries/communityFragment';\n\n// The linter can't figure out how we're using this ref so I'm just gonna...\n// eslint-disable-next-line\nlet infiniteCrossingListRef;\nlet crossingQueryVariables;\n\nconst containerQuery = {\n  'DashboardCrossingListItem--lg': {\n    minWidth: 600,\n  },\n};\n\nconst configObject = {\n  options: props => {\n    crossingQueryVariables = {\n      search: props.searchQuery,\n      showOpen: props.showOpen,\n      showClosed: props.showClosed,\n      showCaution: props.showCaution,\n      showLongterm: props.showLongterm,\n      communityId:\n        props.currentUser.role !== 'floods_super_admin'\n          ? props.currentUser.communityId\n          : null,\n      orderAsc: props.sortByUpdatedAsc,\n      pageCursor: null,\n    };\n\n    return {\n      variables: crossingQueryVariables,\n    };\n  },\n  force: true,\n  props: ({ ownProps, data }) => {\n    const { loading, searchCrossings, fetchMore } = data;\n    const loadMoreRows = () => {\n      return fetchMore({\n        variables: {\n          pageCursor: searchCrossings.pageInfo.endCursor,\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          const totalCount = fetchMoreResult.searchCrossings.totalCount;\n          const newEdges = fetchMoreResult.searchCrossings.edges;\n          const pageInfo = fetchMoreResult.searchCrossings.pageInfo;\n\n          if (!previousResult.searchCrossings) {\n            return;\n          }\n\n          return {\n            searchCrossings: {\n              __typename: 'SearchCrossingsConnection',\n              totalCount,\n              edges: [...previousResult.searchCrossings.edges, ...newEdges],\n              pageInfo,\n            },\n          };\n        },\n      });\n    };\n\n    return {\n      loading,\n      searchCrossings,\n      loadMoreRows,\n    };\n  },\n};\n\nexport class InfiniteCrossingPaginationContainer extends Component {\n  render() {\n    const isLoading =\n      !this.props.statusReasonsQuery ||\n      this.props.statusReasonsQuery.loading ||\n      !this.props.communitiesQuery ||\n      this.props.communitiesQuery.loading ||\n      this.props.loading;\n\n    const {\n      searchCrossings,\n      loadMoreRows,\n      currentUser,\n      sortByUpdatedAsc,\n      onDash\n    } = this.props;\n\n    if (isLoading) {\n      return '';\n    }\n\n    const statusReasons = this.props.statusReasonsQuery.allStatusReasons.nodes;\n    const communities = this.props.communitiesQuery.allCommunities.nodes;\n\n    return (\n      <ContainerQuery query={containerQuery}>\n        {params => {\n          const cqClassName = classnames(params);\n          return (\n            <div className=\"CrossingListPage_crossing-list-container\">\n              <InfiniteCrossingList\n                {...this.props}\n                ref={ref => (infiniteCrossingListRef = ref)}\n                loadMoreRows={loadMoreRows}\n                crossingsQuery={searchCrossings}\n                statusReasons={statusReasons}\n                allCommunities={communities}\n                currentUser={currentUser}\n                sortByUpdatedAsc={sortByUpdatedAsc}\n                crossingQueryVariables={crossingQueryVariables}\n                cqClassName={cqClassName}\n                onDash={onDash}\n              />\n            </div>\n          );\n        }}\n      </ContainerQuery>\n    );\n  }\n}\n\nconst communitiesQuery = gql`\n  {\n    allCommunities {\n      nodes {\n        ...communityInfo\n      }\n    }\n  }\n  ${communityFragment}\n`;\n\nexport default compose(\n  graphql(crossingsQuery, configObject),\n  graphql(statusReasonsQuery, { name: 'statusReasonsQuery' }),\n  graphql(communitiesQuery, { name: 'communitiesQuery' }),\n)(InfiniteCrossingPaginationContainer);\n"]},"metadata":{},"sourceType":"module"}