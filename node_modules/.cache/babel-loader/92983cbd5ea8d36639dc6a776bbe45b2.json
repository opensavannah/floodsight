{"ast":null,"code":"import _classCallCheck from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/carlvlewis/floodsight/src/components/Shared/Map/CrossingMap.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as MapboxGl from 'mapbox-gl';\nimport ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\nimport { withRouter } from 'react-router';\nimport SelectedFeatureContainer from 'components/Shared/CrossingMapPage/SelectedFeatureContainer';\nimport { MAPBOX_STYLE, MapboxAccessToken } from 'constants/MapboxConstants';\nimport 'components/Shared/Map/CrossingMap.css';\nvar Map = ReactMapboxGl({\n  accessToken: MapboxAccessToken,\n  attributionControl: false\n});\n\nvar CrossingMap =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CrossingMap, _React$Component);\n\n  function CrossingMap(props) {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CrossingMap);\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CrossingMap)).call.apply(_getPrototypeOf2, [this, props].concat(args)));\n\n    _this.onMapboxStyleLoad = function (map) {\n      _this.map = map; // add Zoom Control\n\n      map.addControl(new MapboxGl.NavigationControl(), 'bottom-right'); // add Geolocation Control\n\n      _this.addGeoLocateControl(map);\n\n      map.on('click', _this.onMapClick); // update the map page center on map move\n\n      map.on('dragend', function () {\n        _this.props.setCenter(map.getCenter());\n      }); // disable map rotation using right click + drag\n\n      map.dragRotate.disable(); // disable map rotation using touch rotation gesture\n\n      map.touchZoomRotate.disableRotation();\n\n      _this.props.setMapLoaded();\n    };\n\n    _this.onMapClick = function (e) {\n      var map = _this.map;\n      var _this$props = _this.props,\n          showOpen = _this$props.showOpen,\n          showClosed = _this$props.showClosed,\n          showCaution = _this$props.showCaution,\n          showLongterm = _this$props.showLongterm,\n          showCameras = _this$props.showCameras;\n      var width = 10;\n      var height = 10;\n      var layersToQuery = [];\n      if (showOpen) layersToQuery.push('openCrossings');\n      if (showClosed) layersToQuery.push('closedCrossings');\n      if (showCaution) layersToQuery.push('cautionCrossings');\n      if (showLongterm) layersToQuery.push('longtermCrossings');\n      if (showCameras) layersToQuery.push('allCameras');\n      var features = map.queryRenderedFeatures([[e.point.x - width / 2, e.point.y - height / 2], [e.point.x + width / 2, e.point.y + height / 2]], {\n        layers: layersToQuery\n      });\n      var feature = features && features[0];\n\n      if (feature) {\n        // Handle Camera Clicks\n        if (feature.layer.id === 'allCameras') {\n          _this.props.history.push(\"\".concat(_this.props.onDash ? '/dashboard' : '', \"/map/camera/\").concat(features[0].properties.cameraId)); // Handle Crossing Clicks\n\n        } else if (feature.properties.crossingId) {\n          _this.props.history.push(\"\".concat(_this.props.onDash ? '/dashboard' : '', \"/map/crossing/\").concat(features[0].properties.crossingId)); // Handle Misc Location Clicks\n\n        }\n      } else if (_this.props.selectedFeature) {\n        if (_this.props.selectedFeature.type === \"Crossing\" || _this.props.selectedFeature.type === \"Camera\" || _this.props.selectedFeature.type === \"Community\" // Don't make redundant history push for 'Misc' type\n        ) {\n            _this.props.history.push(\"\".concat(_this.props.onDash ? '/dashboard' : '', \"/map/\"));\n          } else if (_this.props.selectedFeature.type === 'Misc') {\n          _this.props.setSelectedFeature(null);\n        }\n      }\n    };\n\n    _this.onZoom = function (map) {\n      var iconSize = map.getZoom() < 11 ? 'mini' : 'small';\n\n      if (iconSize !== _this.state.iconSize) {\n        _this.setState({\n          iconSize: iconSize\n        });\n      }\n    };\n\n    _this.resizeMap = function () {\n      if (_this.map) {\n        _this.map.resize();\n      }\n    };\n\n    _this.setDetailsHeight = function (crossingId, statusReasonId, reopenDate, indefiniteClosure, notes) {\n      // Let's hack this together so it makes some kinda sense\n      // and we can figure out how much to offset the map\n      // for the details popup\n      var cachedHeights = _this.state.cachedHeights;\n      var map = _this.map; // First, let's get the size of the map in pixels\n\n      var mapHeightInPixels = map.getContainer().offsetHeight; // Then, let's get the size on the popup in pixels\n\n      var popupHeightInPixels; // STUPID HACK - guess the height using crossing data\n\n      if (cachedHeights[crossingId]) {\n        popupHeightInPixels = cachedHeights[crossingId];\n      } else {\n        popupHeightInPixels = 40;\n        if (statusReasonId) popupHeightInPixels += 40;\n        if (reopenDate || indefiniteClosure) popupHeightInPixels += 40; // STUPID HACK CONT. - we use about 20 chars per line\n\n        if (notes) popupHeightInPixels += (Math.floor(notes.length / 20) - 1) * 20; // STUPID HACK CONT. - cache the heights because our\n        // componentDidUpdate logic in SelectedCrossingContainer\n        // is having issues when we've already clicked a crossing\n\n        cachedHeights[crossingId] = popupHeightInPixels;\n\n        _this.setState({\n          cachedHeights: cachedHeights\n        });\n      } // Now let's get the ratio of popup height to map height\n\n\n      var relativePopupSize = popupHeightInPixels / mapHeightInPixels; // Then we need to get the size of the map in latitude\n\n      var mapHeightInLat = map.getBounds().getNorth() - map.getBounds().getSouth(); // Now we need to calculate our offset using the ratio and the\n      // height of the map in lat\n\n      var offset = mapHeightInLat * relativePopupSize / 2;\n\n      _this.props.setCenter({\n        lng: _this.props.selectedFeature.data.coordinates[0],\n        lat: _this.props.selectedFeature.data.coordinates[1] + offset\n      });\n    };\n\n    _this.setShowDetailsOnMobile = function () {\n      _this.setState({\n        showDetailsOnMobile: true\n      });\n\n      var _this$state = _this.state,\n          cachedHeights = _this$state.cachedHeights,\n          selectedCrossingId = _this$state.selectedCrossingId;\n      if (cachedHeights[selectedCrossingId]) _this.setDetailsHeight(selectedCrossingId);\n    };\n\n    _this.state = {\n      showDetailsOnMobile: false,\n      cachedHeights: {}\n    };\n    props.registerMapResizeCallback(_this.resizeMap);\n    return _this;\n  }\n\n  _createClass(CrossingMap, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // Unset showDetailsOnMobile\n      if (this.state.showDetailsOnMobile && this.props.selectedFeature !== prevProps.selectedFeature) {\n        this.setState({\n          showDetailsOnMobile: false\n        });\n      }\n    }\n  }, {\n    key: \"addGeoLocateControl\",\n    value: function addGeoLocateControl(map) {\n      var geolocateControl = new MapboxGl.GeolocateControl({\n        positionOptions: {\n          enableHighAccuracy: true\n        },\n        fitBoundsOptions: {\n          maxZoom: 10\n        },\n        showUserLocation: true\n      });\n      map.addControl(geolocateControl, 'bottom-right'); // New versions of mapboxgl-js will have a trigger function instead\n      // https://github.com/mapbox/mapbox-gl-js/issues/5464\n\n      if (this.props.autoGeoLocate) {\n        if (geolocateControl.trigger) {\n          geolocateControl.trigger();\n        } else {\n          setTimeout(function () {\n            return geolocateControl._onClickGeolocate();\n          }, 5);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          showOpen = _this$props2.showOpen,\n          showClosed = _this$props2.showClosed,\n          showCaution = _this$props2.showCaution,\n          showLongterm = _this$props2.showLongterm,\n          openCrossings = _this$props2.openCrossings,\n          closedCrossings = _this$props2.closedCrossings,\n          cautionCrossings = _this$props2.cautionCrossings,\n          longtermCrossings = _this$props2.longtermCrossings,\n          showCameras = _this$props2.showCameras,\n          allCameras = _this$props2.allCameras,\n          center = _this$props2.center,\n          onDash = _this$props2.onDash,\n          selectedFeature = _this$props2.selectedFeature; // mapbox expressions can't compare null values\n\n      var selectedCrossingId = -1;\n      var selectedCameraId = -1;\n\n      if (selectedFeature) {\n        if (selectedFeature.type === \"Crossing\") {\n          selectedCrossingId = selectedFeature.data.id;\n        } else if (selectedFeature.type === \"Camera\") {\n          selectedCameraId = selectedFeature.data.id;\n        }\n      }\n\n      var crossingSettings = [{\n        condition: showOpen,\n        layerId: \"openCrossings\",\n        iconImage: \"marker-open-\".concat(this.state.iconSize),\n        crossings: openCrossings\n      }, {\n        condition: showClosed,\n        layerId: \"closedCrossings\",\n        iconImage: \"marker-closed-\".concat(this.state.iconSize),\n        crossings: closedCrossings\n      }, {\n        condition: showCaution,\n        layerId: \"cautionCrossings\",\n        iconImage: \"marker-caution-\".concat(this.state.iconSize),\n        crossings: cautionCrossings\n      }, {\n        condition: showLongterm,\n        layerId: \"longtermCrossings\",\n        iconImage: \"marker-long-term-\".concat(this.state.iconSize),\n        crossings: longtermCrossings\n      }];\n      return React.createElement(Map, {\n        onStyleLoad: this.onMapboxStyleLoad // eslint-disable-next-line\n        ,\n        style: MAPBOX_STYLE,\n        containerStyle: {\n          height: this.props.mapHeight,\n          width: this.props.mapWidth,\n          display: 'block'\n        },\n        fitBounds: this.props.viewport,\n        center: center,\n        onZoom: this.onZoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, crossingSettings.map(function (settings) {\n        return settings.condition && React.createElement(Layer, {\n          type: \"symbol\",\n          key: settings.layerId,\n          id: settings.layerId,\n          layout: {\n            'icon-image': settings.iconImage,\n            'icon-allow-overlap': true\n          },\n          filter: ['!=', 'crossingId', selectedCrossingId],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275\n          },\n          __self: this\n        }, settings.crossings && settings.crossings.map(function (crossing, i) {\n          return React.createElement(Feature, {\n            key: i,\n            coordinates: JSON.parse(crossing.geojson).coordinates,\n            properties: {\n              latestStatusId: crossing.latestStatusId,\n              crossingId: crossing.id,\n              geojson: crossing.geojson,\n              latestStatusCreatedAt: crossing.latestStatusCreatedAt,\n              crossingName: crossing.name,\n              communityIds: crossing.communityIds\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 287\n            },\n            __self: this\n          });\n        }));\n      }), showCameras && React.createElement(Layer, {\n        type: \"symbol\",\n        id: \"allCameras\",\n        layout: {\n          'icon-image': \"camera-\".concat(this.state.iconSize),\n          'icon-allow-overlap': true\n        },\n        filter: ['!=', 'cameraId', selectedCameraId],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, allCameras && allCameras.map(function (camera, i) {\n        return React.createElement(Feature, {\n          key: i,\n          coordinates: JSON.parse(camera.geojson).coordinates,\n          properties: {\n            cameraId: camera.id,\n            geojson: camera.geojson,\n            cameraName: camera.name\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 317\n          },\n          __self: this\n        });\n      })), React.createElement(SelectedFeatureContainer, {\n        selectedFeature: selectedFeature,\n        iconSize: this.state.iconSize,\n        mobile: this.props.mobile,\n        showDetailsOnMobile: this.state.showDetailsOnMobile,\n        setDetailsHeight: this.setDetailsHeight,\n        setShowDetailsOnMobile: this.setShowDetailsOnMobile,\n        onDash: onDash,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return CrossingMap;\n}(React.Component);\n\nCrossingMap.propTypes = {\n  registerMapResizeCallback: PropTypes.func.isRequired\n};\nexport default withRouter(CrossingMap);","map":{"version":3,"sources":["/Users/carlvlewis/floodsight/src/components/Shared/Map/CrossingMap.js"],"names":["React","PropTypes","MapboxGl","ReactMapboxGl","Layer","Feature","withRouter","SelectedFeatureContainer","MAPBOX_STYLE","MapboxAccessToken","Map","accessToken","attributionControl","CrossingMap","props","args","onMapboxStyleLoad","map","addControl","NavigationControl","addGeoLocateControl","on","onMapClick","setCenter","getCenter","dragRotate","disable","touchZoomRotate","disableRotation","setMapLoaded","e","showOpen","showClosed","showCaution","showLongterm","showCameras","width","height","layersToQuery","push","features","queryRenderedFeatures","point","x","y","layers","feature","layer","id","history","onDash","properties","cameraId","crossingId","selectedFeature","type","setSelectedFeature","onZoom","iconSize","getZoom","state","setState","resizeMap","resize","setDetailsHeight","statusReasonId","reopenDate","indefiniteClosure","notes","cachedHeights","mapHeightInPixels","getContainer","offsetHeight","popupHeightInPixels","Math","floor","length","relativePopupSize","mapHeightInLat","getBounds","getNorth","getSouth","offset","lng","data","coordinates","lat","setShowDetailsOnMobile","showDetailsOnMobile","selectedCrossingId","registerMapResizeCallback","prevProps","geolocateControl","GeolocateControl","positionOptions","enableHighAccuracy","fitBoundsOptions","maxZoom","showUserLocation","autoGeoLocate","trigger","setTimeout","_onClickGeolocate","openCrossings","closedCrossings","cautionCrossings","longtermCrossings","allCameras","center","selectedCameraId","crossingSettings","condition","layerId","iconImage","crossings","mapHeight","mapWidth","display","viewport","settings","crossing","i","JSON","parse","geojson","latestStatusId","latestStatusCreatedAt","crossingName","name","communityIds","camera","cameraName","mobile","Component","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as MapboxGl from 'mapbox-gl';\nimport ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\nimport { withRouter } from 'react-router';\n\nimport SelectedFeatureContainer from 'components/Shared/CrossingMapPage/SelectedFeatureContainer';\nimport { MAPBOX_STYLE, MapboxAccessToken } from 'constants/MapboxConstants';\nimport 'components/Shared/Map/CrossingMap.css';\n\nconst Map = ReactMapboxGl({\n  accessToken: MapboxAccessToken,\n  attributionControl: false,\n});\n\nclass CrossingMap extends React.Component {\n  static propTypes = {\n    registerMapResizeCallback: PropTypes.func.isRequired,\n  };\n\n  constructor(props, ...args) {\n    super(props, ...args);\n\n    this.state = {\n      showDetailsOnMobile: false,\n      cachedHeights: {},\n    };\n\n    props.registerMapResizeCallback(this.resizeMap);\n  }\n\n  componentDidUpdate(prevProps) {\n    // Unset showDetailsOnMobile\n    if (this.state.showDetailsOnMobile && (\n      this.props.selectedFeature !== prevProps.selectedFeature\n    )) {\n      this.setState({showDetailsOnMobile: false});\n    }\n  }\n\n  onMapboxStyleLoad = map => {\n    this.map = map;\n\n    // add Zoom Control\n    map.addControl(new MapboxGl.NavigationControl(), 'bottom-right');\n\n    // add Geolocation Control\n    this.addGeoLocateControl(map);\n\n    map.on('click', this.onMapClick);\n\n    // update the map page center on map move\n    map.on('dragend', ()=>{\n      this.props.setCenter(map.getCenter());\n    });\n\n    // disable map rotation using right click + drag\n    map.dragRotate.disable();\n\n    // disable map rotation using touch rotation gesture\n    map.touchZoomRotate.disableRotation();\n\n    this.props.setMapLoaded();\n  };\n\n  addGeoLocateControl(map) {\n    const geolocateControl = new MapboxGl.GeolocateControl({\n      positionOptions: {\n        enableHighAccuracy: true,\n      },\n      fitBoundsOptions: {\n        maxZoom: 10,\n      },\n      showUserLocation: true,\n    });\n\n    map.addControl(geolocateControl, 'bottom-right');\n\n    // New versions of mapboxgl-js will have a trigger function instead\n    // https://github.com/mapbox/mapbox-gl-js/issues/5464\n    if (this.props.autoGeoLocate) {\n      if (geolocateControl.trigger) {\n        geolocateControl.trigger();\n      } else {\n        setTimeout(() => geolocateControl._onClickGeolocate(), 5);\n      }\n    }\n  }\n\n  onMapClick = e => {\n    const map = this.map;\n    const { showOpen, showClosed, showCaution, showLongterm, showCameras } = this.props;\n\n    const width = 10;\n    const height = 10;\n    let layersToQuery = [];\n    if (showOpen) layersToQuery.push('openCrossings');\n    if (showClosed) layersToQuery.push('closedCrossings');\n    if (showCaution) layersToQuery.push('cautionCrossings');\n    if (showLongterm) layersToQuery.push('longtermCrossings');\n    if (showCameras) layersToQuery.push('allCameras');\n\n    const features = map.queryRenderedFeatures(\n      [\n        [e.point.x - width / 2, e.point.y - height / 2],\n        [e.point.x + width / 2, e.point.y + height / 2],\n      ],\n      { layers: layersToQuery },\n    );\n\n    const feature = features && features[0];\n    if (feature) {\n      // Handle Camera Clicks\n      if (feature.layer.id === 'allCameras') {\n        this.props.history.push(`${this.props.onDash ? '/dashboard' : ''}/map/camera/${features[0].properties.cameraId}`);\n      // Handle Crossing Clicks\n      } else if (feature.properties.crossingId) {\n        this.props.history.push(`${this.props.onDash ? '/dashboard' : ''}/map/crossing/${features[0].properties.crossingId}`);\n      // Handle Misc Location Clicks\n      }\n    } else if (this.props.selectedFeature) {\n      if (\n        this.props.selectedFeature.type === \"Crossing\" ||\n        this.props.selectedFeature.type === \"Camera\" ||\n        this.props.selectedFeature.type === \"Community\"\n        // Don't make redundant history push for 'Misc' type\n      ) {\n        this.props.history.push(`${this.props.onDash ? '/dashboard' : ''}/map/`)\n      } else if (this.props.selectedFeature.type === 'Misc') {\n        this.props.setSelectedFeature(null);\n      }\n    }\n  };\n\n  onZoom = map => {\n    const iconSize = map.getZoom() < 11 ? 'mini' : 'small';\n    if (iconSize !== this.state.iconSize) {\n      this.setState({ iconSize });\n    }\n  };\n\n  resizeMap = () => {\n    if (this.map) {\n      this.map.resize();\n    }\n  };\n\n  setDetailsHeight = (crossingId, statusReasonId, reopenDate, indefiniteClosure, notes) => {\n    // Let's hack this together so it makes some kinda sense\n    // and we can figure out how much to offset the map\n    // for the details popup\n    const { cachedHeights } = this.state;\n    const map = this.map;\n\n    // First, let's get the size of the map in pixels\n    const mapHeightInPixels = map.getContainer().offsetHeight;\n\n    // Then, let's get the size on the popup in pixels\n    let popupHeightInPixels;\n\n    // STUPID HACK - guess the height using crossing data\n    if (cachedHeights[crossingId]) {\n      popupHeightInPixels = cachedHeights[crossingId];\n    } else {\n      popupHeightInPixels = 40;\n      if (statusReasonId) popupHeightInPixels += 40;\n      if (reopenDate || indefiniteClosure) popupHeightInPixels += 40;\n\n      // STUPID HACK CONT. - we use about 20 chars per line\n      if (notes)\n        popupHeightInPixels += (Math.floor(notes.length / 20) - 1) * 20;\n\n      // STUPID HACK CONT. - cache the heights because our\n      // componentDidUpdate logic in SelectedCrossingContainer\n      // is having issues when we've already clicked a crossing\n      cachedHeights[crossingId] = popupHeightInPixels;\n      this.setState({ cachedHeights: cachedHeights });\n    }\n\n    // Now let's get the ratio of popup height to map height\n    const relativePopupSize = popupHeightInPixels / mapHeightInPixels;\n\n    // Then we need to get the size of the map in latitude\n    const mapHeightInLat =\n      map.getBounds().getNorth() - map.getBounds().getSouth();\n\n    // Now we need to calculate our offset using the ratio and the\n    // height of the map in lat\n    const offset = mapHeightInLat * relativePopupSize / 2;\n\n    this.props.setCenter({\n      lng: this.props.selectedFeature.data.coordinates[0],\n      lat: this.props.selectedFeature.data.coordinates[1] + offset,\n    })\n  };\n\n  setShowDetailsOnMobile = () => {\n    this.setState({ showDetailsOnMobile: true });\n\n    const { cachedHeights, selectedCrossingId } = this.state;\n\n    if (cachedHeights[selectedCrossingId])\n      this.setDetailsHeight(selectedCrossingId);\n  };\n\n  render() {\n    const {\n      showOpen,\n      showClosed,\n      showCaution,\n      showLongterm,\n      openCrossings,\n      closedCrossings,\n      cautionCrossings,\n      longtermCrossings,\n      showCameras,\n      allCameras,\n      center,\n      onDash,\n      selectedFeature,\n    } = this.props;\n\n    // mapbox expressions can't compare null values\n    let selectedCrossingId = -1;\n    let selectedCameraId = -1;\n\n    if (selectedFeature) {\n      if (selectedFeature.type === \"Crossing\") {\n        selectedCrossingId = selectedFeature.data.id;\n      } else if (selectedFeature.type === \"Camera\") {\n        selectedCameraId = selectedFeature.data.id;\n      }\n    }\n\n    const crossingSettings = [\n      {\n        condition: showOpen,\n        layerId: \"openCrossings\",\n        iconImage: `marker-open-${this.state.iconSize}`,\n        crossings: openCrossings,\n      }, {\n        condition: showClosed,\n        layerId: \"closedCrossings\",\n        iconImage: `marker-closed-${this.state.iconSize}`,\n        crossings: closedCrossings,\n      }, {\n        condition: showCaution,\n        layerId: \"cautionCrossings\",\n        iconImage: `marker-caution-${this.state.iconSize}`,\n        crossings: cautionCrossings,\n      }, {\n        condition: showLongterm,\n        layerId: \"longtermCrossings\",\n        iconImage: `marker-long-term-${this.state.iconSize}`,\n        crossings: longtermCrossings\n      }\n    ]\n\n    return (\n      <Map\n        onStyleLoad={this.onMapboxStyleLoad}\n        // eslint-disable-next-line\n        style={MAPBOX_STYLE}\n        containerStyle={{\n          height: this.props.mapHeight,\n          width: this.props.mapWidth,\n          display: 'block',\n        }}\n        fitBounds={this.props.viewport}\n        center={center}\n        onZoom={this.onZoom}\n      >\n        {crossingSettings.map(settings=>{\n          return settings.condition && (\n            <Layer\n              type=\"symbol\"\n              key={settings.layerId}\n              id={settings.layerId}\n              layout={{\n                'icon-image': settings.iconImage,\n                'icon-allow-overlap': true,\n              }}\n              filter={['!=', 'crossingId', selectedCrossingId]}\n            >\n              {settings.crossings && settings.crossings.map((crossing, i) => {\n                return (\n                  <Feature\n                    key={i}\n                    coordinates={JSON.parse(crossing.geojson).coordinates}\n                    properties={{\n                      latestStatusId: crossing.latestStatusId,\n                      crossingId: crossing.id,\n                      geojson: crossing.geojson,\n                      latestStatusCreatedAt: crossing.latestStatusCreatedAt,\n                      crossingName: crossing.name,\n                      communityIds: crossing.communityIds,\n                    }}\n                  />\n                );\n              })}\n            </Layer>\n          )\n        })}\n        {showCameras && (\n          <Layer\n            type=\"symbol\"\n            id=\"allCameras\"\n            layout={{\n              'icon-image': `camera-${this.state.iconSize}`,\n              'icon-allow-overlap': true,\n            }}\n            filter={['!=', 'cameraId', selectedCameraId]}\n          >\n            {allCameras &&\n              allCameras.map((camera, i) => {\n                return (\n                  <Feature\n                    key={i}\n                    coordinates={JSON.parse(camera.geojson).coordinates}\n                    properties={{\n                      cameraId: camera.id,\n                      geojson: camera.geojson,\n                      cameraName: camera.name,\n                    }}\n                  />\n                );\n              })}\n          </Layer>\n        )}\n        <SelectedFeatureContainer\n          selectedFeature={selectedFeature}\n          iconSize={this.state.iconSize}\n          mobile={this.props.mobile}\n          showDetailsOnMobile={this.state.showDetailsOnMobile}\n          setDetailsHeight={this.setDetailsHeight}\n          setShowDetailsOnMobile={this.setShowDetailsOnMobile}\n          onDash={onDash}\n        />\n      </Map>\n    );\n  }\n}\n\nexport default withRouter(CrossingMap);\n"]},"metadata":{},"sourceType":"module"}