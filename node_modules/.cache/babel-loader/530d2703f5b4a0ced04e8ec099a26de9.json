{"ast":null,"code":"function Coords() {}\n\nCoords.prototype.init = function () {\n  if (!arguments.length) {\n    throw new Error('no arguments');\n  } else if (arguments[0].lat && arguments[0].lng) {\n    this.lat = arguments[0].lat;\n    this.lon = arguments[0].lng;\n  } else if (typeof arguments[0] === \"string\") {\n    var strarr = arguments[0].split(\",\");\n    this.lat = parseFloat(strarr[0].trim());\n    this.lon = parseFloat(strarr[1].trim());\n  } else if (Object.prototype.toString.call(arguments[0]) === \"[object Array]\") {\n    var arr = arguments[0];\n\n    if (arguments[1] === true) {\n      this.lat = arr[1];\n      this.lon = arr[0];\n    } else {\n      this.lat = arr[0];\n      this.lon = arr[1];\n    }\n  } else if (arguments[2] === true) {\n    this.lat = arguments[1];\n    this.lon = arguments[0];\n  } else {\n    this.lat = arguments[0];\n    this.lon = arguments[1];\n  }\n\n  this.compute();\n};\n\nCoords.prototype.compute = function () {\n  this.north = this.lat > 0;\n  this.east = this.lon > 0;\n  this.latValues = computeFor(this.lat);\n  this.lonValues = computeFor(this.lon);\n\n  function computeFor(initValue) {\n    var values = {};\n    values.initValue = initValue;\n    values.degrees = Math.abs(initValue);\n    values.degreesInt = Math.floor(values.degrees);\n    values.degreesFrac = values.degrees - values.degreesInt;\n    values.secondsTotal = 3600 * values.degreesFrac;\n    values.minutes = values.secondsTotal / 60;\n    values.minutesInt = Math.floor(values.minutes);\n    values.seconds = values.secondsTotal - values.minutesInt * 60;\n    return values;\n  }\n};\n\nvar shortFormats = {\n  'FFf': 'DD MM ss X',\n  'Ff': 'DD mm X',\n  'f': 'dd X'\n};\nvar units = {\n  degrees: '°',\n  minutes: '′',\n  seconds: '″'\n};\n\nCoords.prototype.format = function (format, options) {\n  if (typeof format === 'object') {\n    var submittedFormat = format;\n    options = format;\n    format = 'FFf';\n  }\n\n  if (typeof format === 'undefined') {\n    format = 'FFf';\n  }\n\n  if (typeof options === 'undefined') {\n    options = {};\n  }\n\n  if (typeof options === 'string') {\n    var submittedString = options;\n    options = {\n      latLonSeparator: submittedString\n    };\n  }\n\n  if (typeof options.latLonSeparator === 'undefined') {\n    options.latLonSeparator = ' ';\n  }\n\n  if (typeof options.decimalPlaces === 'undefined') {\n    options.decimalPlaces = 5;\n  } else {\n    options.decimalPlaces = parseInt(options.decimalPlaces);\n  }\n\n  if (Object.keys(shortFormats).indexOf(format) > -1) {\n    format = shortFormats[format];\n  }\n\n  var lat = formatFor(this.latValues, this.north ? 'N' : 'S');\n  var lon = formatFor(this.lonValues, this.east ? 'E' : 'W');\n\n  function formatFor(values, X) {\n    var formatted = format;\n    formatted = formatted.replace(/DD/g, values.degreesInt + units.degrees);\n    formatted = formatted.replace(/dd/g, values.degrees.toFixed(options.decimalPlaces) + units.degrees);\n    formatted = formatted.replace(/D/g, values.degreesInt);\n    formatted = formatted.replace(/d/g, values.degrees.toFixed(options.decimalPlaces));\n    formatted = formatted.replace(/MM/g, values.minutesInt + units.minutes);\n    formatted = formatted.replace(/mm/g, values.minutes.toFixed(options.decimalPlaces) + units.minutes);\n    formatted = formatted.replace(/M/g, values.minutesInt);\n    formatted = formatted.replace(/m/g, values.minutes.toFixed(options.decimalPlaces));\n    formatted = formatted.replace(/ss/g, values.seconds.toFixed(options.decimalPlaces) + units.seconds);\n    formatted = formatted.replace(/s/g, values.seconds.toFixed(options.decimalPlaces));\n    formatted = formatted.replace(/-/g, values.initValue < 0 ? '-' : '');\n    formatted = formatted.replace(/X/g, X);\n    return formatted;\n  }\n\n  return lat + options.latLonSeparator + lon;\n};\n\nfunction formatcoords() {\n  var c = new Coords();\n  c.init.apply(c, arguments);\n  return c;\n}\n\nmodule.exports = formatcoords;","map":null,"metadata":{},"sourceType":"script"}