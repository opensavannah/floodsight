{"ast":null,"code":"var crypto = require('crypto');\n\nvar self = module.exports; // Generates a random number\n\nvar randomNumber = function randomNumber(max) {\n  // gives a number between 0 (inclusive) and max (exclusive)\n  var rand = crypto.randomBytes(1)[0];\n\n  while (rand >= 256 - 256 % max) {\n    rand = crypto.randomBytes(1)[0];\n  }\n\n  return rand % max;\n}; // Possible combinations\n\n\nvar lowercase = 'abcdefghijklmnopqrstuvwxyz',\n    uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n    numbers = '0123456789',\n    symbols = '!@#$%^&*()+_-=}{[]|:;\"/?.><,`~',\n    similarCharacters = /[ilLI|`oO0]/g,\n    strictRules = [{\n  name: 'lowercase',\n  rule: /[a-z]/\n}, {\n  name: 'uppercase',\n  rule: /[A-Z]/\n}, {\n  name: 'numbers',\n  rule: /[0-9]/\n}, {\n  name: 'symbols',\n  rule: /[!@#$%^&*()+_\\-=}{[\\]|:;\"/?.><,`~]/\n}];\n\nvar generate = function generate(options, pool) {\n  var password = '',\n      optionsLength = options.length,\n      poolLength = pool.length;\n\n  for (var i = 0; i < optionsLength; i++) {\n    password += pool[randomNumber(poolLength)];\n  }\n\n  if (options.strict) {\n    // Iterate over each rule, checking to see if the password works.\n    var fitsRules = strictRules.reduce(function (result, rule) {\n      // Skip checking the rule if we know it doesn't match.\n      if (result == false) return false; // If the option is not checked, ignore it.\n\n      if (options[rule.name] == false) return result; // Run the regex on the password and return whether\n      // or not it matches.\n\n      return rule.rule.test(password);\n    }, true); // If it doesn't fit the rules, generate a new one (recursion).\n\n    if (!fitsRules) return generate(options, pool);\n  }\n\n  return password;\n}; // Generate a random password.\n\n\nself.generate = function (options) {\n  // Set defaults.\n  options = options || {};\n  if (!options.hasOwnProperty('length')) options.length = 10;\n  if (!options.hasOwnProperty('numbers')) options.numbers = false;\n  if (!options.hasOwnProperty('symbols')) options.symbols = false;\n  if (!options.hasOwnProperty('exclude')) options.exclude = '';\n  if (!options.hasOwnProperty('uppercase')) options.uppercase = true;\n  if (!options.hasOwnProperty('excludeSimilarCharacters')) options.excludeSimilarCharacters = false;\n  if (!options.hasOwnProperty('strict')) options.strict = false;\n\n  if (options.strict) {\n    var minStrictLength = 1 + (options.numbers ? 1 : 0) + (options.symbols ? 1 : 0) + (options.uppercase ? 1 : 0);\n\n    if (minStrictLength > options.length) {\n      throw new TypeError('Length must correlate with strict guidelines');\n    }\n  } // Generate character pool\n\n\n  var pool = lowercase; // uppercase\n\n  if (options.uppercase) {\n    pool += uppercase;\n  } // numbers\n\n\n  if (options.numbers) {\n    pool += numbers;\n  } // symbols\n\n\n  if (options.symbols) {\n    pool += symbols;\n  } // similar characters\n\n\n  if (options.excludeSimilarCharacters) {\n    pool = pool.replace(similarCharacters, '');\n  } // excludes characters from the pool\n\n\n  var i = options.exclude.length;\n\n  while (i--) {\n    pool = pool.replace(options.exclude[i], '');\n  }\n\n  var password = generate(options, pool);\n  return password;\n}; // Generates multiple passwords at once with the same options.\n\n\nself.generateMultiple = function (amount, options) {\n  var passwords = [];\n\n  for (var i = 0; i < amount; i++) {\n    passwords[i] = self.generate(options);\n  }\n\n  return passwords;\n};","map":null,"metadata":{},"sourceType":"script"}