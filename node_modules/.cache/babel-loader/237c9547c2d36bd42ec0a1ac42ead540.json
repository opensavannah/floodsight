{"ast":null,"code":"import _classCallCheck from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/carlvlewis/floodsight/src/components/Shared/CrossingMapPage/CrossingMapSearchBar.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport FontAwesome from 'react-fontawesome';\nimport Autosuggest from 'react-autosuggest';\nimport { withRouter } from 'react-router';\nimport { logError } from 'services/logger';\nimport CrossingMapSearchCrossingSuggestions from 'components/Shared/CrossingMapPage/CrossingMapSearchCrossingSuggestions';\nimport 'components/Shared/CrossingMapPage/CrossingMapSearchBar.css';\nimport { statusNames, statusIcons } from 'constants/StatusConstants';\nvar HERE_APP_ID = \"NwvYKNdIJp8nYo74bUTU\";\nvar HERE_APP_CODE = \"VHZxGy1nmghs2BCbo0cVCQ\"; // When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\n\nvar getSuggestionValue = function getSuggestionValue(suggestion) {\n  return suggestion.place_name || suggestion.name;\n}; // Use your imagination to render suggestions.\n\n\nvar Suggestion = function Suggestion(suggestion) {\n  return React.createElement(\"div\", {\n    className: \"CrossingMapSearchBar__suggestion-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"CrossingMapSearchBar__suggestion-icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, suggestion.__typename === 'Crossing' && React.createElement(\"img\", {\n    src: statusIcons[suggestion.latestStatusId],\n    alt: statusNames[suggestion.latestStatusId],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), suggestion.__typename === 'Community' && React.createElement(FontAwesome, {\n    name: \"globe\",\n    size: \"2x\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), suggestion.__typename !== 'Crossing' && suggestion.__typename !== 'Community' && React.createElement(FontAwesome, {\n    name: \"map-marker\",\n    size: \"2x\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"CrossingMapSearchBar__suggestion-text--primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, suggestion.name), React.createElement(\"div\", {\n    className: \"CrossingMapSearchBar__suggestion-text--secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, suggestion.humanAddress, suggestion.__typename === 'Community' && 'Community')));\n};\n\nvar formatSearchQuery = function formatSearchQuery(query) {\n  return \"%\".concat(query.replace(/ /g, '%'), \"%\");\n};\n\nvar CrossingMapSearchBar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CrossingMapSearchBar, _Component);\n\n  function CrossingMapSearchBar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CrossingMapSearchBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CrossingMapSearchBar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      typedValue: '',\n      selectedValue: '',\n      geocodeSuggestions: [],\n      crossingSuggestions: [],\n      communitySuggestions: []\n    };\n\n    _this.onChange = function (event, _ref) {\n      var newValue = _ref.newValue,\n          method = _ref.method;\n\n      if (method === 'type') {\n        _this.setState({\n          typedValue: newValue,\n          selectedValue: null\n        });\n      } else if (method === 'escape') {\n        _this.setState({\n          selectedValue: null\n        });\n      } else if (method === 'enter' || method === 'click') {\n        _this.setState({\n          selectedValue: newValue,\n          typedValue: newValue\n        });\n      } else if (method === 'down' || method === 'up') {\n        _this.setState({\n          selectedValue: newValue\n        });\n      }\n    };\n\n    _this.dashPrepend = function () {\n      return _this.props.onDash ? '/dashboard' : '';\n    };\n\n    _this.onSuggestionSelected = function (event, _ref2) {\n      var suggestion = _ref2.suggestion,\n          suggestionValue = _ref2.suggestionValue,\n          suggestionIndex = _ref2.suggestionIndex,\n          sectionIndex = _ref2.sectionIndex,\n          method = _ref2.method;\n\n      if (suggestion.__typename === 'Crossing') {\n        _this.props.history.push(\"\".concat(_this.dashPrepend(), \"/map/crossing/\").concat(suggestion.id));\n      } else if (suggestion.__typename === 'Community') {\n        _this.props.history.push(\"\".concat(_this.dashPrepend(), \"/map/community/\").concat(suggestion.id));\n      } else if (suggestion.location) {\n        var lng = suggestion.location[1];\n        var lat = suggestion.location[0];\n\n        _this.props.setSelectedFeature({\n          type: \"Misc\",\n          data: {\n            coordinates: [lng, lat],\n            name: suggestion.name\n          }\n        });\n      } // Unfocus the search bar\n\n\n      _this.autosuggestInput.blur();\n    };\n\n    _this.onSuggestionsFetchRequested = function (_ref3) {\n      var value = _ref3.value;\n      var _this$props = _this.props,\n          center = _this$props.center,\n          communityId = _this$props.communityId,\n          communities = _this$props.communities;\n      var inputLength = value.length;\n\n      if (inputLength > 2) {\n        fetch(\"https://places.api.here.com/places/v1/autosuggest?at=\".concat(center.lat, \",\").concat(center.lng, \"&q=\").concat(value, \"&app_id=\").concat(HERE_APP_ID, \"&app_code=\").concat(HERE_APP_CODE)).then(function (response) {\n          if (response.status !== 200) {\n            logError('places.api.here.com fetch Error: ' + response.status);\n\n            _this.setState({\n              geocodeSuggestions: []\n            });\n\n            return;\n          }\n\n          response.json().then(function (data) {\n            var filteredResults = data.results.filter(function (result) {\n              return result.position && result.vicinity;\n            });\n            var suggestions = filteredResults.map(function (result) {\n              return {\n                name: result.title,\n                location: result.position,\n                humanAddress: result.vicinity.replace(/<br\\/>/g, ', ')\n              };\n            });\n\n            _this.setState({\n              geocodeSuggestions: suggestions\n            });\n          });\n        }).catch(function (err) {\n          logError('places.api.here.com fetch Error', err);\n\n          _this.setState({\n            geocodeSuggestions: []\n          });\n        });\n      } else {\n        _this.setState({\n          geocodeSuggestions: []\n        });\n      } // If we aren't filtering by community, get the communities\n\n\n      if (communities && !communityId) {\n        var inputValue = value.trim().toLowerCase();\n        var communitySuggestions = communities.filter(function (c) {\n          return c.name.toLowerCase().includes(inputValue);\n        }).slice(0, 4);\n\n        _this.setState({\n          communitySuggestions: communitySuggestions\n        });\n      } else {\n        _this.setState({\n          communitySuggestions: []\n        });\n      }\n    };\n\n    _this.onSuggestionsClearRequested = function () {\n      _this.setState({\n        geocodeSuggestions: [],\n        communitySuggestions: []\n      });\n    };\n\n    _this.clearSearch = function () {\n      _this.setState({\n        typedValue: '',\n        selectedValue: null\n      });\n\n      _this.props.history.push(\"\".concat(_this.dashPrepend(), \"/map\"));\n    };\n\n    _this.updateCrossingSuggestions = function (suggestions) {\n      _this.setState({\n        crossingSuggestions: suggestions\n      });\n    };\n\n    _this.onInputFocus = function () {\n      _this.props.toggleSearchFocus(true);\n    };\n\n    _this.onInputBlur = function () {\n      _this.props.toggleSearchFocus(false);\n    };\n\n    return _this;\n  }\n\n  _createClass(CrossingMapSearchBar, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          cameraOrCrossingSelected = _this$props2.cameraOrCrossingSelected,\n          communityId = _this$props2.communityId;\n      var _this$state = this.state,\n          typedValue = _this$state.typedValue,\n          selectedValue = _this$state.selectedValue,\n          geocodeSuggestions = _this$state.geocodeSuggestions,\n          crossingSuggestions = _this$state.crossingSuggestions,\n          communitySuggestions = _this$state.communitySuggestions;\n      var suggestions = typedValue.length > 2 ? communitySuggestions.concat(crossingSuggestions).concat(geocodeSuggestions) : [];\n      var value = selectedValue ? selectedValue : typedValue; // Autosuggest will pass through all these props to the input.\n\n      var inputProps = {\n        placeholder: 'Search...',\n        value: value,\n        onChange: this.onChange,\n        onFocus: this.onInputFocus,\n        onBlur: this.onInputBlur,\n        type: 'search'\n      };\n      var formattedQuery = formatSearchQuery(typedValue);\n      return React.createElement(\"div\", {\n        className: \"CrossingMapSearchBar__container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(CrossingMapSearchCrossingSuggestions, {\n        searchQuery: formattedQuery,\n        communityId: communityId,\n        updateSuggestions: this.updateCrossingSuggestions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"CrossingMapSearchBar__text-entry\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, cameraOrCrossingSelected && !this.props.mobile && React.createElement(\"div\", {\n        className: \"CrossingMapSearchBar__close-selection\",\n        onClick: this.clearSearch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, React.createElement(FontAwesome, {\n        name: \"window-close\",\n        size: \"2x\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      })), (!cameraOrCrossingSelected || this.props.mobile) && React.createElement(Autosuggest, {\n        ref: function ref(autosuggest) {\n          if (autosuggest !== null) {\n            _this2.autosuggestInput = autosuggest.input;\n          }\n        },\n        suggestions: suggestions,\n        onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n        onSuggestionSelected: this.onSuggestionSelected,\n        onSuggestionHighlighted: this.onSuggestionHighlighted,\n        getSuggestionValue: getSuggestionValue,\n        renderSuggestion: Suggestion,\n        inputProps: inputProps,\n        shouldRenderSuggestions: function shouldRenderSuggestions() {\n          return true;\n        },\n        focusInputOnSuggestionClick: false,\n        highlightFirstSuggestion: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return CrossingMapSearchBar;\n}(Component);\n\nCrossingMapSearchBar.propTypes = {\n  history: PropTypes.object.isRequired\n};\nexport default withRouter(CrossingMapSearchBar);","map":{"version":3,"sources":["/Users/carlvlewis/floodsight/src/components/Shared/CrossingMapPage/CrossingMapSearchBar.js"],"names":["React","Component","PropTypes","FontAwesome","Autosuggest","withRouter","logError","CrossingMapSearchCrossingSuggestions","statusNames","statusIcons","HERE_APP_ID","HERE_APP_CODE","getSuggestionValue","suggestion","place_name","name","Suggestion","__typename","latestStatusId","humanAddress","formatSearchQuery","query","replace","CrossingMapSearchBar","state","typedValue","selectedValue","geocodeSuggestions","crossingSuggestions","communitySuggestions","onChange","event","newValue","method","setState","dashPrepend","props","onDash","onSuggestionSelected","suggestionValue","suggestionIndex","sectionIndex","history","push","id","location","lng","lat","setSelectedFeature","type","data","coordinates","autosuggestInput","blur","onSuggestionsFetchRequested","value","center","communityId","communities","inputLength","length","fetch","then","response","status","json","filteredResults","results","filter","result","position","vicinity","suggestions","map","title","catch","err","inputValue","trim","toLowerCase","c","includes","slice","onSuggestionsClearRequested","clearSearch","updateCrossingSuggestions","onInputFocus","toggleSearchFocus","onInputBlur","cameraOrCrossingSelected","concat","inputProps","placeholder","onFocus","onBlur","formattedQuery","mobile","autosuggest","input","onSuggestionHighlighted","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport FontAwesome from 'react-fontawesome';\nimport Autosuggest from 'react-autosuggest';\nimport { withRouter } from 'react-router';\n\nimport { logError } from 'services/logger';\nimport CrossingMapSearchCrossingSuggestions from 'components/Shared/CrossingMapPage/CrossingMapSearchCrossingSuggestions';\nimport 'components/Shared/CrossingMapPage/CrossingMapSearchBar.css';\nimport { statusNames, statusIcons } from 'constants/StatusConstants';\n\nconst HERE_APP_ID = `NwvYKNdIJp8nYo74bUTU`;\nconst HERE_APP_CODE = `VHZxGy1nmghs2BCbo0cVCQ`;\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => {\n  return suggestion.place_name || suggestion.name;\n};\n\n// Use your imagination to render suggestions.\nconst Suggestion = suggestion => (\n  <div className=\"CrossingMapSearchBar__suggestion-container\">\n    <div className=\"CrossingMapSearchBar__suggestion-icon\">\n      {suggestion.__typename === 'Crossing' && (\n        <img\n          src={statusIcons[suggestion.latestStatusId]}\n          alt={statusNames[suggestion.latestStatusId]}\n        />\n      )}\n      {suggestion.__typename === 'Community' && (\n        <FontAwesome name=\"globe\" size=\"2x\" />\n      )}\n      {suggestion.__typename !== 'Crossing' &&\n        suggestion.__typename !== 'Community' && (\n          <FontAwesome name=\"map-marker\" size=\"2x\" />\n        )}\n    </div>\n    <div>\n      <div className=\"CrossingMapSearchBar__suggestion-text--primary\">\n        {suggestion.name}\n      </div>\n      <div className=\"CrossingMapSearchBar__suggestion-text--secondary\">\n        {suggestion.humanAddress}\n        {suggestion.__typename === 'Community' && 'Community'}\n      </div>\n    </div>\n  </div>\n);\n\nconst formatSearchQuery = query => {\n  return `%${query.replace(/ /g, '%')}%`;\n};\n\nclass CrossingMapSearchBar extends Component {\n  static propTypes = {\n    history: PropTypes.object.isRequired,\n  };\n\n  state = {\n    typedValue: '',\n    selectedValue: '',\n    geocodeSuggestions: [],\n    crossingSuggestions: [],\n    communitySuggestions: [],\n  };\n\n  onChange = (event, { newValue, method }) => {\n    if (method === 'type') {\n      this.setState({\n        typedValue: newValue,\n        selectedValue: null,\n      });\n    } else if (method === 'escape') {\n      this.setState({\n        selectedValue: null,\n      });\n    } else if (method === 'enter' || method === 'click') {\n      this.setState({\n        selectedValue: newValue,\n        typedValue: newValue,\n      });\n    } else if (method === 'down' || method === 'up') {\n      this.setState({\n        selectedValue: newValue,\n      });\n    }\n  };\n\n  dashPrepend = () => {\n    return this.props.onDash ? '/dashboard' : '';\n  };\n\n  onSuggestionSelected = (\n    event,\n    { suggestion, suggestionValue, suggestionIndex, sectionIndex, method },\n  ) => {\n    if (suggestion.__typename === 'Crossing') {\n      this.props.history.push(\n        `${this.dashPrepend()}/map/crossing/${suggestion.id}`,\n      );\n    } else if (suggestion.__typename === 'Community') {\n      this.props.history.push(\n        `${this.dashPrepend()}/map/community/${suggestion.id}`,\n      );\n    } else if (suggestion.location) {\n      const lng = suggestion.location[1];\n      const lat = suggestion.location[0];\n      this.props.setSelectedFeature({\n        type: \"Misc\",\n        data: {\n          coordinates: [lng, lat],\n          name: suggestion.name\n        }\n      });\n    }\n\n    // Unfocus the search bar\n    this.autosuggestInput.blur();\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  onSuggestionsFetchRequested = ({ value }) => {\n    const { center, communityId, communities } = this.props;\n    const inputLength = value.length;\n\n    if (inputLength > 2) {\n      fetch(\n        `https://places.api.here.com/places/v1/autosuggest?at=${center.lat},${\n          center.lng\n        }&q=${value}&app_id=${HERE_APP_ID}&app_code=${HERE_APP_CODE}`,\n      )\n        .then(response => {\n          if (response.status !== 200) {\n            logError('places.api.here.com fetch Error: ' + response.status);\n            this.setState({ geocodeSuggestions: [] });\n            return;\n          }\n\n          response.json().then(data => {\n            const filteredResults = data.results.filter(\n              result => result.position && result.vicinity,\n            );\n            const suggestions = filteredResults.map(result => ({\n              name: result.title,\n              location: result.position,\n              humanAddress: result.vicinity.replace(/<br\\/>/g, ', '),\n            }));\n            this.setState({ geocodeSuggestions: suggestions });\n          });\n        })\n        .catch(err => {\n          logError('places.api.here.com fetch Error', err);\n          this.setState({ geocodeSuggestions: [] });\n        });\n    } else {\n      this.setState({ geocodeSuggestions: [] });\n    }\n\n    // If we aren't filtering by community, get the communities\n    if (communities && !communityId) {\n      const inputValue = value.trim().toLowerCase();\n      const communitySuggestions = communities\n        .filter(c => c.name.toLowerCase().includes(inputValue))\n        .slice(0, 4);\n      this.setState({ communitySuggestions: communitySuggestions });\n    } else {\n      this.setState({ communitySuggestions: [] });\n    }\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      geocodeSuggestions: [],\n      communitySuggestions: [],\n    });\n  };\n\n  clearSearch = () => {\n    this.setState({ typedValue: '', selectedValue: null });\n    this.props.history.push(`${this.dashPrepend()}/map`);\n  };\n\n  updateCrossingSuggestions = suggestions => {\n    this.setState({\n      crossingSuggestions: suggestions,\n    });\n  };\n\n  onInputFocus = () => {\n    this.props.toggleSearchFocus(true);\n  };\n\n  onInputBlur = () => {\n    this.props.toggleSearchFocus(false);\n  };\n\n  render() {\n    const { cameraOrCrossingSelected, communityId } = this.props;\n\n    const {\n      typedValue,\n      selectedValue,\n      geocodeSuggestions,\n      crossingSuggestions,\n      communitySuggestions,\n    } = this.state;\n\n    const suggestions =\n      typedValue.length > 2\n        ? communitySuggestions\n            .concat(crossingSuggestions)\n            .concat(geocodeSuggestions)\n        : [];\n\n    const value = selectedValue ? selectedValue : typedValue;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: 'Search...',\n      value,\n      onChange: this.onChange,\n      onFocus: this.onInputFocus,\n      onBlur: this.onInputBlur,\n      type: 'search',\n    };\n\n    const formattedQuery = formatSearchQuery(typedValue);\n\n    return (\n      <div className=\"CrossingMapSearchBar__container\">\n        <CrossingMapSearchCrossingSuggestions\n          searchQuery={formattedQuery}\n          communityId={communityId}\n          updateSuggestions={this.updateCrossingSuggestions}\n        />\n        <div className=\"CrossingMapSearchBar__text-entry\">\n          {cameraOrCrossingSelected &&\n            !this.props.mobile && (\n              <div\n                className=\"CrossingMapSearchBar__close-selection\"\n                onClick={this.clearSearch}\n              >\n                <FontAwesome name=\"window-close\" size=\"2x\" />\n              </div>\n            )}\n          {(!cameraOrCrossingSelected || this.props.mobile) && (\n            <Autosuggest\n              ref={autosuggest => {\n                if (autosuggest !== null) {\n                  this.autosuggestInput = autosuggest.input;\n                }\n              }}\n              suggestions={suggestions}\n              onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n              onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n              onSuggestionSelected={this.onSuggestionSelected}\n              onSuggestionHighlighted={this.onSuggestionHighlighted}\n              getSuggestionValue={getSuggestionValue}\n              renderSuggestion={Suggestion}\n              inputProps={inputProps}\n              shouldRenderSuggestions={() => true}\n              focusInputOnSuggestionClick={false}\n              highlightFirstSuggestion={true}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(CrossingMapSearchBar);\n"]},"metadata":{},"sourceType":"module"}