{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/carlvlewis/floodsight/src/components/Dashboard/ManageUsersPage/AddUserPage.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation(\\n    $firstName: String!\\n    $lastName: String!\\n    $jobTitle: String!\\n    $phoneNumber: String!\\n    $email: String!\\n    $password: String!\\n    $role: String!\\n    $communityName: String!\\n  ) {\\n    registerUserWithNewCommunity(\\n      input: {\\n        firstName: $firstName\\n        lastName: $lastName\\n        jobTitle: $jobTitle\\n        phoneNumber: $phoneNumber\\n        email: $email\\n        password: $password\\n        role: $role\\n        communityName: $communityName\\n      }\\n    ) {\\n      user {\\n        id\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation(\\n    $firstName: String!\\n    $lastName: String!\\n    $jobTitle: String!\\n    $communityId: Int!\\n    $phoneNumber: String!\\n    $email: String!\\n    $password: String!\\n    $role: String!\\n  ) {\\n    registerUser(\\n      input: {\\n        firstName: $firstName\\n        lastName: $lastName\\n        jobTitle: $jobTitle\\n        communityId: $communityId\\n        phoneNumber: $phoneNumber\\n        email: $email\\n        password: $password\\n        role: $role\\n      }\\n    ) {\\n      user {\\n        id\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport gql from 'graphql-tag';\nimport { graphql, compose } from 'react-apollo';\nimport generator from 'generate-password';\nimport { logError } from 'services/logger';\nimport EditUser from 'components/Dashboard/ManageUsersPage/EditUser';\nimport ActivateUserModal from 'components/Dashboard/ManageUsersPage/ActivateUserModal';\nimport 'components/Dashboard/ManageUsersPage/AddUserPage.css';\n\nvar AddUserPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddUserPage, _Component);\n\n  function AddUserPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AddUserPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AddUserPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      redirect: false,\n      showModal: false,\n      userAdded: false,\n      emailSent: false,\n      errorMessage: null\n    };\n\n    _this.addUserFactory = function (withNewCommunity) {\n      return function (params) {\n        _this.setState({\n          showModal: true,\n          errorMessage: null\n        });\n\n        var password = generator.generate({\n          length: 30,\n          numbers: true,\n          symbols: true,\n          strict: true\n        });\n        var mutation,\n            variables = {\n          email: params.email,\n          firstName: params.firstName,\n          lastName: params.lastName,\n          role: params.role,\n          jobTitle: params.jobTitle,\n          phoneNumber: params.phoneNumber,\n          password: password\n        };\n\n        if (withNewCommunity) {\n          mutation = _this.props.addUserWithNewCommunityMutation;\n          variables.communityName = params.communityName;\n        } else {\n          mutation = _this.props.addUserMutation;\n          variables.communityId = Number(params.communityId);\n        }\n\n        mutation({\n          variables: variables,\n          refetchQueries: ['searchUsers', 'allCommunities']\n        }).then(function (_ref) {\n          var data = _ref.data;\n\n          _this.setState({\n            userAdded: true\n          });\n\n          _this.sendEmail(params);\n        }).catch(function (err) {\n          logError(err);\n          var errMessage = err.message;\n\n          if (err.message === \"GraphQL error: duplicate key value violates unique constraint \\\"user_account_email_key\\\"\") {\n            errMessage = \"An account with that email address already exists.\";\n          } else if (err.message === \"GraphQL error: new row for relation \\\"user_account\\\" violates check constraint \\\"user_account_email_check\\\"\") {\n            errMessage = \"The email address entered is invalid. Please update with a valid email address to continue.\";\n          }\n\n          _this.setState({\n            errorMessage: errMessage\n          });\n        });\n      };\n    };\n\n    _this.addUser = _this.addUserFactory(false);\n    _this.addUserWithNewCommunity = _this.addUserFactory(true);\n\n    _this.sendEmail = function (user) {\n      fetch(\"\".concat(process.env.REACT_APP_BACKEND_URL, \"/email/reset\"), {\n        method: 'POST',\n        body: JSON.stringify({\n          email: user.email,\n          newUser: true\n        }),\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }).then(function (res) {\n        if (res.status === 204) {\n          _this.setState({\n            emailSent: true\n          });\n        } else if (res.status === 400 || res.status === 500) {\n          logError(res.errorMessage);\n\n          _this.setState({\n            emailSent: false,\n            errorMessage: 'Email failed to send'\n          });\n        }\n      }).catch(function (err) {\n        logError(err);\n\n        _this.setState({\n          emailSent: false,\n          errorMessage: err.message\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(AddUserPage, [{\n    key: \"componentDidCatch\",\n    value: function componentDidCatch(err) {\n      logError(err);\n      this.setState({\n        errorMessage: err.message\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var currentUser = this.props.currentUser;\n      var _this$state = this.state,\n          showModal = _this$state.showModal,\n          userAdded = _this$state.userAdded,\n          emailSent = _this$state.emailSent,\n          errorMessage = _this$state.errorMessage;\n      var redirect = this.state.redirect || userAdded && emailSent && !showModal;\n\n      if (redirect) {\n        return React.createElement(Redirect, {\n          push: true,\n          to: {\n            pathname: '/dashboard/users',\n            state: {\n              referrer: this.props.location\n            }\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"AddUser\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, showModal && React.createElement(ActivateUserModal, {\n        onClose: function onClose() {\n          return _this2.setState({\n            showModal: false\n          });\n        },\n        userIsNew: true,\n        userActivated: userAdded,\n        emailSent: emailSent,\n        errorMessage: errorMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Add New User\"), React.createElement(EditUser, {\n        onCancel: function onCancel() {\n          return _this2.setState({\n            redirect: true\n          });\n        },\n        onSubmit: this.addUser,\n        addUserWithNewCommunity: this.addUserWithNewCommunity,\n        currentUser: currentUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return AddUserPage;\n}(Component);\n\nvar addUserMutation = gql(_templateObject());\nvar addUserWithNewCommunityMutation = gql(_templateObject2());\nexport default compose(graphql(addUserMutation, {\n  name: 'addUserMutation'\n}), graphql(addUserWithNewCommunityMutation, {\n  name: 'addUserWithNewCommunityMutation'\n}))(AddUserPage);","map":{"version":3,"sources":["/Users/carlvlewis/floodsight/src/components/Dashboard/ManageUsersPage/AddUserPage.js"],"names":["React","Component","Redirect","gql","graphql","compose","generator","logError","EditUser","ActivateUserModal","AddUserPage","state","redirect","showModal","userAdded","emailSent","errorMessage","addUserFactory","withNewCommunity","params","setState","password","generate","length","numbers","symbols","strict","mutation","variables","email","firstName","lastName","role","jobTitle","phoneNumber","props","addUserWithNewCommunityMutation","communityName","addUserMutation","communityId","Number","refetchQueries","then","data","sendEmail","catch","err","errMessage","message","addUser","addUserWithNewCommunity","user","fetch","process","env","REACT_APP_BACKEND_URL","method","body","JSON","stringify","newUser","headers","Headers","res","status","currentUser","pathname","referrer","location","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport gql from 'graphql-tag';\nimport { graphql, compose } from 'react-apollo';\nimport generator from 'generate-password';\n\nimport { logError } from 'services/logger';\nimport EditUser from 'components/Dashboard/ManageUsersPage/EditUser';\nimport ActivateUserModal from 'components/Dashboard/ManageUsersPage/ActivateUserModal';\n\nimport 'components/Dashboard/ManageUsersPage/AddUserPage.css';\n\nclass AddUserPage extends Component {\n  state = {\n    redirect: false,\n    showModal: false,\n    userAdded: false,\n    emailSent: false,\n    errorMessage: null,\n  };\n\n  componentDidCatch(err) {\n    logError(err);\n    this.setState({ errorMessage: err.message });\n  }\n\n  addUserFactory = (withNewCommunity) => (params) => {\n    this.setState({ showModal: true, errorMessage: null });\n    const password = generator.generate({\n      length: 30,\n      numbers: true,\n      symbols: true,\n      strict: true,\n    });\n\n    let mutation, variables = {\n      email: params.email,\n      firstName: params.firstName,\n      lastName: params.lastName,\n      role: params.role,\n      jobTitle: params.jobTitle,\n      phoneNumber: params.phoneNumber,\n      password: password,\n    };\n\n    if (withNewCommunity) {\n      mutation = this.props.addUserWithNewCommunityMutation;\n      variables.communityName = params.communityName;\n    } else {\n      mutation = this.props.addUserMutation;\n      variables.communityId = Number(params.communityId);\n    }\n\n    mutation({\n      variables,\n      refetchQueries: ['searchUsers', 'allCommunities']\n    })\n    .then(({ data }) => {\n      this.setState({ userAdded: true });\n      this.sendEmail(params);\n    })\n    .catch(err => {\n      logError(err);\n      let errMessage = err.message;\n      if (err.message === `GraphQL error: duplicate key value violates unique constraint \"user_account_email_key\"`) {\n        errMessage = \"An account with that email address already exists.\";\n      } else if (err.message === `GraphQL error: new row for relation \"user_account\" violates check constraint \"user_account_email_check\"`) {\n        errMessage = \"The email address entered is invalid. Please update with a valid email address to continue.\";\n      }\n      this.setState({ errorMessage: errMessage });\n    });\n  };\n\n  addUser = this.addUserFactory(false);\n  addUserWithNewCommunity = this.addUserFactory(true);\n\n  sendEmail = user => {\n    fetch(`${process.env.REACT_APP_BACKEND_URL}/email/reset`, {\n      method: 'POST',\n      body: JSON.stringify({ email: user.email, newUser: true }),\n      headers: new Headers({\n        'Content-Type': 'application/json',\n      }),\n    })\n      .then(res => {\n        if (res.status === 204) {\n          this.setState({\n            emailSent: true,\n          });\n        } else if (res.status === 400 || res.status === 500) {\n          logError(res.errorMessage);\n          this.setState({\n            emailSent: false,\n            errorMessage: 'Email failed to send',\n          });\n        }\n      })\n      .catch(err => {\n        logError(err);\n        this.setState({\n          emailSent: false,\n          errorMessage: err.message,\n        });\n      });\n  };\n\n  render() {\n    const { currentUser } = this.props;\n    const { showModal, userAdded, emailSent, errorMessage } = this.state;\n\n    const redirect =\n      this.state.redirect || (userAdded && emailSent && !showModal);\n\n    if (redirect) {\n      return <Redirect\n        push\n        to={{\n          pathname: '/dashboard/users',\n          state: { referrer: this.props.location}\n        }} />;\n    }\n\n    return (\n      <div className=\"AddUser\">\n        {showModal && (\n          <ActivateUserModal\n            onClose={() => this.setState({ showModal: false })}\n            userIsNew\n            userActivated={userAdded}\n            emailSent={emailSent}\n            errorMessage={errorMessage}\n          />\n        )}\n        <h1>Add New User</h1>\n        <EditUser\n          onCancel={() => this.setState({ redirect: true })}\n          onSubmit={this.addUser}\n          addUserWithNewCommunity={this.addUserWithNewCommunity}\n          currentUser={currentUser}\n        />\n      </div>\n    );\n  }\n}\n\nconst addUserMutation = gql`\n  mutation(\n    $firstName: String!\n    $lastName: String!\n    $jobTitle: String!\n    $communityId: Int!\n    $phoneNumber: String!\n    $email: String!\n    $password: String!\n    $role: String!\n  ) {\n    registerUser(\n      input: {\n        firstName: $firstName\n        lastName: $lastName\n        jobTitle: $jobTitle\n        communityId: $communityId\n        phoneNumber: $phoneNumber\n        email: $email\n        password: $password\n        role: $role\n      }\n    ) {\n      user {\n        id\n      }\n    }\n  }\n`;\n\nconst addUserWithNewCommunityMutation = gql`\n  mutation(\n    $firstName: String!\n    $lastName: String!\n    $jobTitle: String!\n    $phoneNumber: String!\n    $email: String!\n    $password: String!\n    $role: String!\n    $communityName: String!\n  ) {\n    registerUserWithNewCommunity(\n      input: {\n        firstName: $firstName\n        lastName: $lastName\n        jobTitle: $jobTitle\n        phoneNumber: $phoneNumber\n        email: $email\n        password: $password\n        role: $role\n        communityName: $communityName\n      }\n    ) {\n      user {\n        id\n      }\n    }\n  }\n`;\n\nexport default compose(\n  graphql(addUserMutation, {\n    name: 'addUserMutation',\n  }),\n  graphql(addUserWithNewCommunityMutation, {\n    name: 'addUserWithNewCommunityMutation'\n  })\n)(AddUserPage);\n"]},"metadata":{},"sourceType":"module"}