{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/carlvlewis/floodsight/src/components/Dashboard/ManageUsersPage/UserList.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query searchUsers($searchString: String, $community: Int) {\\n    searchUsers(search: $searchString, community: $community) {\\n      nodes {\\n        id\\n        ...userActive\\n        firstName\\n        lastName\\n        role\\n        emailAddress\\n        communityByCommunityId {\\n          id\\n          name\\n        }\\n      }\\n    }\\n  }\\n  \", \"\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Table from 'components/Dashboard/Table/Table';\nimport ArchiveUserModal from 'components/Dashboard/ManageUsersPage/ArchiveUserModal';\nimport userActiveFragment from 'components/Dashboard/ManageUsersPage/queries/userActiveFragment';\nvar manageUsersHeaders = [{\n  title: 'Name'\n}, {\n  title: 'Role'\n}, {\n  title: 'Community'\n}, {\n  title: 'Active'\n}];\n\nvar UserList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UserList, _Component);\n\n  function UserList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, UserList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UserList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      archiveModalOpen: null\n    };\n    return _this;\n  }\n\n  _createClass(UserList, [{\n    key: \"parseRole\",\n    value: function parseRole(role) {\n      var roleArray = role.split('_');\n      roleArray.splice(0, 1);\n      return roleArray.map(function (word) {\n        return word.charAt(0).toUpperCase() + word.substr(1);\n      }).join(' ');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var isLoading = !this.props.data || this.props.data.loading;\n\n      if (isLoading) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, \"Loading\");\n      }\n\n      var searchUsers = this.props.data.searchUsers;\n\n      if (searchUsers == null) {\n        // TODO: add error logging\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, \"Error Loading Users\");\n      }\n\n      var userData = searchUsers.nodes.map(function (user) {\n        return [{\n          isLinked: true,\n          link: \"/dashboard/user/\".concat(user.id),\n          content: \"\".concat(user.firstName, \" \").concat(user.lastName)\n        }, _this2.parseRole(user.role), user.communityByCommunityId.name, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"checkbox\",\n          checked: user.active,\n          onChange: function onChange() {\n            return _this2.setState({\n              archiveModalOpen: user.id\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }), _this2.state.archiveModalOpen === user.id && React.createElement(ArchiveUserModal, {\n          user: user,\n          onClose: function onClose() {\n            _this2.setState({\n              archiveModalOpen: null\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }))];\n      });\n      return React.createElement(Table, {\n        data: userData,\n        headers: manageUsersHeaders,\n        checkboxColumn: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return UserList;\n}(Component);\n\nvar searchUsers = gql(_templateObject(), userActiveFragment);\nexport default compose(graphql(searchUsers, {\n  options: function options(ownProps) {\n    return {\n      variables: {\n        searchString: ownProps.searchParam === '' ? null : ownProps.searchParam,\n        community: ownProps.currentUser.role === 'floods_super_admin' ? null : ownProps.currentUser.communityId\n      }\n    };\n  }\n}))(UserList);","map":{"version":3,"sources":["/Users/carlvlewis/floodsight/src/components/Dashboard/ManageUsersPage/UserList.js"],"names":["React","Component","graphql","compose","gql","Table","ArchiveUserModal","userActiveFragment","manageUsersHeaders","title","UserList","state","archiveModalOpen","role","roleArray","split","splice","map","word","charAt","toUpperCase","substr","join","isLoading","props","data","loading","searchUsers","userData","nodes","user","isLinked","link","id","content","firstName","lastName","parseRole","communityByCommunityId","name","active","setState","options","ownProps","variables","searchString","searchParam","community","currentUser","communityId"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport gql from 'graphql-tag';\n\nimport Table from 'components/Dashboard/Table/Table';\nimport ArchiveUserModal from 'components/Dashboard/ManageUsersPage/ArchiveUserModal';\nimport userActiveFragment from 'components/Dashboard/ManageUsersPage/queries/userActiveFragment';\n\nconst manageUsersHeaders = [\n  {\n    title: 'Name',\n  },\n  {\n    title: 'Role',\n  },\n  {\n    title: 'Community',\n  },\n  {\n    title: 'Active',\n  },\n];\n\nclass UserList extends Component {\n  state = {\n    archiveModalOpen: null,\n  };\n\n  parseRole(role) {\n    const roleArray = role.split('_');\n    roleArray.splice(0, 1);\n\n    return roleArray\n      .map(word => {\n        return word.charAt(0).toUpperCase() + word.substr(1);\n      })\n      .join(' ');\n  }\n\n  render() {\n    const isLoading = !this.props.data || this.props.data.loading;\n\n    if (isLoading) {\n      return <div>Loading</div>;\n    }\n\n    const { searchUsers } = this.props.data;\n\n    if (searchUsers == null) {\n      // TODO: add error logging\n      return <div>Error Loading Users</div>;\n    }\n\n    const userData = searchUsers.nodes.map(user => {\n      return [\n        {\n          isLinked: true,\n          link: `/dashboard/user/${user.id}`,\n          content: `${user.firstName} ${user.lastName}`,\n        },\n        this.parseRole(user.role),\n        user.communityByCommunityId.name,\n        <div>\n          <input\n            type=\"checkbox\"\n            checked={user.active}\n            onChange={() => this.setState({ archiveModalOpen: user.id })}\n          />\n          {this.state.archiveModalOpen === user.id && (\n            <ArchiveUserModal\n              user={user}\n              onClose={() => {\n                this.setState({\n                  archiveModalOpen: null,\n                });\n              }}\n            />\n          )}\n        </div>,\n      ];\n    });\n\n    return (\n      <Table\n        data={userData}\n        headers={manageUsersHeaders}\n        checkboxColumn={false}\n      />\n    );\n  }\n}\n\nconst searchUsers = gql`\n  query searchUsers($searchString: String, $community: Int) {\n    searchUsers(search: $searchString, community: $community) {\n      nodes {\n        id\n        ...userActive\n        firstName\n        lastName\n        role\n        emailAddress\n        communityByCommunityId {\n          id\n          name\n        }\n      }\n    }\n  }\n  ${userActiveFragment}\n`;\n\nexport default compose(\n  graphql(searchUsers, {\n    options: ownProps => ({\n      variables: {\n        searchString: ownProps.searchParam === '' ? null : ownProps.searchParam,\n        community:\n          ownProps.currentUser.role === 'floods_super_admin'\n            ? null\n            : ownProps.currentUser.communityId,\n      },\n    }),\n  }),\n)(UserList);\n"]},"metadata":{},"sourceType":"module"}