{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/carlvlewis/floodsight/src/components/Shared/CrossingMapPage/SelectedCrossingContainer.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query crossingById($crossingId: Int!) {\\n    crossingById(id: $crossingId) {\\n      id\\n      ...crossingInfo\\n      ...statusUpdateInfo\\n    }\\n  }\\n  \", \"\\n  \", \"\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport DashboardCrossingListItem from 'components/Dashboard/CrossingListPage/DashboardCrossingListItem/DashboardCrossingListItem';\nimport PublicCrossingListItem from 'components/Public/CrossingListItem/PublicCrossingListItem';\nimport { graphql, compose } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport statusUpdateFragment from 'components/Dashboard/CrossingListPage/queries/statusUpdateFragment';\nimport statusReasonsQuery from 'components/Dashboard/CrossingListPage/queries/statusReasonsQuery';\nimport crossingFragment from 'components/Dashboard/CrossingListPage/queries/crossingFragment';\nimport MobileDetailsContainer from 'components/Shared/Map/MobileDetailsContainer';\n\nvar SelectedCrossingContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SelectedCrossingContainer, _Component);\n\n  function SelectedCrossingContainer() {\n    _classCallCheck(this, SelectedCrossingContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SelectedCrossingContainer).apply(this, arguments));\n  }\n\n  _createClass(SelectedCrossingContainer, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (!this.props.isMobileDetails) return;\n\n      if (this.props.data && !this.props.data.loading && this.props.data.crossingById) {\n        if (!prevProps.data || !prevProps.data.crossingById) {\n          var _this$props$data$cros = this.props.data.crossingById.statusUpdateByLatestStatusUpdateId,\n              crossingId = _this$props$data$cros.crossingId,\n              statusReasonId = _this$props$data$cros.statusReasonId,\n              reopenDate = _this$props$data$cros.reopenDate,\n              indefiniteClosure = _this$props$data$cros.indefiniteClosure,\n              notes = _this$props$data$cros.notes;\n          this.props.setHeight(crossingId, statusReasonId, reopenDate, indefiniteClosure, notes);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          currentUser = _this$props.currentUser,\n          allCommunities = _this$props.allCommunities,\n          setSelectedFeature = _this$props.setSelectedFeature,\n          onDash = _this$props.onDash;\n      var isLoading = !this.props.data || this.props.data.loading || !this.props.statusReasonsQuery || this.props.statusReasonsQuery.loading || !this.props.data.crossingById;\n\n      if (isLoading) {\n        return null;\n      }\n\n      var crossing = this.props.data.crossingById;\n      var statusReasons = this.props.statusReasonsQuery.allStatusReasons.nodes;\n\n      if (this.props.isMobileDetails) {\n        return React.createElement(MobileDetailsContainer, {\n          crossing: crossing,\n          reasons: statusReasons,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        });\n      }\n\n      return currentUser ? React.createElement(DashboardCrossingListItem, {\n        key: crossing.id,\n        crossing: crossing,\n        reasons: statusReasons,\n        currentUser: currentUser,\n        listOrMap: \"map\",\n        allCommunities: allCommunities,\n        onDash: onDash,\n        setSelectedFeature: setSelectedFeature,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }) : React.createElement(PublicCrossingListItem, {\n        key: crossing.id,\n        crossing: crossing,\n        reasons: statusReasons,\n        allCommunities: allCommunities,\n        onDash: onDash,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return SelectedCrossingContainer;\n}(Component);\n\nvar crossingQuery = gql(_templateObject(), crossingFragment, statusUpdateFragment);\nexport default compose(graphql(crossingQuery, {\n  options: function options(ownProps) {\n    return {\n      variables: {\n        crossingId: Number(ownProps.crossingId)\n      }\n    };\n  }\n}), graphql(statusReasonsQuery, {\n  name: 'statusReasonsQuery'\n}))(SelectedCrossingContainer);","map":{"version":3,"sources":["/Users/carlvlewis/floodsight/src/components/Shared/CrossingMapPage/SelectedCrossingContainer.js"],"names":["React","Component","DashboardCrossingListItem","PublicCrossingListItem","graphql","compose","gql","statusUpdateFragment","statusReasonsQuery","crossingFragment","MobileDetailsContainer","SelectedCrossingContainer","prevProps","props","isMobileDetails","data","loading","crossingById","statusUpdateByLatestStatusUpdateId","crossingId","statusReasonId","reopenDate","indefiniteClosure","notes","setHeight","currentUser","allCommunities","setSelectedFeature","onDash","isLoading","crossing","statusReasons","allStatusReasons","nodes","id","crossingQuery","options","ownProps","variables","Number","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DashboardCrossingListItem from 'components/Dashboard/CrossingListPage/DashboardCrossingListItem/DashboardCrossingListItem';\nimport PublicCrossingListItem from 'components/Public/CrossingListItem/PublicCrossingListItem';\nimport { graphql, compose } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport statusUpdateFragment from 'components/Dashboard/CrossingListPage/queries/statusUpdateFragment';\nimport statusReasonsQuery from 'components/Dashboard/CrossingListPage/queries/statusReasonsQuery';\nimport crossingFragment from 'components/Dashboard/CrossingListPage/queries/crossingFragment';\n\nimport MobileDetailsContainer from 'components/Shared/Map/MobileDetailsContainer';\n\nclass SelectedCrossingContainer extends Component {\n  componentDidUpdate(prevProps) {\n    if (!this.props.isMobileDetails) return;\n\n    if (\n      this.props.data &&\n      !this.props.data.loading &&\n      this.props.data.crossingById\n    ) {\n      if (!prevProps.data || !prevProps.data.crossingById) {\n        const {\n          crossingId,\n          statusReasonId,\n          reopenDate,\n          indefiniteClosure,\n          notes,\n        } = this.props.data.crossingById.statusUpdateByLatestStatusUpdateId;\n        this.props.setHeight(\n          crossingId,\n          statusReasonId,\n          reopenDate,\n          indefiniteClosure,\n          notes,\n        );\n      }\n    }\n  }\n\n  render() {\n    const { currentUser, allCommunities, setSelectedFeature, onDash } = this.props;\n\n    const isLoading =\n      !this.props.data ||\n      this.props.data.loading ||\n      !this.props.statusReasonsQuery ||\n      this.props.statusReasonsQuery.loading ||\n      !this.props.data.crossingById;\n\n    if (isLoading) {\n      return null;\n    }\n\n    const crossing = this.props.data.crossingById;\n    const statusReasons = this.props.statusReasonsQuery.allStatusReasons.nodes;\n\n    if (this.props.isMobileDetails) {\n      return (\n        <MobileDetailsContainer\n          crossing={crossing}\n          reasons={statusReasons}\n        />\n      );\n    }\n\n    return currentUser ? (\n      <DashboardCrossingListItem\n        key={crossing.id}\n        crossing={crossing}\n        reasons={statusReasons}\n        currentUser={currentUser}\n        listOrMap=\"map\"\n        allCommunities={allCommunities}\n        onDash={onDash}\n        setSelectedFeature={setSelectedFeature}\n      />\n    ) : (\n      <PublicCrossingListItem\n        key={crossing.id}\n        crossing={crossing}\n        reasons={statusReasons}\n        allCommunities={allCommunities}\n        onDash={onDash}\n      />\n    );\n  }\n}\n\nconst crossingQuery = gql`\n  query crossingById($crossingId: Int!) {\n    crossingById(id: $crossingId) {\n      id\n      ...crossingInfo\n      ...statusUpdateInfo\n    }\n  }\n  ${crossingFragment}\n  ${statusUpdateFragment}\n`;\n\nexport default compose(\n  graphql(crossingQuery, {\n    options: ownProps => ({\n      variables: {\n        crossingId: Number(ownProps.crossingId),\n      },\n    }),\n  }),\n  graphql(statusReasonsQuery, { name: 'statusReasonsQuery' }),\n)(SelectedCrossingContainer);\n"]},"metadata":{},"sourceType":"module"}