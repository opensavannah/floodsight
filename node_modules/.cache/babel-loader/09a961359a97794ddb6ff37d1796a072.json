{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/carlvlewis/floodsight/src/components/Dashboard/ResetPasswordPage/ResetPasswordPage.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation($newPassword: String!) {\\n    resetPassword(input: { newPassword: $newPassword }) {\\n      jwtToken\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport FontAwesome from 'react-fontawesome';\nimport { graphql } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport queryString from 'query-string';\nimport { isTokenReal, isTokenValid } from 'services/jwtHelper';\nimport { logError } from 'services/logger';\nimport 'scss/auth.css';\n\nvar ResetPasswordPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ResetPasswordPage, _Component);\n\n  function ResetPasswordPage(props) {\n    var _this;\n\n    _classCallCheck(this, ResetPasswordPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResetPasswordPage).call(this, props));\n\n    _this.handlePasswordChange = function (e) {\n      _this.setState({\n        password: e.target.value\n      });\n    };\n\n    _this.handleConfirmPasswordChange = function (e) {\n      _this.setState({\n        confirmPassword: e.target.value\n      });\n    };\n\n    _this.handleSendNewLink = function (e) {\n      _this.setState({\n        waiting: true\n      });\n\n      e.preventDefault();\n      fetch(\"\".concat(process.env.REACT_APP_BACKEND_URL, \"/email/reset\"), {\n        method: 'POST',\n        body: JSON.stringify({\n          email: _this.email,\n          newUser: false\n        }),\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      }).then(function (res) {\n        if (res.status === 204) {\n          _this.setState({\n            newLinkSetSuccessfully: true,\n            errorHappened: false,\n            waiting: false\n          });\n        } else if (res.status === 400 || res.status === 500) {\n          _this.setState({\n            newLinkSetSuccessfully: false,\n            errorHappened: true,\n            errorMessage: \"Server Error. Failed to reset password.\",\n            waiting: false\n          });\n        }\n      }).catch(function (err) {\n        logError(err);\n\n        _this.setState({\n          newLinkSetSuccessfully: false,\n          errorHappened: true,\n          errorMessage: \"Server Error. Failed to reset password.\",\n          waiting: false\n        });\n      });\n    };\n\n    _this.handleForgotPasswordLink = function (e) {\n      e.preventDefault();\n\n      _this.props.history.push('/dashboard/forgot_password');\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      var password = _this.state.password.trim();\n\n      var confirmPassword = _this.state.confirmPassword.trim();\n\n      if (!password.length || password !== confirmPassword) {\n        _this.setState({\n          errorHappened: true,\n          errorMessage: \"Passwords did not match\"\n        });\n      } else {\n        _this.props.mutate({\n          variables: {\n            newPassword: password\n          }\n        }).then(function (_ref) {\n          var data = _ref.data;\n          localStorage.setItem('jwt_user_token', data.resetPassword.jwtToken);\n\n          _this.setState({\n            passwordResetSuccessfully: true,\n            errorHappened: false\n          });\n\n          _this.props.onLogin();\n        }).catch(function (error) {\n          logError('there was an error sending the query', error);\n\n          _this.setState({\n            passwordResetSuccessfully: false,\n            errorHappened: true,\n            errorMessage: \"Server Error. Failed to reset password.\"\n          });\n        });\n      }\n    };\n\n    _this.state = {\n      waiting: false,\n      password: '',\n      confirmPassword: '',\n      passwordResetSuccessfully: false,\n      newLinkSetSuccessfully: false,\n      errorHappened: false,\n      errorMessage: \"\"\n    };\n\n    var _queryString$parse = queryString.parse(props.location.search),\n        resetterJwt = _queryString$parse.resetterJwt,\n        email = _queryString$parse.email;\n\n    _this.email = email;\n\n    if (isTokenReal(resetterJwt)) {\n      if (isTokenValid(resetterJwt)) {\n        _this.tokenExpired = false;\n        localStorage.setItem('jwt_user_token', resetterJwt);\n      } else {\n        _this.tokenExpired = true;\n      }\n    } else {\n      _this.tokenInvalid = true;\n    }\n\n    return _this;\n  }\n\n  _createClass(ResetPasswordPage, [{\n    key: \"render\",\n    value: function render() {\n      var content;\n      var _this$state = this.state,\n          waiting = _this$state.waiting,\n          passwordResetSuccessfully = _this$state.passwordResetSuccessfully,\n          newLinkSetSuccessfully = _this$state.newLinkSetSuccessfully,\n          password = _this$state.password,\n          confirmPassword = _this$state.confirmPassword,\n          errorHappened = _this$state.errorHappened,\n          errorMessage = _this$state.errorMessage; // Content if JWT Token is invalid\n\n      if (this.tokenInvalid) {\n        content = React.createElement(\"div\", {\n          className: \"Auth__error-text Auth__form-controls\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, \"Error: Invalid \\\"Reset Password\\\" link. Please \", React.createElement(\"button\", {\n          className: \"button-link\",\n          onClick: this.handleForgotPasswordLink,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, \"Click Here\"), \" if you need to reset your password.\"); // Content if JWT Token is Expired\n      } else if (this.tokenExpired) {\n        if (!waiting && !newLinkSetSuccessfully) {\n          content = React.createElement(\"div\", {\n            className: \"Auth__form-controls\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 152\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 153\n            },\n            __self: this\n          }, \"For security reasons, this \\\"Reset Password\\\" link has expired.\"), React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 154\n            },\n            __self: this\n          }, \"Please click the button below, and we will send you an email containing a fresh link.\"), React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 155\n            },\n            __self: this\n          }, \"You will have 30 minutes to reset your password with that new link.\"), errorHappened && React.createElement(\"div\", {\n            className: \"Auth__error-text\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 157\n            },\n            __self: this\n          }, ' ', errorMessage, ' '), React.createElement(\"form\", {\n            onSubmit: this.handleSendNewLink,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 162\n            },\n            __self: this\n          }, React.createElement(\"input\", {\n            type: \"submit\",\n            disabled: newLinkSetSuccessfully,\n            className: \"Auth__submit\",\n            value: \"Email me a New Link\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 163\n            },\n            __self: this\n          })));\n        } else if (waiting) {\n          content = React.createElement(FontAwesome, {\n            name: \"spinner\",\n            size: \"4x\",\n            className: \"Auth__waiting fa-spin\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 174\n            },\n            __self: this\n          });\n        } else if (newLinkSetSuccessfully) {\n          content = React.createElement(\"div\", {\n            className: \"Auth__form-controls\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 182\n            },\n            __self: this\n          }, React.createElement(\"h1\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 183\n            },\n            __self: this\n          }, \" Email Sent! \"), React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 184\n            },\n            __self: this\n          }, \"You have 30 minutes to reset your password before your email's link expires.\"));\n        } // Content for Valid JWT Token\n\n      } else {\n        content = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        }, !passwordResetSuccessfully && React.createElement(\"div\", {\n          className: \"Auth__form-controls\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194\n          },\n          __self: this\n        }, \" Reset your password \"), errorHappened && React.createElement(\"div\", {\n          className: \"Auth__error-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196\n          },\n          __self: this\n        }, ' ', errorMessage, ' '), React.createElement(\"form\", {\n          onSubmit: this.handleSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"password\",\n          value: password,\n          placeholder: \"Password\",\n          onChange: this.handlePasswordChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202\n          },\n          __self: this\n        }), React.createElement(\"input\", {\n          type: \"password\",\n          value: confirmPassword,\n          placeholder: \"Confirm\",\n          onChange: this.handleConfirmPasswordChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208\n          },\n          __self: this\n        }), React.createElement(\"input\", {\n          type: \"submit\",\n          className: \"Auth__submit\",\n          value: \"Reset Password\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214\n          },\n          __self: this\n        }))), passwordResetSuccessfully && React.createElement(Redirect, {\n          to: \"/dashboard\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(\"div\", {\n        className: \"AuthPage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, content);\n    }\n  }]);\n\n  return ResetPasswordPage;\n}(Component);\n\nResetPasswordPage.propTypes = {\n  onLogin: PropTypes.func.isRequired\n};\nvar resetPassword = gql(_templateObject());\nexport default graphql(resetPassword)(ResetPasswordPage);","map":{"version":3,"sources":["/Users/carlvlewis/floodsight/src/components/Dashboard/ResetPasswordPage/ResetPasswordPage.js"],"names":["React","Component","FontAwesome","graphql","gql","Redirect","PropTypes","queryString","isTokenReal","isTokenValid","logError","ResetPasswordPage","props","handlePasswordChange","e","setState","password","target","value","handleConfirmPasswordChange","confirmPassword","handleSendNewLink","waiting","preventDefault","fetch","process","env","REACT_APP_BACKEND_URL","method","body","JSON","stringify","email","newUser","headers","Headers","then","res","status","newLinkSetSuccessfully","errorHappened","errorMessage","catch","err","handleForgotPasswordLink","history","push","handleSubmit","state","trim","length","mutate","variables","newPassword","data","localStorage","setItem","resetPassword","jwtToken","passwordResetSuccessfully","onLogin","error","parse","location","search","resetterJwt","tokenExpired","tokenInvalid","content","propTypes","func","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,oBAA1C;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAO,eAAP;;IAEMC,iB;;;;;AAKJ,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,2FAAMA,KAAN;;AADiB,UA4BnBC,oBA5BmB,GA4BI,UAAAC,CAAC,EAAI;AAC1B,YAAKC,QAAL,CAAc;AAAEC,QAAAA,QAAQ,EAAEF,CAAC,CAACG,MAAF,CAASC;AAArB,OAAd;AACD,KA9BkB;;AAAA,UAgCnBC,2BAhCmB,GAgCW,UAAAL,CAAC,EAAI;AACjC,YAAKC,QAAL,CAAc;AAAEK,QAAAA,eAAe,EAAEN,CAAC,CAACG,MAAF,CAASC;AAA5B,OAAd;AACD,KAlCkB;;AAAA,UAoCnBG,iBApCmB,GAoCC,UAAAP,CAAC,EAAI;AACvB,YAAKC,QAAL,CAAc;AAAEO,QAAAA,OAAO,EAAE;AAAX,OAAd;;AACAR,MAAAA,CAAC,CAACS,cAAF;AACAC,MAAAA,KAAK,WAAIC,OAAO,CAACC,GAAR,CAAYC,qBAAhB,mBAAqD;AACxDC,QAAAA,MAAM,EAAE,MADgD;AAExDC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,UAAAA,KAAK,EAAE,MAAKA,KAAd;AAAqBC,UAAAA,OAAO,EAAE;AAA9B,SAAf,CAFkD;AAGxDC,QAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACnB,0BAAgB;AADG,SAAZ;AAH+C,OAArD,CAAL,CAOCC,IAPD,CAOM,UAAAC,GAAG,EAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,gBAAKvB,QAAL,CAAc;AACZwB,YAAAA,sBAAsB,EAAE,IADZ;AAEZC,YAAAA,aAAa,EAAE,KAFH;AAGZlB,YAAAA,OAAO,EAAE;AAHG,WAAd;AAKD,SAND,MAMO,IAAIe,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AACnD,gBAAKvB,QAAL,CAAc;AACZwB,YAAAA,sBAAsB,EAAE,KADZ;AAEZC,YAAAA,aAAa,EAAE,IAFH;AAGZC,YAAAA,YAAY,EAAE,yCAHF;AAIZnB,YAAAA,OAAO,EAAE;AAJG,WAAd;AAMD;AACF,OAtBD,EAuBCoB,KAvBD,CAuBO,UAAAC,GAAG,EAAI;AACZjC,QAAAA,QAAQ,CAACiC,GAAD,CAAR;;AACA,cAAK5B,QAAL,CAAc;AACZwB,UAAAA,sBAAsB,EAAE,KADZ;AAEZC,UAAAA,aAAa,EAAE,IAFH;AAGZC,UAAAA,YAAY,EAAE,yCAHF;AAIZnB,UAAAA,OAAO,EAAE;AAJG,SAAd;AAMD,OA/BD;AAgCD,KAvEkB;;AAAA,UAyEnBsB,wBAzEmB,GAyEQ,UAAA9B,CAAC,EAAI;AAC9BA,MAAAA,CAAC,CAACS,cAAF;;AACA,YAAKX,KAAL,CAAWiC,OAAX,CAAmBC,IAAnB,CAAwB,4BAAxB;AACD,KA5EkB;;AAAA,UA8EnBC,YA9EmB,GA8EJ,UAAAjC,CAAC,EAAI;AAClBA,MAAAA,CAAC,CAACS,cAAF;;AACA,UAAMP,QAAQ,GAAG,MAAKgC,KAAL,CAAWhC,QAAX,CAAoBiC,IAApB,EAAjB;;AACA,UAAM7B,eAAe,GAAG,MAAK4B,KAAL,CAAW5B,eAAX,CAA2B6B,IAA3B,EAAxB;;AACA,UAAI,CAACjC,QAAQ,CAACkC,MAAV,IAAqBlC,QAAQ,KAAKI,eAAtC,EAAwD;AACtD,cAAKL,QAAL,CAAc;AACZyB,UAAAA,aAAa,EAAE,IADH;AAEZC,UAAAA,YAAY,EAAE;AAFF,SAAd;AAID,OALD,MAKO;AACL,cAAK7B,KAAL,CACCuC,MADD,CACQ;AACNC,UAAAA,SAAS,EAAE;AAAEC,YAAAA,WAAW,EAAErC;AAAf;AADL,SADR,EAICoB,IAJD,CAIM,gBAAc;AAAA,cAAXkB,IAAW,QAAXA,IAAW;AAClBC,UAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCF,IAAI,CAACG,aAAL,CAAmBC,QAA1D;;AACA,gBAAK3C,QAAL,CAAc;AACZ4C,YAAAA,yBAAyB,EAAE,IADf;AAEZnB,YAAAA,aAAa,EAAE;AAFH,WAAd;;AAIA,gBAAK5B,KAAL,CAAWgD,OAAX;AACD,SAXD,EAYClB,KAZD,CAYO,UAAAmB,KAAK,EAAI;AACdnD,UAAAA,QAAQ,CAAC,sCAAD,EAAyCmD,KAAzC,CAAR;;AACA,gBAAK9C,QAAL,CAAc;AACZ4C,YAAAA,yBAAyB,EAAE,KADf;AAEZnB,YAAAA,aAAa,EAAE,IAFH;AAGZC,YAAAA,YAAY,EAAE;AAHF,WAAd;AAKD,SAnBD;AAoBD;AACF,KA7GkB;;AAGjB,UAAKO,KAAL,GAAa;AACX1B,MAAAA,OAAO,EAAE,KADE;AAEXN,MAAAA,QAAQ,EAAE,EAFC;AAGXI,MAAAA,eAAe,EAAE,EAHN;AAIXuC,MAAAA,yBAAyB,EAAE,KAJhB;AAKXpB,MAAAA,sBAAsB,EAAE,KALb;AAMXC,MAAAA,aAAa,EAAE,KANJ;AAOXC,MAAAA,YAAY,EAAE;AAPH,KAAb;;AAHiB,6BAaclC,WAAW,CAACuD,KAAZ,CAAkBlD,KAAK,CAACmD,QAAN,CAAeC,MAAjC,CAbd;AAAA,QAaTC,WAbS,sBAaTA,WAbS;AAAA,QAaIjC,KAbJ,sBAaIA,KAbJ;;AAcjB,UAAKA,KAAL,GAAaA,KAAb;;AAEA,QAAIxB,WAAW,CAACyD,WAAD,CAAf,EAA8B;AAC5B,UAAIxD,YAAY,CAACwD,WAAD,CAAhB,EAA+B;AAC7B,cAAKC,YAAL,GAAoB,KAApB;AACAX,QAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCS,WAAvC;AACD,OAHD,MAGO;AACL,cAAKC,YAAL,GAAoB,IAApB;AACD;AACF,KAPD,MAOO;AACL,YAAKC,YAAL,GAAoB,IAApB;AACD;;AAzBgB;AA0BlB;;;;6BAqFQ;AACP,UAAIC,OAAJ;AADO,wBAUH,KAAKpB,KAVF;AAAA,UAGL1B,OAHK,eAGLA,OAHK;AAAA,UAILqC,yBAJK,eAILA,yBAJK;AAAA,UAKLpB,sBALK,eAKLA,sBALK;AAAA,UAMLvB,QANK,eAMLA,QANK;AAAA,UAOLI,eAPK,eAOLA,eAPK;AAAA,UAQLoB,aARK,eAQLA,aARK;AAAA,UASLC,YATK,eASLA,YATK,EAYP;;AACA,UAAI,KAAK0B,YAAT,EAAuB;AACrBC,QAAAA,OAAO,GACL;AAAK,UAAA,SAAS,EAAC,sCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DAC+C;AAAQ,UAAA,SAAS,EAAC,aAAlB;AAAgC,UAAA,OAAO,EAAE,KAAKxB,wBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAD/C,yCADF,CADqB,CAMvB;AACC,OAPD,MAOO,IAAI,KAAKsB,YAAT,EAAuB;AAC5B,YAAI,CAAC5C,OAAD,IAAY,CAACiB,sBAAjB,EAAyC;AACvC6B,UAAAA,OAAO,GACL;AAAK,YAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+EADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qGAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFAHF,EAIG5B,aAAa,IACZ;AAAK,YAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACG,GADH,EAEGC,YAFH,EAEiB,GAFjB,CALJ,EAUE;AAAM,YAAA,QAAQ,EAAE,KAAKpB,iBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AACE,YAAA,IAAI,EAAC,QADP;AAEE,YAAA,QAAQ,EAAEkB,sBAFZ;AAGE,YAAA,SAAS,EAAC,cAHZ;AAIE,YAAA,KAAK,EAAC,qBAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CAVF,CADF;AAqBD,SAtBD,MAsBO,IAAIjB,OAAJ,EAAa;AAClB8C,UAAAA,OAAO,GACL,oBAAC,WAAD;AACE,YAAA,IAAI,EAAC,SADP;AAEE,YAAA,IAAI,EAAC,IAFP;AAGE,YAAA,SAAS,EAAC,uBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD,SARM,MAQA,IAAI7B,sBAAJ,EAA4B;AACjC6B,UAAAA,OAAO,GACL;AAAK,YAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4FAFF,CADF;AAMD,SAtC2B,CAuC9B;;AACC,OAxCM,MAwCA;AACLA,QAAAA,OAAO,GACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,CAACT,yBAAD,IACC;AAAK,UAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADF,EAEGnB,aAAa,IACZ;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,GADH,EAEGC,YAFH,EAEiB,GAFjB,CAHJ,EAQE;AAAM,UAAA,QAAQ,EAAE,KAAKM,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,KAAK,EAAE/B,QAFT;AAGE,UAAA,WAAW,EAAC,UAHd;AAIE,UAAA,QAAQ,EAAE,KAAKH,oBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAOE;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,KAAK,EAAEO,eAFT;AAGE,UAAA,WAAW,EAAC,SAHd;AAIE,UAAA,QAAQ,EAAE,KAAKD,2BAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAPF,EAaE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,SAAS,EAAC,cAFZ;AAGE,UAAA,KAAK,EAAC,gBAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAbF,CARF,CAFJ,EA+BGwC,yBAAyB,IAAI,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UA/BhC,CADF;AAmCD;;AAED,aACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGS,OADH,CADF;AAKD;;;;EA3N6BnE,S;;AAA1BU,iB,CACG0D,S,GAAY;AACjBT,EAAAA,OAAO,EAAEtD,SAAS,CAACgE,IAAV,CAAeC;AADP,C;AA6NrB,IAAMd,aAAa,GAAGrD,GAAH,mBAAnB;AAQA,eAAeD,OAAO,CAACsD,aAAD,CAAP,CAAuB9C,iBAAvB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport FontAwesome from 'react-fontawesome';\nimport { graphql } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport queryString from 'query-string';\n\nimport { isTokenReal, isTokenValid } from 'services/jwtHelper';\nimport { logError } from 'services/logger';\nimport 'scss/auth.css';\n\nclass ResetPasswordPage extends Component {\n  static propTypes = {\n    onLogin: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      waiting: false,\n      password: '',\n      confirmPassword: '',\n      passwordResetSuccessfully: false,\n      newLinkSetSuccessfully: false,\n      errorHappened: false,\n      errorMessage: \"\",\n    };\n\n    const { resetterJwt, email } = queryString.parse(props.location.search);\n    this.email = email;\n\n    if (isTokenReal(resetterJwt)) {\n      if (isTokenValid(resetterJwt)) {\n        this.tokenExpired = false;\n        localStorage.setItem('jwt_user_token', resetterJwt);\n      } else {\n        this.tokenExpired = true;\n      }\n    } else {\n      this.tokenInvalid = true;\n    }\n  }\n\n  handlePasswordChange = e => {\n    this.setState({ password: e.target.value });\n  };\n\n  handleConfirmPasswordChange = e => {\n    this.setState({ confirmPassword: e.target.value });\n  };\n\n  handleSendNewLink = e => {\n    this.setState({ waiting: true });\n    e.preventDefault();\n    fetch(`${process.env.REACT_APP_BACKEND_URL}/email/reset`, {\n      method: 'POST',\n      body: JSON.stringify({ email: this.email, newUser: false }),\n      headers: new Headers({\n        'Content-Type': 'application/json',\n      }),\n    })\n    .then(res => {\n      if (res.status === 204) {\n        this.setState({\n          newLinkSetSuccessfully: true,\n          errorHappened: false,\n          waiting: false,\n        });\n      } else if (res.status === 400 || res.status === 500) {\n        this.setState({\n          newLinkSetSuccessfully: false,\n          errorHappened: true,\n          errorMessage: \"Server Error. Failed to reset password.\",\n          waiting: false,\n        });\n      }\n    })\n    .catch(err => {\n      logError(err);\n      this.setState({\n        newLinkSetSuccessfully: false,\n        errorHappened: true,\n        errorMessage: \"Server Error. Failed to reset password.\",\n        waiting: false,\n      });\n    })\n  }\n\n  handleForgotPasswordLink = e => {\n    e.preventDefault();\n    this.props.history.push('/dashboard/forgot_password');\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const password = this.state.password.trim();\n    const confirmPassword = this.state.confirmPassword.trim();\n    if (!password.length || (password !== confirmPassword)) {\n      this.setState({\n        errorHappened: true,\n        errorMessage: \"Passwords did not match\"\n      })\n    } else {\n      this.props\n      .mutate({\n        variables: { newPassword: password },\n      })\n      .then(({ data }) => {\n        localStorage.setItem('jwt_user_token', data.resetPassword.jwtToken);\n        this.setState({\n          passwordResetSuccessfully: true,\n          errorHappened: false,\n        });\n        this.props.onLogin();\n      })\n      .catch(error => {\n        logError('there was an error sending the query', error);\n        this.setState({\n          passwordResetSuccessfully: false,\n          errorHappened: true,\n          errorMessage: \"Server Error. Failed to reset password.\"\n        });\n      });\n    }\n  };\n\n  render() {\n    let content;\n    const {\n      waiting,\n      passwordResetSuccessfully,\n      newLinkSetSuccessfully,\n      password,\n      confirmPassword,\n      errorHappened,\n      errorMessage\n    } = this.state;\n\n    // Content if JWT Token is invalid\n    if (this.tokenInvalid) {\n      content = (\n        <div className=\"Auth__error-text Auth__form-controls\">\n          Error: Invalid \"Reset Password\" link. Please <button className='button-link' onClick={this.handleForgotPasswordLink}>Click Here</button> if you need to reset your password.\n        </div>\n      )\n    // Content if JWT Token is Expired\n    } else if (this.tokenExpired) {\n      if (!waiting && !newLinkSetSuccessfully) {\n        content = (\n          <div className=\"Auth__form-controls\">\n            <p>For security reasons, this \"Reset Password\" link has expired.</p>\n            <p>Please click the button below, and we will send you an email containing a fresh link.</p>\n            <p>You will have 30 minutes to reset your password with that new link.</p>\n            {errorHappened && (\n              <div className=\"Auth__error-text\">\n                {' '}\n                {errorMessage}{' '}\n              </div>\n            )}\n            <form onSubmit={this.handleSendNewLink}>\n              <input\n                type=\"submit\"\n                disabled={newLinkSetSuccessfully}\n                className=\"Auth__submit\"\n                value=\"Email me a New Link\"\n              />\n            </form>\n          </div>\n        )\n      } else if (waiting) {\n        content = (\n          <FontAwesome\n            name=\"spinner\"\n            size=\"4x\"\n            className=\"Auth__waiting fa-spin\"\n          />\n        )\n      } else if (newLinkSetSuccessfully) {\n        content = (\n          <div className=\"Auth__form-controls\">\n            <h1> Email Sent! </h1>\n            <p>You have 30 minutes to reset your password before your email's link expires.</p>\n          </div>\n        )\n      }\n    // Content for Valid JWT Token\n    } else {\n      content = (\n        <div>\n          {!passwordResetSuccessfully && (\n            <div className=\"Auth__form-controls\">\n              <h1> Reset your password </h1>\n              {errorHappened && (\n                <div className=\"Auth__error-text\">\n                  {' '}\n                  {errorMessage}{' '}\n                </div>\n              )}\n              <form onSubmit={this.handleSubmit}>\n                <input\n                  type=\"password\"\n                  value={password}\n                  placeholder=\"Password\"\n                  onChange={this.handlePasswordChange}\n                />\n                <input\n                  type=\"password\"\n                  value={confirmPassword}\n                  placeholder=\"Confirm\"\n                  onChange={this.handleConfirmPasswordChange}\n                />\n                <input\n                  type=\"submit\"\n                  className=\"Auth__submit\"\n                  value=\"Reset Password\"\n                />\n              </form>\n            </div>\n          )}\n          {passwordResetSuccessfully && <Redirect to=\"/dashboard\" />}\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"AuthPage\">\n        {content}\n      </div>\n    );\n  }\n}\n\nconst resetPassword = gql`\n  mutation($newPassword: String!) {\n    resetPassword(input: { newPassword: $newPassword }) {\n      jwtToken\n    }\n  }\n`;\n\nexport default graphql(resetPassword)(ResetPasswordPage);\n"]},"metadata":{},"sourceType":"module"}