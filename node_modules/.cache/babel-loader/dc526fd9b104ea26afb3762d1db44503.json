{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/carlvlewis/floodsight/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/carlvlewis/floodsight/src/components/Dashboard/AddCrossingPage/AddCrossingPage.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query allCommunities {\\n    allCommunities {\\n      nodes {\\n        id\\n        name\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport AddCrossingMap from 'components/Shared/Map/AddCrossingMap';\nimport CrossingDetails from 'components/Dashboard/CrossingDetailPage/CrossingDetails';\nimport 'components/Dashboard/CrossingDetailPage/CrossingDetailPage.css';\nimport formatcoords from 'formatcoords';\n\nvar AddCrossingPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddCrossingPage, _Component);\n\n  function AddCrossingPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AddCrossingPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AddCrossingPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.startLat = 30.96;\n    _this.startLng = -97.46;\n    _this.minLng = -124;\n    _this.maxLng = -66;\n    _this.minLat = 25;\n    _this.maxLat = 49;\n    _this.state = {\n      lat: _this.startLat,\n      lng: _this.startLng,\n      // key updates LatLngInput form if coordinates change from dragging marker on map\n      // lets us toggle from a fully controlled component to an uncontrolled component\n      latLngInputKey: new Date().toISOString()\n    };\n\n    _this.crossingMoved = function (e) {\n      var _e$lngLat = e.lngLat,\n          lat = _e$lngLat.lat,\n          lng = _e$lngLat.lng;\n\n      if (lat > _this.minLat && lat < _this.maxLat && lng > _this.minLng && lng < _this.maxLng) {\n        _this.setState({\n          lat: e.lngLat.lat,\n          lng: e.lngLat.lng,\n          latLngInputKey: new Date().toISOString()\n        });\n      } else {\n        setTimeout(function () {\n          // Mapbox's onDragEnd is async. Need to wait before triggering another coordinate change.\n          _this.setState({\n            lat: _this.startLat,\n            lng: _this.startLng,\n            latLngInputKey: new Date().toISOString()\n          });\n        }, 50);\n      }\n    };\n\n    _this.latLngInputChanged = function (_ref) {\n      var lat = _ref.lat,\n          lng = _ref.lng;\n\n      _this.setState({\n        lat: lat,\n        lng: lng\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(AddCrossingPage, [{\n    key: \"render\",\n    value: function render() {\n      var isLoading = !this.props.data || this.props.data.loading;\n      var _this$state = this.state,\n          lat = _this$state.lat,\n          lng = _this$state.lng,\n          latLngInputKey = _this$state.latLngInputKey;\n\n      if (isLoading) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, \"Loading\");\n      }\n\n      var allCommunities = this.props.data.allCommunities.nodes;\n      var crossing = {\n        name: null,\n        description: null,\n        humanCoordinates: formatcoords([lng, lat], true).format({\n          decimalPlaces: 3\n        }),\n        lng: lng,\n        lat: lat\n      };\n      var communities = [this.props.currentUser.communityByCommunityId];\n      return React.createElement(\"div\", {\n        className: \"AddCrossingPage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"CrossingDetails__container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(AddCrossingMap, {\n        lat: lat,\n        lng: lng,\n        crossingMoved: this.crossingMoved,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }), React.createElement(CrossingDetails, {\n        crossing: crossing,\n        allCommunities: allCommunities,\n        crossingCommunities: communities,\n        addMode: true,\n        currentUser: this.props.currentUser,\n        minLat: this.minLat,\n        maxLat: this.maxLat,\n        minLng: this.minLng,\n        maxLng: this.maxLng,\n        latLngInputKey: latLngInputKey,\n        latLngInputChanged: this.latLngInputChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return AddCrossingPage;\n}(Component);\n\nvar allCommunities = gql(_templateObject());\nexport default graphql(allCommunities)(AddCrossingPage);","map":{"version":3,"sources":["/Users/carlvlewis/floodsight/src/components/Dashboard/AddCrossingPage/AddCrossingPage.js"],"names":["React","Component","graphql","gql","AddCrossingMap","CrossingDetails","formatcoords","AddCrossingPage","startLat","startLng","minLng","maxLng","minLat","maxLat","state","lat","lng","latLngInputKey","Date","toISOString","crossingMoved","e","lngLat","setState","setTimeout","latLngInputChanged","isLoading","props","data","loading","allCommunities","nodes","crossing","name","description","humanCoordinates","format","decimalPlaces","communities","currentUser","communityByCommunityId"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport AddCrossingMap from 'components/Shared/Map/AddCrossingMap';\nimport CrossingDetails from 'components/Dashboard/CrossingDetailPage/CrossingDetails';\nimport 'components/Dashboard/CrossingDetailPage/CrossingDetailPage.css';\nimport formatcoords from 'formatcoords';\n\nclass AddCrossingPage extends Component {\n  startLat = 30.96;\n  startLng = -97.46;\n  minLng = -124;\n  maxLng = -66;\n  minLat = 25;\n  maxLat = 49;\n\n  state = {\n    lat: this.startLat,\n    lng: this.startLng,\n    // key updates LatLngInput form if coordinates change from dragging marker on map\n    // lets us toggle from a fully controlled component to an uncontrolled component\n    latLngInputKey: new Date().toISOString(),\n  };\n\n  crossingMoved = e => {\n    const {lat, lng} = e.lngLat;\n    if (\n      (lat > this.minLat) &&\n      (lat < this.maxLat) &&\n      (lng > this.minLng) &&\n      (lng < this.maxLng)\n    ) {\n      this.setState({\n        lat: e.lngLat.lat,\n        lng: e.lngLat.lng,\n        latLngInputKey: new Date().toISOString(),\n      });\n    } else {\n      setTimeout(()=>{\n        // Mapbox's onDragEnd is async. Need to wait before triggering another coordinate change.\n        this.setState({\n          lat: this.startLat,\n          lng: this.startLng,\n          latLngInputKey: new Date().toISOString(),\n        })\n      }, 50);\n    }\n  };\n\n  latLngInputChanged = ({lat, lng}) => {\n    this.setState({lat, lng})\n  }\n\n  render() {\n    const isLoading = !this.props.data || this.props.data.loading;\n    const {lat, lng, latLngInputKey} = this.state;\n\n    if (isLoading) {\n      return <div>Loading</div>;\n    }\n\n    const allCommunities = this.props.data.allCommunities.nodes;\n\n    const crossing = {\n      name: null,\n      description: null,\n      humanCoordinates: formatcoords(\n        [lng, lat],\n        true,\n      ).format({ decimalPlaces: 3 }),\n      lng,\n      lat,\n    };\n\n    const communities = [this.props.currentUser.communityByCommunityId];\n\n    return (\n      <div className=\"AddCrossingPage\">\n        <div className=\"CrossingDetails__container\">\n          <AddCrossingMap\n            lat={lat} lng={lng}\n            crossingMoved={this.crossingMoved}\n          />\n          <CrossingDetails\n            crossing={crossing}\n            allCommunities={allCommunities}\n            crossingCommunities={communities}\n            addMode={true}\n            currentUser={this.props.currentUser}\n            minLat={this.minLat}\n            maxLat={this.maxLat}\n            minLng={this.minLng}\n            maxLng={this.maxLng}\n            latLngInputKey={latLngInputKey}\n            latLngInputChanged={this.latLngInputChanged}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst allCommunities = gql`\n  query allCommunities {\n    allCommunities {\n      nodes {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default graphql(allCommunities)(AddCrossingPage);\n"]},"metadata":{},"sourceType":"module"}